% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/heatmaps.R
\name{comp_heatmap}
\alias{comp_heatmap}
\title{Heatmap of taxonomic composition across samples}
\usage{
comp_heatmap(
  data,
  taxa = phyloseq::taxa_names(ps_get(data)),
  samples = phyloseq::sample_names(ps_get(data)),
  anno_tax = NULL,
  anno_samples = NULL,
  colors = heat_palette(palette = "Greens", rev = TRUE),
  numbers = NULL,
  taxa_side = "right",
  seriation_method = "OLO_ward",
  seriation_dist = "euclidean",
  seriation_method_col = seriation_method,
  seriation_dist_col = seriation_dist,
  tax_transform_numbers = "identity",
  tax_scale_numbers = "neither",
  gridlines = heat_grid(lwd = 0.1, col = "black"),
  name = "mat",
  ...
)
}
\arguments{
\item{data}{phyloseq extra output of tax_transform or tax_agg}

\item{taxa}{list of taxa to include (selection occurs AFTER any tax_transform and scaling)}

\item{samples}{list of taxa to include (selection occurs AFTER any tax_transform and scaling)}

\item{anno_tax}{NULL or tax_anno() list output}

\item{anno_samples}{NULL only support so far TODO}

\item{colors}{output of heat_palette() to set heatmap fill color scheme}

\item{numbers}{NULL or output of heat_numbers() to draw numbers on heatmap cells}

\item{taxa_side}{controls heatmap orientation and where any anno_tax annotations are placed (top/bottom/left/right)}

\item{seriation_method}{method to order the rows (in seriation::seriate)}

\item{seriation_dist}{distance to use in seriation_method (if needed)}

\item{seriation_method_col}{method to order the columns (in seriation::seriate)}

\item{seriation_dist_col}{distance to use in seriation_method_col (if needed)}

\item{tax_transform_numbers}{transformation applied to otu_table used only for any numbers printed}

\item{tax_scale_numbers}{scaling applied to numbers otu_table after transformation}

\item{gridlines}{list output of heat_grid() for setting gridline style}

\item{name}{used as legend title (colourbar)}

\item{...}{
  Arguments passed on to \code{\link[ComplexHeatmap:Heatmap]{ComplexHeatmap::Heatmap}}
  \describe{
    \item{\code{row_dend_side}}{Should the row dendrogram be put on the left or right of the heatmap?}
    \item{\code{row_dend_width}}{Width of the row dendrogram, should be a \code{\link[grid]{unit}} object.}
    \item{\code{show_row_dend}}{Whether show row dendrogram?}
    \item{\code{row_dend_gp}}{Graphic parameters for the dendrogram segments. If users already provide a \code{\link[stats]{dendrogram}} object with edges rendered, this argument will be ignored.}
    \item{\code{show_row_names}}{Whether show row names.}
    \item{\code{row_names_gp}}{Graphic parameters for row names.}
    \item{\code{row_names_rot}}{Rotation of row names.}
    \item{\code{row_names_centered}}{Should row names put centered?}
  }}
}
\description{
Heatmap made with ComplexHeatmap, with optional (but default) annotation of taxa prevalence and abundance.

Transform your data with tax_transform prior to plotting (and/or scale with tax_scale).
Plotting "compositional" data can give an idea of the dominant taxa in each sample.
Plotting some form of log or clr transformed (or scaled) microbial features can highlight
other patterns.
The transformed data will be ordered via your selected seriation methods and distances.
Any cell numbers printed can be set to different values, and do not affect ordering.
}
\examples{
data("dietswap", package = "microbiome")
psq <- tax_filter(dietswap, min_prevalence = 1 / 10, min_sample_abundance = 1 / 10)
psq <- tax_agg(psq, "Genus")

set.seed(123)
taxa <- sample(microbiome::top_taxa(ps_get(psq))[1:50], size = 30)

p <- psq \%>\%
  tax_transform("clr") \%>\%
  comp_heatmap(taxa = taxa, anno_tax = tax_anno(undetected = 50))
p

# set the colour range yourself
psq \%>\%
  tax_transform("clr") \%>\%
  comp_heatmap(
    taxa = taxa, anno_tax = tax_anno(undetected = 50),
    colors = heat_palette(palette = "Greens", rev = TRUE, range = 0:10)
  )
psq \%>\%
  tax_transform("clr") \%>\%
  comp_heatmap(
    taxa = taxa, anno_tax = tax_anno(undetected = 50),
    colors = heat_palette(palette = "Green-Orange", range = 0:5, sym = TRUE)
  )

# supply a different colour palette to heat_palette (match breaks to length)
psq \%>\%
  tax_transform("clr") \%>\%
  comp_heatmap(
    taxa = taxa, anno_tax = tax_anno(undetected = 50),
    colors = heat_palette(palette = viridisLite::turbo(12), breaks = 12)
  )

# you can place the legend at the bottom, but it is a little complicated
p <- psq \%>\%
  tax_transform("clr") \%>\%
  comp_heatmap(
    taxa = taxa, anno_tax = tax_anno(undetected = 50), name = "auto",
    heatmap_legend_param = list(direction = "horizontal", title_position = "lefttop")
  )
ComplexHeatmap::draw(p,
  heatmap_legend_side = "bottom", adjust_annotation_extension = FALSE
)

# rotate plot to have taxa as columns, annotated at the bottom
p2 <- psq \%>\%
  tax_transform("clr") \%>\%
  comp_heatmap(
    taxa = taxa, taxa_side = "bottom", anno_tax = tax_anno(undetected = 50)
  )
p2

# log2 transform data before plotting and automatic naming of scale
psq \%>\%
  tax_transform("log2", zero_replace = 1) \%>\%
  comp_heatmap(taxa, anno_tax = tax_anno(undetected = 50), name = "auto")
}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_comp_bar.R
\name{plot_comp_bar}
\alias{plot_comp_bar}
\title{Plot (grouped and ordered) compositional barplots}
\usage{
plot_comp_bar(
  ps,
  tax_level,
  n_taxa = 8,
  tax_order = "abundance",
  taxon_renamer = function(x) identity(x),
  palette = c("lightgrey", rev(distinct_palette(n_taxa))),
  sample_order = "aitchison",
  order_with_all_taxa = FALSE,
  tax_transform_for_ordering = "identity",
  label = "SAMPLE",
  group_by = NA,
  facet_by = NA,
  bar_width = 1,
  bar_outline_colour = "black",
  drop_unused_vars = TRUE,
  seriate_method = "OLO_ward"
)
}
\arguments{
\item{ps}{phyloseq object}

\item{tax_level}{taxonomic aggregation level (from rank_names(ps))}

\item{n_taxa}{how many taxa to colour show distinct colours for (all other taxa grouped into "Other").}

\item{tax_order}{order of taxa within the bars, currently only "abundance" works, which puts the most abundant taxa at the bottom (or left).}

\item{taxon_renamer}{function that takes taxon names and returns modified names for legend}

\item{palette}{palette for taxa fill colours}

\item{sample_order}{vector of sample names, any distance measure in calc_dist that does not require a phylogenetic tree, or "default" for the order returned by phyloseq::sample_names(ps)}

\item{order_with_all_taxa}{if TRUE, this will use all taxa (not just the top n_taxa) to calculate distances for sample ordering}

\item{tax_transform_for_ordering}{transformation of taxa values used before ordering samples by similarity}

\item{label}{could also consider arbitrary annotation with extra info, like in complex heatmap}

\item{group_by}{splits dataset by this variable (must be categorical) - resulting in a list of plots, one for each level of the group_by variable.}

\item{facet_by}{facets plots by this variable (must be categorical) - if group_by is also set, the faceting with occur separately in the plot for each group.}

\item{bar_width}{default 1 avoids random gapping otherwise seen with many samples (set to something less than 1 to introduce gaps between fewer samples)}

\item{bar_outline_colour}{line colour separating taxa and samples (use NA for none)}

\item{drop_unused_vars}{speeds up ps_melt but might limit future plot customisation options}

\item{seriate_method}{name of any ordering method suitable for distance matrices (see ?seriation::seriate)}
}
\value{
ggplot or list of harmonised ggplots
}
\description{
Stacked barplots showing composition of phyloseq samples for a specified number of coloured taxa. \code{plot_comp_bar} performs the compositional transformation for you, so your phyloseq object should contain counts!
\itemize{
\item sample_order: Either specify a list of sample names to order manually, or the bars/samples can/will be sorted by similarity, according to a specified distance measure (default aitchison),
\item seriate_method specifies a seriation/ordering algorithm (default Ward hierarchical clustering with optimal leaf ordering, see seriation::list_seriation_methods())
\item group_by: You can group the samples on distinct plots by levels of a variable in the phyloseq object. The list of ggplots produced can be arranged flexibly with the patchwork package functions. If you want to group by several variables you can create an interaction variable with interaction(var1, var2) in the phyloseq sample_data BEFORE using plot_comp_bar.
\item facet_by can allow faceting of your plot(s) by a grouping variable. Using this approach is less flexible than using group_by but means you don't have to arrange a list of plots yourself like with the group_by argument. Using facet_by is equivalent to adding a call to facet_wrap(facets = facet_by, scales = "free") to your plot(s). Calling facet_wrap() yourself is itself a more flexible option as you can add other arguments like the number of rows etc.
\item bar_width: No gaps between bars, unless you want them (decrease width argument to add gaps between bars).
\item bar_outline_colour: Bar outlines default to "black". Set to NA if you don't want outlines.
\item palette: Default colouring is consistent across multiple plots if created with the group_by argument, and the defaults scheme retains the colouring of the most abundant taxa irrespective of n_taxa
}
}
\examples{
library(microbiome)
data(dietswap)

# illustrative simple customised example
dietswap \%>\%
  ps_filter(timepoint == 1) \%>\%
  plot_comp_bar(
    tax_level = "Family", n_taxa = 8,
    bar_outline_colour = NA,
    sample_order = "bray",
    bar_width = 0.7,
    taxon_renamer = toupper
  ) + coord_flip()

# Order samples by the value of one of more sample_data variables.
# Use ps_arrange and set sample_order = "default" in plot_comp_bar.
# ps_mutate is also used here to create an informative variable for axis labelling
dietswap \%>\%
  ps_mutate(subject_timepoint = interaction(subject, timepoint)) \%>\%
  ps_filter(nationality == "AAM", group == "DI", sex == "female") \%>\%
  ps_arrange(desc(subject), desc(timepoint)) \%>\%
  plot_comp_bar(
    tax_level = "Genus", n_taxa = 12,
    bar_outline_colour = NA,
    sample_order = "default",
    bar_width = 0.7,
    label = "subject_timepoint"
  ) + coord_flip()


# Often to compare groups, average compositions are presented
p1 <- phyloseq::merge_samples(dietswap, group = "group") \%>\%
  plot_comp_bar(
    tax_level = "Genus", n_taxa = 12,
    sample_order = c("ED", "HE", "DI"),
    bar_width = 0.8
  ) +
  coord_flip() + labs(x = NULL, y = NULL)
p1

# However that "group-averaging" approach hides a lot of within-group variation
p2 <- plot_comp_bar(dietswap,
  tax_level = "Genus", n_taxa = 12, group_by = "group",
  sample_order = "euclidean", bar_outline_colour = NA
) \%>\%
  patchwork::wrap_plots(nrow = 3, guides = "collect") &
  coord_flip() & labs(x = NULL, y = NULL) &
  theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())
p2

# Only from p2 you can see that the apparently higher average relative abundance
# of Oscillospira in group DI is probably driven largely by a subgroup
# of DI samples with relatively high Oscillospira.

# make a list of 2 harmonised composition plots (grouped by sex)
p <- plot_comp_bar(dietswap,
  n_taxa = 15, tax_level = "Genus",
  bar_outline_colour = "black",
  sample_order = "aitchison", group_by = "sex"
)

# plot them side by side with patchwork package
patch <- patchwork::wrap_plots(p, ncol = 2, guides = "collect")
patch & coord_flip() # make bars in all plots horizontal (note: use & instead of +)

# beautifying tweak #
# modify one plot in place (flip the order of the samples in the 2nd plot)
# notice that the scaling is for the x-axis
# (that's because coord_flip is used afterwards when displaying the plots
patch[[2]] <- patch[[2]] + scale_x_discrete(limits = rev)
# Explainer: rev() function takes current limits and reverses them.
# You could also pass a completely arbitrary order, naming all samples

# you can theme all plots with the & operator
patch & coord_flip() &
  theme(axis.text.y = element_text(size = 5), legend.text = element_text(size = 6))
# See https://patchwork.data-imaginist.com/index.html
}

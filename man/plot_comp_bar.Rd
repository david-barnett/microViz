% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_comp_bar.R
\name{plot_comp_bar}
\alias{plot_comp_bar}
\title{Pretty & flexible barplots of sample composition}
\usage{
plot_comp_bar(
  ps,
  tax_level,
  n_taxa = 8,
  tax_order = "abundance",
  palette = c("lightgrey", rev(distinct_palette(n_taxa))),
  sample_order = "aitchison",
  label = "SAMPLE",
  groups = NA,
  bar_width = 1,
  bar_outline_colour = "black",
  drop_unused_vars = TRUE,
  seriate_method = "OLO_ward"
)
}
\arguments{
\item{ps}{phyloseq object}

\item{tax_level}{taxonomic aggregation level (from rank_names(ps))}

\item{n_taxa}{how many distinct taxa to colour in the plot (otherwise "other")}

\item{tax_order}{or what? taxonomy grouping?}

\item{palette}{palette for taxa fill colours}

\item{sample_order}{any distance measure in calc_dist that does not require a phylogenetic tree (or a variable?)}

\item{label}{could also consider arbitrary annotation with extra info, like in complex heatmap}

\item{groups}{splits dataset by this variable (must be categorical) and uses patchwork to assemble multiple plots?}

\item{bar_width}{default 1 avoids random gapping otherwise seen with many samples (set to something less than 1 to introduce gaps between fewer samples)}

\item{bar_outline_colour}{line colour separating taxa and samples (use NA for none)}

\item{drop_unused_vars}{speeds up ps_melt but might limit future plot customisation options}

\item{seriate_method}{name of any ordering method suitable for distance matrices (see ?seriation::seriate)}
}
\value{
ggplot or list of harmonised ggplots
}
\description{
Stacked barplots showing composition of phyloseq samples for a specified number of coloured taxa.
\itemize{
\item sample_order: The bars are sorted by similarity, according to a specified distance measure (default aitchison), and seriation/ordering algorithm (default Ward hierarchical clustering with optimal leaf ordering.)
\item groups: You can group the samples on distinct plots by levels of a variable in the phyloseq object. The list of ggplots produced can be arranged flexibly with the patchwork package functions.
\item bar_width: No gaps between bars, unless you want them (decrease width argument).
\item bar_outline_colour: Bar outlines default to "black". Set to NA if you don't want outlines.
\item palette: Default colouring is consistent across any groups, distinct, and fairly pleasant.
}
}
\examples{
library(microbiome)
data(dietswap)


# illustrative simple customised example
dietswap \%>\%
  subset_samples(timepoint == 1) \%>\%
  plot_comp_bar(
    tax_level = "Family", n_taxa = 8,
    bar_outline_colour = NA,
    sample_order = "bray", bar_width = 0.7
  ) + coord_flip()

# Often to compare groups, average compositions are presented
p1 <- phyloseq::merge_samples(dietswap, group = "group") \%>\%
  plot_comp_bar(
    tax_level = "Genus", n_taxa = 12,
    sample_order = c("ED", "HE", "DI"),
    bar_width = 0.8
  ) +
  coord_flip() + labs(x = NULL, y = NULL)
p1

# However that "group-averaging" approach hides a lot of within-group variation
p2 <- plot_comp_bar(dietswap,
  tax_level = "Genus", n_taxa = 12, groups = "group",
  sample_order = "euclidean", bar_outline_colour = NA
) \%>\%
  patchwork::wrap_plots(nrow = 3, guides = "collect") &
  coord_flip() & labs(x = NULL, y = NULL) &
  theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())
p2

# Only from p2 you can see that the apparently higher average relative abundance
# of Oscillospira in group DI is probably driven largely by a subgroup
# of DI samples with relatively high Oscillospira.

# make a list of 2 harmonised composition plots (grouped by sex)
p <- plot_comp_bar(dietswap,
  n_taxa = 15, tax_level = "Genus",
  bar_outline_colour = "black",
  sample_order = "aitchison", groups = "sex"
)

# plot them side by side with patchwork package
patch <- patchwork::wrap_plots(p, ncol = 2, guides = "collect")
patch & coord_flip() # make bars in all plots horizontal (note: use & instead of +)

# beautifying tweak #
# modify one plot in place (flip the order of the samples in the 2nd plot)
# notice that the scaling is for the x-axis
# (that's because coord_flip is used afterwards when displaying the plots
patch[[2]] <- patch[[2]] + scale_x_discrete(limits = rev)
# Explainer: rev() function takes current limits and reverses them.
# You could also pass a completely arbitrary order, naming all samples

# you can theme all plots with the & operator
patch & coord_flip() & theme(axis.text.y = element_text(size = 5), legend.text = element_text(size = 6))
# See https://patchwork.data-imaginist.com/index.html
}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tax_model_corncob.R
\name{tax_model_corncob}
\alias{tax_model_corncob}
\alias{corncob_models_to_var_stats}
\title{Beta binomial taxon models with corncob}
\usage{
tax_model_corncob(ps, tax_level, variables, taxa = "all")

corncob_models_to_var_stats(taxon_models)
}
\arguments{
\item{ps}{phyloseq object}

\item{tax_level}{name of taxonomic rank to aggregate to and model taxa at}

\item{variables}{vector of variable names to use in corncob beta binomial model}

\item{taxa}{taxa to model (named, numbered, or defaulting to 'all')}

\item{taxon_models}{named list output of \code{tax_model_corncob}}
}
\value{
list of dataframes, one df per independent variable
}
\description{
Takes a phyloseq and returns a list of models, one for each taxon.
Same independent variables for all models. Same variables for modelling both the abundance and dispersion parameters.
P-values are from wald tests for simplicity and speed... maybe I will change this in the future.

Use this function with the output of \code{tax_model_corncob}. \code{corncob_models_to_var_stats} splits the statistical results extracted from corncob models and groups them by the independent variable name that they refer to. One dataframe of this list can then be joined to the output of tax_tree_nodes to prepare for taxonomic heat tree graph visualisation of taxon-variable associations.
}
\details{
\code{tax_model_corncob} can use parallel processing with the \code{future} package.
This speeds up analysis if you have many taxa to model.
Run a line like this beforehand: \code{future::plan(future::multisession, workers = 3)}
}
\examples{
# corncob stats testing

library(dplyr)
library(tibble)
library(phyloseq)
library(microbiome)
library(corncob)
library(future)
library(future.apply)

data(dietswap)
ps <- dietswap

# create some binary variables for easy visualisation
sample_data(ps)$female <- if_else(sample_data(ps)$sex == "female", 1, 0, NaN)
sample_data(ps)$overweight <- if_else(sample_data(ps)$bmi_group == "overweight", 1, 0, NaN)
sample_data(ps)$obese <- if_else(sample_data(ps)$bmi_group == "obese", 1, 0, NaN)

# This example dataset has some taxa with the same name for phylum and family...
# We can fix problems like this with the prepend_ranks function
ps <- prepend_ranks(ps)
# this example dataset also has no root, this is unusual and needs to be fixed
tax_table(ps) <- cbind(root = "root", tax_table(ps))

# filter out rare taxa
ps <- ps \%>\% tax_filter(min_prevalence = 0.2, min_total_abundance = 10000)

# specify variables used for modelling
variables <- c("female", "overweight", "obese")

# tax_model_corncob can use parallel processing with the futures package
# this speeds up analysis if you have many taxa to model
# e.g. # future::plan(future::multisession, workers = 3)

# prep for tree viz #
# model taxa at all taxonomic levels (except root)
tax_models_list <- lapply(
  X = phyloseq::rank_names(ps)[-1],
  function(r) {
    message(Sys.time(), " - modelling at level: ", r)
    models <- tax_model_corncob(ps, tax_level = r, variables = variables, taxa = "all")
    return(models)
  }
)
# Flatten all taxonomic level lists into one list of models
# (this is why taxon names must be completely identifiable across ranks)
flat_models_list <- purrr::flatten(tax_models_list)
var_stats <- corncob_models_to_var_stats(flat_models_list)

# future::plan(future::sequential) # to turn parallel processing back off
}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tax_model.R
\name{Taxon-modelling}
\alias{Taxon-modelling}
\alias{tax_model}
\alias{taxatree_models}
\title{Statistical modelling for individual taxa in a phyloseq}
\usage{
tax_model(
  ps,
  tax_level,
  type = "bbdml",
  variables = NULL,
  formula = NULL,
  taxa = NULL,
  verbose = TRUE,
  ...
)

taxatree_models(
  ps,
  tax_levels = NULL,
  type = "bbdml",
  variables = NULL,
  formula = NULL,
  verbose = TRUE,
  ...
)
}
\arguments{
\item{ps}{phyloseq object}

\item{tax_level}{name of taxonomic rank to aggregate to and model taxa at}

\item{type}{name of modelling function to use}

\item{variables}{vector of variable names to use in statistical model as right hand side}

\item{formula}{right hand side of a formula, as a formula object or character value}

\item{taxa}{taxa to model (named, numbered, logical selection, or defaulting to all if NULL)}

\item{verbose}{message about progress and any taxa name modifications}

\item{...}{extra args passed directly to modelling function}

\item{tax_levels}{names of ranks to model taxa at (or their index) or defaults to all ranks except the first}
}
\value{
list of model objects or list of lists
}
\description{
\itemize{
\item \code{tax_model} takes a phyloseq and returns a list of models, one for each taxon
\item Same independent variables are used for all models, as specified in \code{variables} or \code{formula} argument (latter takes precedence).
\item For \code{type = "bbdml"} the same variables/formula arg is used for modelling both the abundance and dispersion parameters.
\item \code{taxatree_models} runs \code{tax_model} at multiple taxonomic ranks. Specify ranks to run over in \code{tax_levels} (plural!) argument.
}
}
\details{
\code{tax_model} can use parallel processing with the \code{future} package.
This can speed up analysis if you have many taxa to model.
Run a line like this beforehand: \code{future::plan(future::multisession, workers = 3)}
}
\examples{
# corncob stats testing
library(corncob)
library(dplyr)

data(dietswap, package = "microbiome")
ps <- dietswap

# create some binary variables for easy visualisation
ps <- ps \%>\% ps_mutate(
  female = if_else(sex == "female", 1, 0, NaN),
  overweight = if_else(bmi_group == "overweight", 1, 0, NaN),
  obese = if_else(bmi_group == "obese", 1, 0, NaN)
)

# This example dataset has some taxa with the same name for phylum and family...
# We can fix problems like this with the tax_prepend_ranks function
ps <- tax_prepend_ranks(ps)

# filter out rare taxa
ps <- ps \%>\% tax_filter(min_prevalence = 0.1, min_total_abundance = 10000)

# specify variables used for modelling
VARS <- c("female", "overweight", "obese")

# Model first 3 genera using all VARS as predictors
models <- tax_model(ps, tax_level = "Genus", taxa = 1:3, variables = VARS)
# Alternative method using formula arg instead of variables to produce identical results
models2 <- tax_model(ps, tax_level = "Genus", taxa = 1:3, formula = ~ female + overweight + obese)
all.equal(models, models2) # should be TRUE
# Model only one genus, NOTE the modified name, which was returned by tax_prepend_ranks defaults
models3 <- ps \%>\%
  tax_model(tax_level = "Genus", taxa = "G: Bacteroides fragilis et rel.", variables = VARS)
# Model all taxa at multiple taxonomic ranks (ranks 1 and 2) using only female variable as predictor
models4 <- taxatree_models(ps, tax_levels = 1:2, formula = ~female, verbose = FALSE)

models_lm <- ps \%>\%
  microbiome::transform("compositional") \%>\%
  tax_model(tax_level = "Genus", taxa = 1:3, variables = VARS, type = "lm")
}

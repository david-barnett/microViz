[{"path":"https://david-barnett.github.io/microViz/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http://contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":"https://david-barnett.github.io/microViz/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://david-barnett.github.io/microViz/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://david-barnett.github.io/microViz/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://david-barnett.github.io/microViz/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://david-barnett.github.io/microViz/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://david-barnett.github.io/microViz/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://david-barnett.github.io/microViz/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://david-barnett.github.io/microViz/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://david-barnett.github.io/microViz/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://david-barnett.github.io/microViz/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://david-barnett.github.io/microViz/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://david-barnett.github.io/microViz/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://david-barnett.github.io/microViz/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://david-barnett.github.io/microViz/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://david-barnett.github.io/microViz/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://david-barnett.github.io/microViz/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://david-barnett.github.io/microViz/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://david-barnett.github.io/microViz/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://david-barnett.github.io/microViz/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://david-barnett.github.io/microViz/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":[]},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"overview","dir":"Articles > Learn","previous_headings":"Introduction","what":"Overview","title":"Learn microbiome analysis with microViz","text":"exercises cover core concepts microbiome data analysis, using example data. can follow along writing code R Markdown notebook (script). Part 1 introduce : phyloseq objects microbiome data; basic bar charts visualizing microbiome compositions; alpha diversity indices. Part 2 introduce : ecological distances dissimilarity measures; use PCoA plots PERMANOVA; //filter microbiome data (taxa/samples). Part 3 introduce : Euclidean distance; log CLR transformations; heatmaps microbiome abundance data; Principal Components Analysis (PCA); Differential Abundance (DA) testing methods.","code":""},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"further-resources","dir":"Articles > Learn","previous_headings":"Introduction","what":"Further resources","title":"Learn microbiome analysis with microViz","text":"Refer microViz website see help pages every function, well tutorials. first version material developed part 2022 Evomics workshop Genomics. accompanying slides available via Evomics workshop’s website: http://evomics.org/2022-workshop--genomics-cesky-krumlov/","code":""},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"using-your-own-data","dir":"Articles > Learn","previous_headings":"Introduction","what":"Using your own data?","title":"Learn microbiome analysis with microViz","text":"apply methods data, first need create phyloseq object containing data. can process sequencing data count table biom file using e.g. DADA2 16S rRNA gene amplicon sequencing data, e.g. MetaPhlAn3 shotgun metagenomic data. see article called “Working phyloseq objects” details creating phyloseq objects.","code":""},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"comments-or-questions","dir":"Articles > Learn","previous_headings":"Introduction","what":"Comments or questions?","title":"Learn microbiome analysis with microViz","text":"Something missing unclear? Spotted mistake? Let know microViz GitHub discussions page.","code":""},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"setup","dir":"Articles > Learn","previous_headings":"","what":"Setup","title":"Learn microbiome analysis with microViz","text":"Set R Markdown chunk output options: Load R packages using: Get two example datasets: ’ll primarily use two datasets exercises, data gut microbiome. first study antibiotic administration mice, second large birth cohort study human infants. dataset generated using different sequencing techniques, different sequence data processing approaches. analysis approaches learn exercises can readily applied methods. approaches also appropriate microbiome data environments, just gut microbiota! used Illumina MiSeq processed data ASVs using DADA2 used Illumina HiSeq abundance species-like features inferred metaphlan3. data already processed fastq files counts per taxon. exciting bit, get explore visualize data, statistics (yay!).","code":"knitr::opts_chunk$set(echo = TRUE, fig.width = 6, fig.height = 4, dpi = 120) library(seriation) library(dplyr) library(purrr) library(ggplot2) library(phyloseq) library(microViz) library(shiny) mice <- readRDS(url(\"https://github.com/david-barnett/evomics-material/raw/898766166ce151f837b8d668bdc0bf0f859a6dd3/data/mice.rds\")) data(\"shao19\", package = \"microViz\")"},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"intro-diversity","dir":"Articles > Learn","previous_headings":"","what":"1: Intro & Diversity","title":"Learn microbiome analysis with microViz","text":"section introduce : phyloseq objects microbiome data; basic bar charts visualizing microbiome compositions; alpha diversity indices.","code":""},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"intro-to-phyloseq","dir":"Articles > Learn","previous_headings":"1: Intro & Diversity","what":"Intro to phyloseq","title":"Learn microbiome analysis with microViz","text":"phyloseq S4 object, containing processed microbiota data mouse study. Click details mice dataset: mice data data originate study effects oral antibiotic administration flavivirus infection (https://www.ncbi.nlm.nih.gov/pubmed/29590614). Sequence data generated extracted nucleic acid stool samples collected individually caged mice amplified using primers specific V4 region using primers 515F/806R. study followed flavivirus infection following treatments: Koolaid: Antibiotics provided mice via drinking water. many antibiotics taste bad, koolaid added sweetener. Therefore, appropriate control water spiked labelled koolaid. Ampicillin (Amp): https://en.wikipedia.org/wiki/Ampicillin Metronidazole (Met): https://en.wikipedia.org/wiki/Metronidazole Ampicillin + Metronidazole (Amp+Metro) Treatments supplied ad libitum 2 weeks prior viral infection maintained 2 weeks post-infection. Primary outcome mouse survival. treatment group two subgroups mice either ) left uninfected controls b) infected West Nile Virus via subcutaneous foot pad injection. Get little familiar object. ? Can look part? printed object shows functions can use access data inside. can also use @ symbol.","code":"mice ## phyloseq-class experiment-level object ## otu_table()   OTU Table:         [ 3229 taxa and 520 samples ] ## sample_data() Sample Data:       [ 520 samples by 11 sample variables ] ## tax_table()   Taxonomy Table:    [ 3229 taxa by 7 taxonomic ranks ] # View(mice) tax_table(mice) %>% head() ## Taxonomy Table:     [6 taxa by 7 taxonomic ranks]: ##         Kingdom    Phylum           Class                 Order             ## ASV0001 \"Bacteria\" \"Bacteroidetes\"  \"Bacteroidia\"         \"Bacteroidales\"   ## ASV0002 \"Bacteria\" \"Proteobacteria\" \"Gammaproteobacteria\" \"Xanthomonadales\" ## ASV0003 \"Bacteria\" \"Bacteroidetes\"  \"Bacteroidia\"         \"Bacteroidales\"   ## ASV0004 \"Bacteria\" \"Bacteroidetes\"  \"Bacteroidia\"         \"Bacteroidales\"   ## ASV0005 \"Bacteria\" \"Bacteroidetes\"  \"Bacteroidia\"         \"Bacteroidales\"   ## ASV0006 \"Bacteria\" \"Bacteroidetes\"  \"Bacteroidia\"         \"Bacteroidales\"   ##         Family               Genus              Species       ## ASV0001 \"Porphyromonadaceae\" NA                 NA            ## ASV0002 \"Xanthomonadaceae\"   \"Stenotrophomonas\" \"maltophilia\" ## ASV0003 \"Porphyromonadaceae\" NA                 NA            ## ASV0004 \"Porphyromonadaceae\" NA                 NA            ## ASV0005 \"Porphyromonadaceae\" NA                 NA            ## ASV0006 \"Porphyromonadaceae\" NA                 NA rank_names(mice) ## [1] \"Kingdom\" \"Phylum\"  \"Class\"   \"Order\"   \"Family\"  \"Genus\"   \"Species\" otu_table(mice)[1:15, 1:8] ## OTU Table:          [8 taxa and 15 samples] ##                      taxa are columns ##        ASV0001 ASV0002 ASV0003 ASV0004 ASV0005 ASV0006 ASV0007 ASV0008 ## D14.A1    3343       0    4205    3470    3607    1210    1159    1852 ## D14.B5    4332       0    5412    2494    3083    1451    1663    1745 ## D0.D5     5344       0    3906    1439    2396    1402    1217    2078 ## D0.E1     2994       0    4005    2188    2882    1267    1821    1788 ## D0.E2     2315       0    3987     955    1665    1025     899    1342 ## D0.E3     1972       0    4336    1876    3422    1208     551    1900 ## D0.E4     2352       0    2561    1960    2060    1350    1095    1200 ## D0.E5     1386       0    1752    1471    1363     724    1050     871 ## D0.F1     3795       0    4052    2226    3130     539     162     247 ## D0.F2     2867       0    2063     435    1412     410       0     150 ## D0.F3     3850       0    4203     508    2839     533       0     230 ## D0.F4     6740       0    5045    1356    5755     517      85     210 ## D14.C1    2664       3    2892    1530    2176     735    1508    1577 ## D0.F5     5303       3    4203    3313    4471    1241     344     441 ## D0.G1     3052       0    3393    3209    2867     873     372    1512 # mice@otu_table[1:15, 1:10] # the same result sample_variables(mice) ##  [1] \"sample_id\"       \"barcode\"         \"run\"             \"plate\"           ##  [5] \"sample\"          \"sex\"             \"cage\"            \"treatment_days\"  ##  [9] \"treatment\"       \"virus\"           \"survival_status\" sample_data(mice)[1:15, 1:5] ##                 sample_id      barcode run plate sample ## D14.A1  1.Thackray.D14.A1 ACGAGACTGATT 368     1      1 ## D14.B5 10.Thackray.D14.B5 ACCGGTATGTAC 368     1     10 ## D0.D5  100.Thackray.D0.D5 ATCTACCGAAGC 368     2    100 ## D0.E1  101.Thackray.D0.E1 ACTTGGTGTAAG 368     2    101 ## D0.E2  102.Thackray.D0.E2 TCTTGGAGGTCA 368     2    102 ## D0.E3  103.Thackray.D0.E3 TCACCTCCTTGT 368     2    103 ## D0.E4  104.Thackray.D0.E4 GCACACCTGATA 368     2    104 ## D0.E5  105.Thackray.D0.E5 GCGACAATTACA 368     2    105 ## D0.F1  106.Thackray.D0.F1 TCATGCTCCATT 368     2    106 ## D0.F2  107.Thackray.D0.F2 AGCTGTCAAGCT 368     2    107 ## D0.F3  108.Thackray.D0.F3 GAGAGCAACAGA 368     2    108 ## D0.F4  109.Thackray.D0.F4 TACTCGGGAACT 368     2    109 ## D14.C1 11.Thackray.D14.C1 AATTGTGTCGGA 368     1     11 ## D0.F5  110.Thackray.D0.F5 CGTGCTTAGGCT 368     2    110 ## D0.G1  111.Thackray.D0.G1 TACCGAAGGTAT 368     2    111 sample_names(mice) %>% head(10) ##  [1] \"D14.A1\" \"D14.B5\" \"D0.D5\"  \"D0.E1\"  \"D0.E2\"  \"D0.E3\"  \"D0.E4\"  \"D0.E5\"  ##  [9] \"D0.F1\"  \"D0.F2\""},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"looking-at-microbiome-data","dir":"Articles > Learn","previous_headings":"1: Intro & Diversity","what":"Looking at microbiome data","title":"Learn microbiome analysis with microViz","text":"Okay, look microbiota abundance data? , ’re going use R package microViz","code":""},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"barcharts-bad-to-better","dir":"Articles > Learn","previous_headings":"1: Intro & Diversity > Looking at microbiome data","what":"Barcharts: bad to better","title":"Learn microbiome analysis with microViz","text":"Lets take small subset data get started. Just control group (vehicle treatment) day 13. start naively plotting raw data, make several improvements make bar chart informative.","code":"# We can filter the samples like this, using the sample_data information mice %>%   ps_filter(treatment_days == \"D13\", virus == \"WNV2000\", treatment == \"Vehicle\") ## phyloseq-class experiment-level object ## otu_table()   OTU Table:         [ 563 taxa and 10 samples ] ## sample_data() Sample Data:       [ 10 samples by 11 sample variables ] ## tax_table()   Taxonomy Table:    [ 563 taxa by 7 taxonomic ranks ]"},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"bad-bars","dir":"Articles > Learn","previous_headings":"1: Intro & Diversity > Looking at microbiome data > Barcharts: bad to better","what":"Bad bars","title":"Learn microbiome analysis with microViz","text":"going ? unique taxa uninformative IDs, also got message problems taxonomy table. total number reads also varies lot samples! total number reads sample reliable indicator biomass bacterial load sample. now just consider relative abundance taxon, proportions total counts sample.","code":"mice %>%   ps_filter(treatment_days == \"D13\", virus == \"WNV2000\", treatment == \"Vehicle\") %>%   comp_barplot(     tax_level = \"unique\", n_taxa = 12, bar_width = 0.7,     sample_order = \"asis\", tax_transform_for_plot = \"identity\"   ) +   coord_flip() ## NAs detected in phyloseq tax_table: ## Consider using tax_fix() to make taxa uniquely identifiable ## NAs detected in phyloseq tax_table: ## Consider using tax_fix() to make taxa uniquely identifiable"},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"compositions","dir":"Articles > Learn","previous_headings":"1: Intro & Diversity > Looking at microbiome data > Barcharts: bad to better","what":"Compositions (%)","title":"Learn microbiome analysis with microViz","text":"","code":"mice %>%   ps_filter(treatment_days == \"D13\", virus == \"WNV2000\", treatment == \"Vehicle\") %>%   comp_barplot(     tax_level = \"unique\", n_taxa = 12, sample_order = \"asis\", bar_width = 0.7   ) +   coord_flip() ## NAs detected in phyloseq tax_table: ## Consider using tax_fix() to make taxa uniquely identifiable ## NAs detected in phyloseq tax_table: ## Consider using tax_fix() to make taxa uniquely identifiable"},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"fixing-the-tax_table","dir":"Articles > Learn","previous_headings":"1: Intro & Diversity > Looking at microbiome data > Barcharts: bad to better","what":"Fixing the tax_table","title":"Learn microbiome analysis with microViz","text":"Let’s look taxonomy table interactively: Looks like just need fill blank cells sequence classified genus family. tax_fix can , just copies info higher rank classification. Let’s update mice phyloseq object fix. can also rename unique taxa informative name, according classification rank Family (common ). Let’s try better names.  Sadly don’t enough distinct colours show unique taxa.","code":"# tax_fix_interactive(mice) # run this in the R Console for an interactive look mice <- tax_fix(mice, verbose = FALSE) mice %>%   taxa_names() %>%   head() ## [1] \"ASV0001\" \"ASV0002\" \"ASV0003\" \"ASV0004\" \"ASV0005\" \"ASV0006\" mice <- tax_rename(mice, rank = \"Family\") mice %>%   taxa_names() %>%   head() ## [1] \"Porphyromonadaceae 001\" \"Xanthomonadaceae 01\"    \"Porphyromonadaceae 002\" ## [4] \"Porphyromonadaceae 003\" \"Porphyromonadaceae 004\" \"Porphyromonadaceae 005\" mice %>%   ps_filter(treatment_days == \"D13\", virus == \"WNV2000\", treatment == \"Vehicle\") %>%   comp_barplot(     tax_level = \"unique\", n_taxa = 12, sample_order = \"asis\", bar_width = 0.7   ) +   coord_flip() mice %>%   ps_filter(treatment_days == \"D13\", virus == \"WNV2000\", treatment == \"Vehicle\") %>%   comp_barplot(     tax_level = \"unique\", n_taxa = 12, sample_order = \"asis\", bar_width = 0.7,     merge_other = FALSE   ) +   coord_flip()"},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"aggregating-taxa","dir":"Articles > Learn","previous_headings":"1: Intro & Diversity > Looking at microbiome data > Barcharts: bad to better","what":"Aggregating taxa","title":"Learn microbiome analysis with microViz","text":"let’s “aggregate” counts family-level groups. family, adds together counts every ASV belongs family. can changing tax_level argument “Family”.  aggregating family level, sacrificed taxonomic resolution, compared using ASVs. way can get idea families abundant, variable communities . Try making similar plots aggregated different taxonomic ranks.  Many ASVs mice data, Porphyromonadaceae, classified genus level.","code":"mice %>%   ps_filter(treatment_days == \"D13\", virus == \"WNV2000\", treatment == \"Vehicle\") %>%   comp_barplot(     tax_level = \"Family\", n_taxa = 10, bar_width = 0.7, sample_order = \"asis\"   ) +   coord_flip() # rank_names(mice) # mice %>% #   ps_filter(treatment_days == 'D13', virus == 'WNV2000', treatment == 'Vehicle') %>% #   comp_barplot(tax_level = , n_taxa = 10, sample_order = 'asis', merge_other = FALSE) mice %>%   ps_filter(treatment_days == \"D13\", virus == \"WNV2000\", treatment == \"Vehicle\") %>%   comp_barplot(     tax_level = \"Genus\", n_taxa = 12, bar_width = 0.7,     sample_order = \"asis\", merge_other = FALSE   ) +   coord_flip() mice %>%   ps_filter(treatment_days == \"D13\", virus == \"WNV2000\", treatment == \"Vehicle\") %>%   comp_barplot(     tax_level = \"Phylum\", n_taxa = 7, bar_width = 0.7, sample_order = \"asis\"   ) +   coord_flip()"},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"fickle-phyla","dir":"Articles > Learn","previous_headings":"1: Intro & Diversity > Looking at microbiome data > Barcharts: bad to better","what":"Fickle Phyla","title":"Learn microbiome analysis with microViz","text":"note phylum names! major changes year now old names. published research course old names (still probably year ).","code":""},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"fun-with-barcharts","dir":"Articles > Learn","previous_headings":"1: Intro & Diversity","what":"Fun with barcharts","title":"Learn microbiome analysis with microViz","text":"examples/tutorial visualizing microbiome data using stacked barcharts can found : https://david-barnett.github.io/microViz/articles/web-/compositions.html Try bit! Bar charts often look better sort samples similarity. webpage mentions using Bray-Curtis distances hierarchical clustering sort samples. haven’t discussed dissimilarity distances yet, next set exercises! now, just appreciate can make bar charts easier read!","code":""},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"alpha-diversity","dir":"Articles > Learn","previous_headings":"1: Intro & Diversity","what":"Alpha diversity","title":"Learn microbiome analysis with microViz","text":"diverse bacterial microbiome sample?","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"biologically","dir":"Articles > Learn","previous_headings":"1: Intro & Diversity > Alpha diversity > Why is this interesting?","what":"Biologically","title":"Learn microbiome analysis with microViz","text":"Lower gut microbiome diversity related worse health adult humans. Higher diversity ecosystems often considered healthier, mature, resilient perturbation. : diverse == healthy hold ecosystems, e.g. early infant gut microbiome, consider data hypotheses carefully.","code":""},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"practically","dir":"Articles > Learn","previous_headings":"1: Intro & Diversity > Alpha diversity > Why is this interesting?","what":"Practically","title":"Learn microbiome analysis with microViz","text":"Diversity indices provide simple one number summary ecosystem: easy compare stats .","code":""},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"richness","dir":"Articles > Learn","previous_headings":"1: Intro & Diversity > Alpha diversity","what":"Richness","title":"Learn microbiome analysis with microViz","text":"merrier. simplest measure just counting, aka “Observed Richness”. Let’s compute observed richness label sample .","code":"mice %>%   ps_filter(treatment_days == \"D13\", virus == \"WNV2000\", treatment == \"Vehicle\") %>%   ps_calc_richness(rank = \"Genus\", index = \"observed\", varname = \"N genera\") %>%   comp_barplot(     tax_level = \"Genus\", n_taxa = 12, label = \"N genera\", bar_width = 0.7,     sample_order = \"asis\", merge_other = FALSE # , tax_transform_for_plot = 'identity'   ) +   coord_flip()"},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"diversity","dir":"Articles > Learn","previous_headings":"1: Intro & Diversity > Alpha diversity","what":"Diversity","title":"Learn microbiome analysis with microViz","text":"Richness evenness matter calculation true diversity indices.","code":"mice %>%   ps_filter(treatment_days == \"D13\", virus == \"WNV2000\", treatment == \"Vehicle\") %>%   ps_calc_diversity(rank = \"Genus\", index = \"shannon\") %>%   ps_mutate(shannon_Genus = round(shannon_Genus, digits = 2)) %>%   comp_barplot(     tax_level = \"Genus\", n_taxa = 12, label = \"shannon_Genus\", bar_width = 0.7,     sample_order = \"asis\", merge_other = FALSE   ) +   coord_flip()"},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"statistics-with-alpha-diversity","dir":"Articles > Learn","previous_headings":"1: Intro & Diversity > Alpha diversity","what":"Statistics with alpha diversity","title":"Learn microbiome analysis with microViz","text":"alpha diversity values small subset mice.  Let’s calculate alpha diversity mice antibiotic control treatment, make comparison. suspect average gut microbiota diversity antibiotic exposed mice differ control group’s day 3.  looks like antibiotics treated mice lower gut microbiota diversity average. simple statistical test supports . can apply complex statistical tests like, e.g. adjusting covariates linear regression, using lm() Try time points? Practice making plots simple statistical tests. richness?","code":"mice %>%   ps_filter(treatment_days == \"D13\", virus == \"WNV2000\", treatment == \"Vehicle\") %>%   ps_calc_diversity(rank = \"Genus\", index = \"shannon\") %>%   samdat_tbl() %>%   ggplot(aes(x = shannon_Genus, y = \"Day 13\\ncontrols\")) +   geom_point(position = position_jitter(height = 0.2), alpha = 0.5) +   labs(x = \"Shannon diversity (Genus)\", y = NULL) +   xlim(1, 2.5) +   theme_bw() # First compute a new variable aggregating all the control mice together mice <- mice %>%   ps_mutate(antibiotics = treatment %in% c(\"Amp\", \"Metro\", \"AmpMetro\")) mice %>%   ps_filter(treatment_days == \"D13\") %>%   ps_calc_diversity(rank = \"Genus\", index = \"shannon\") %>%   samdat_tbl() %>%   ggplot(aes(y = antibiotics, x = shannon_Genus)) +   geom_boxplot(width = 0.3) +   geom_point(position = position_jitter(height = 0.2), alpha = 0.5) +   theme_bw() mice %>%   ps_filter(treatment_days == \"D13\") %>%   ps_calc_diversity(rank = \"Genus\", index = \"shannon\") %>%   samdat_tbl() %>%   wilcox.test(formula = shannon_Genus ~ antibiotics, data = .) ##  ##  Wilcoxon rank sum test with continuity correction ##  ## data:  shannon_Genus by antibiotics ## W = 533, p-value = 0.0142 ## alternative hypothesis: true location shift is not equal to 0 mice %>%   ps_filter(treatment_days == \"D13\") %>%   ps_calc_diversity(rank = \"Genus\", index = \"shannon\") %>%   samdat_tbl() %>%   lm(formula = shannon_Genus ~ antibiotics + virus, data = .) %>%   summary() ##  ## Call: ## lm(formula = shannon_Genus ~ antibiotics + virus, data = .) ##  ## Residuals: ##      Min       1Q   Median       3Q      Max  ## -1.34105 -0.20830  0.08928  0.48767  1.25856  ##  ## Coefficients: ##                 Estimate Std. Error t value Pr(>|t|)     ## (Intercept)       1.5947     0.2036   7.831 7.76e-11 *** ## antibioticsTRUE  -0.5445     0.1908  -2.854  0.00587 **  ## virusWNV2000      0.3217     0.1742   1.847  0.06956 .   ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Residual standard error: 0.6479 on 62 degrees of freedom ## Multiple R-squared:  0.1535, Adjusted R-squared:  0.1262  ## F-statistic: 5.622 on 2 and 62 DF,  p-value: 0.005706"},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"extension-exercises-for-part-1","dir":"Articles > Learn","previous_headings":"1: Intro & Diversity","what":"Extension exercises for part 1","title":"Learn microbiome analysis with microViz","text":"Click extension activity IBD dataset: extension exercise, moving quickly. Inflammatory Bowel Disease study ibd another phyloseq object containing 16S rRNA gene amplicon sequencing data, 2012 study Inflammatory Bowel Disease children young adults. ’s “old” data: used 454 Pyrosequencing, clustered raw sequences “OTUs”. look data, like mice dataset. can perform alpha diversity analysis: Try comparing alpha diversity IBD patients healthy controls. can also try stuff Shao 2019 Birth cohort data. Don’t worry don’t try now, look Shao 2019 dataset next part lab. Click additional notes richness readcount Additional notes richness readcount Simple approaches like Observed Richness sensitive ecologists call “sampling effort”. macroecologists, actually much time/effort spent trying count organisms present ecosystem. case, amount total reads obtained represents sampling effort: reads, effort. Indeed can see samples much lower readcount lower observed richness. (Furthermore, richness estimate based sample, actual ecosystem, richness estimate actually quantifiable uncertainty .)   : Simple solution: Ignore problem. Whilst can’t interpret richness individual sample correct, still usually valid compare richness across groups samples, readcount variation random noise, uncorrelated grouping variable (check ). Harder solution: Explore rigorous methods like breakaway Amy Willis team. https://www.frontiersin.org/articles/10.3389/fmicb.2019.02407/full","code":"ibd <- microViz::ibd %>%   tax_mutate(Species = NULL) %>% # ibd Species column was blank -> deleted   ps_mutate(disease = ibd == \"ibd\", ibd = NULL) # adds disease state indicator variable ibd ## phyloseq-class experiment-level object ## otu_table()   OTU Table:         [ 36349 taxa and 91 samples ] ## sample_data() Sample Data:       [ 91 samples by 15 sample variables ] ## tax_table()   Taxonomy Table:    [ 36349 taxa by 6 taxonomic ranks ] # # shao19 ## phyloseq-class experiment-level object ## otu_table()   OTU Table:         [ 819 taxa and 1644 samples ] ## sample_data() Sample Data:       [ 1644 samples by 11 sample variables ] ## tax_table()   Taxonomy Table:    [ 819 taxa by 6 taxonomic ranks ] ## phy_tree()    Phylogenetic Tree: [ 819 tips and 818 internal nodes ] mice %>%   ps_filter(treatment_days == \"D13\", virus == \"WNV2000\", treatment == \"Amp\") %>%   ps_calc_richness(rank = \"Genus\", index = \"observed\", varname = \"N genera\") %>%   comp_barplot(     tax_level = \"Genus\", n_taxa = 12, label = \"N genera\", bar_width = 0.7,     sample_order = \"asis\", merge_other = FALSE, tax_transform_for_plot = \"identity\"   ) mice %>%   ps_calc_richness(rank = \"Genus\", index = \"observed\", varname = \"genera\") %>%   ps_mutate(readcount = sample_sums(mice)) %>%   samdat_tbl() %>%   ggplot(aes(readcount, genera)) +   geom_point(alpha = 0.4, size = 2.5) +   theme_bw(14)"},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"dissimilarity-ordination-filtering","dir":"Articles > Learn","previous_headings":"","what":"2: Dissimilarity, ordination, & filtering","title":"Learn microbiome analysis with microViz","text":"section introduce ecological distances dissimilarity measures; use PCoA plots PERMANOVA; //filter microbiome data (taxa/samples). Part 1 relatively straightforward, least conceptually. lot interesting stuff can microbiome data. ’ve looked one sample time calculated compared simple summary measures sample alpha-diversity. Alpha diversity sometimes referred “within sample” diversity. Now ’re going look “beta diversity”, “sample” diversity. part ’re going swap another dataset. get little bit practice examining phyloseq object. Look rank names, sample data variables etc.","code":"shao19 # this object has another part! ## phyloseq-class experiment-level object ## otu_table()   OTU Table:         [ 819 taxa and 1644 samples ] ## sample_data() Sample Data:       [ 1644 samples by 11 sample variables ] ## tax_table()   Taxonomy Table:    [ 819 taxa by 6 taxonomic ranks ] ## phy_tree()    Phylogenetic Tree: [ 819 tips and 818 internal nodes ] #"},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"filtering","dir":"Articles > Learn","previous_headings":"2: Dissimilarity, ordination, & filtering","what":"Filtering","title":"Learn microbiome analysis with microViz","text":"First, need talk filtering.","code":""},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"sample-filtering","dir":"Articles > Learn","previous_headings":"2: Dissimilarity, ordination, & filtering > Filtering","what":"Sample filtering","title":"Learn microbiome analysis with microViz","text":"check samples surprisingly low total number (classified) reads. can suggest something went wrong lab (sample collection) data sample might unreliable. might already check total reads remove poor quality samples fastq file processing.  many enough? easy answer. samples great depth. much less reads rest, million. might consider dropping samples million reads, see affects results, case won’t. 100,000 still lot, compared older sequencing machines produced: 1000 reads might considered good. look distribution data, case obvious outliers, look recent papers using similar sequencing technique kind threshold used. might also relevant information type sequencer used e.g. Illumina website. e.g. type sequencing Illumina suggests expect least million reads (good RNA seq analyses). https://support.illumina.com/bulletins/2017/04/considerations--rna-seq-read-length--coverage-.html interested, go back recreate plot 16S sequencing dataset mice.","code":"shao19 %>%   ps_mutate(reads = sample_sums(shao19)) %>%   samdat_tbl() %>%   ggplot(aes(x = reads)) +   geom_freqpoly(bins = 500) +   geom_rug(alpha = 0.5) +   scale_x_log10(labels = scales::label_number()) +   labs(x = \"Number of classified reads\", y = NULL) +   theme_bw() # mice %>% #   ps_mutate(reads = sample_sums(mice)) %>% #   samdat_tbl() %>% #   ggplot(aes(x = reads)) + #   geom_freqpoly(bins = 30) + #   ..."},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"taxon-filtering","dir":"Articles > Learn","previous_headings":"2: Dissimilarity, ordination, & filtering > Filtering","what":"Taxon filtering","title":"Learn microbiome analysis with microViz","text":"Okay, might remove “bad” samples, can taxon “bad”? probably want filter rare taxa, performing kinds analysis.","code":""},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"why-remove-rare-taxa","dir":"Articles > Learn","previous_headings":"","what":"Learn microbiome analysis with microViz","title":"Learn microbiome analysis with microViz","text":"Rare taxa might sometimes : Sequencing errors Statistically problematic Biologically irrelevant","code":""},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"how-to-remove-rare-taxa","dir":"Articles > Learn","previous_headings":"","what":"Learn microbiome analysis with microViz","title":"Learn microbiome analysis with microViz","text":"rare? Two main concepts. Low prevalence - taxon detected small number samples dataset. Low abundance - relatively reads assigned taxon (average total) Consider impact issues 1, 2, 3. Let’s say interested unique taxa occur fewer 2% samples, least 10,000 reads total across samples. Wow remove unique taxa! going ? Let’s make plots!  taxa low prevalence, handful way reads . Let’s label points check taxa big time players.  taxa make sense dataset mostly infant gut microbiome samples. Now let’s zoom less abundant taxa log-transforming axes. ’ll also add lines indicating thresholds 2% prevalence 10000 reads abundance.  can break phylum add taxonomic table information.  pick threshold? Depends analysis method filtering ! alpha diversity = FILTER beta diversity = relevance threshold depends distance measure (next topic!) differential abundance testing = stringent filtering, prevalence >5%, >10%? (last topic!)","code":"# before filtering ntaxa(shao19) ## [1] 819 # after filtering shao19 %>%   tax_filter(min_prevalence = 2 / 100, min_total_abundance = 10000) %>%   ntaxa() ## Proportional min_prevalence given: 0.02 --> min 33/1644 samples. ## [1] 253 # make table of summary statistics for the unique taxa in shao19 shaoTaxaStats <- tibble(   taxon = taxa_names(shao19),   prevalence = microbiome::prevalence(shao19),   total_abundance = taxa_sums(shao19) ) p <- shaoTaxaStats %>%   ggplot(aes(total_abundance, prevalence)) +   geom_point(alpha = 0.5) +   geom_rug(alpha = 0.1) +   scale_x_continuous(     labels = scales::label_number(), name = \"Total Abundance\"   ) +   scale_y_continuous(     labels = scales::label_percent(), breaks = scales::breaks_pretty(n = 9),     name = \"Prevalence (%)\",     sec.axis = sec_axis(       trans = ~ . * nsamples(shao19), breaks = scales::breaks_pretty(n = 9),       name = \"Prevalence (N samples)\"     )   ) +   theme_bw() ## Warning: The `trans` argument of `sec_axis()` is deprecated as of ggplot2 3.5.0. ## ℹ Please use the `transform` argument instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. p p + ggrepel::geom_text_repel(   data = function(df) filter(df, total_abundance > 1e9 | prevalence > 0.6),   mapping = aes(label = taxon), size = 2.5, min.segment.length = 0, force = 15 ) shaoTaxaStats %>%   ggplot(aes(x = total_abundance, y = prevalence)) +   geom_vline(xintercept = 10000, color = \"red\", linetype = \"dotted\") +   geom_hline(yintercept = 2 / 100, color = \"red\", linetype = \"dotted\") +   geom_point(alpha = 0.5) +   geom_rug(alpha = 0.1) +   scale_x_log10(labels = scales::label_number(), name = \"Total Abundance\") +   scale_y_log10(     labels = scales::label_percent(), breaks = scales::breaks_log(n = 9),     name = \"Prevalence (%)\",     sec.axis = sec_axis(       trans = ~ . * nsamples(shao19), breaks = scales::breaks_log(n = 9),       name = \"Prevalence (N samples)\"     )   ) +   theme_bw() # don't worry about this code if it's confusing, just focus on the plot output shao19 %>%   tax_table() %>%   as.data.frame() %>%   as_tibble(rownames = \"taxon\") %>%   left_join(shaoTaxaStats, by = \"taxon\") %>%   add_count(phylum, name = \"phylum_count\", sort = TRUE) %>%   mutate(phylum = factor(phylum, levels = unique(phylum))) %>% # to fix facet order   mutate(phylum = forcats::fct_lump_n(phylum, n = 5)) %>%   mutate(phylum = forcats::fct_explicit_na(phylum, na_level = \"Other\")) %>%   ggplot(aes(total_abundance, prevalence)) +   geom_vline(xintercept = 10000, color = \"red\", linetype = \"dotted\") +   geom_hline(yintercept = 2 / 100, color = \"red\", linetype = \"dotted\") +   geom_point(alpha = 0.5, size = 1) +   geom_rug(alpha = 0.2) +   scale_x_log10(     labels = scales::label_log(), breaks = scales::breaks_log(n = 5),     name = \"Total Abundance\"   ) +   scale_y_log10(     labels = scales::label_percent(), breaks = scales::breaks_log(n = 9),     name = \"Prevalence (%)\",     sec.axis = sec_axis(       trans = ~ . * nsamples(shao19), breaks = scales::breaks_log(n = 9),       name = \"Prevalence (N samples)\"     )   ) +   facet_wrap(\"phylum\") +   theme_bw(10) ## Warning: There was 1 warning in `mutate()`. ## ℹ In argument: `phylum = forcats::fct_explicit_na(phylum, na_level = \"Other\")`. ## Caused by warning: ## ! `fct_explicit_na()` was deprecated in forcats 1.0.0. ## ℹ Please use `fct_na_value_to_level()` instead."},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"dissimilarity-measures","dir":"Articles > Learn","previous_headings":"2: Dissimilarity, ordination, & filtering","what":"Dissimilarity measures","title":"Learn microbiome analysis with microViz","text":"? Calculating dissimilarity two samples’ compositions. talked dissimilarity measures lecture. Binary Jaccard - presence-absence Bray-Curtis - abundance weighted UniFrac distances (unweighted, weighted, generalised) simplify speed analyses, ’re going take smaller part dataset. ’ll look 300 infant fecal samples 4 days age. ’re going filter rare taxa quite strictly, similar reasons. won’t overwrite smaller dataset: ’ll filtering per analysis. get pairwise dissimilarities, distance matrix attached extra part original phyloseq object, part container object (“ps_extra” class object created microViz, also stores info aggregation transformations performed) can extract dissimilarities distances dist_get. Binary Jaccard dissimilarities range zero (identical) one (shared genera).","code":"shao4 <- shao19 %>% ps_filter(family_role == \"child\", infant_age == 4) shao4 %>%   tax_filter(min_prevalence = 2.5 / 100) %>%   tax_agg(rank = \"genus\") %>%   tax_transform(\"binary\") %>% # converts counts to absence/presence: 0/1   dist_calc(dist = \"jaccard\") ## Proportional min_prevalence given: 0.025 --> min 8/306 samples. ## psExtra object - a phyloseq object with extra slots: ##  ## phyloseq-class experiment-level object ## otu_table()   OTU Table:         [ 35 taxa and 306 samples ] ## sample_data() Sample Data:       [ 306 samples by 11 sample variables ] ## tax_table()   Taxonomy Table:    [ 35 taxa by 5 taxonomic ranks ] ##  ## otu_get(counts = TRUE)        [ 35 taxa and 306 samples ] ##  ## psExtra info: ## tax_agg = \"genus\" tax_trans = \"binary\"  ##  ## jaccard distance matrix of size 306  ## 0.6666667 0.7333333 0.9375 0.8125 0.6428571 ... distances <- shao4 %>%   tax_filter(min_prevalence = 2.5 / 100, verbose = FALSE) %>%   tax_agg(rank = \"genus\") %>%   tax_transform(\"binary\") %>%   dist_calc(dist = \"jaccard\") %>%   dist_get() as.matrix(distances)[1:5, 1:5] ##             B01089_ba_4 B01190_ba_4 B01194_ba_4 B01196_ba_4 B01235_ba_4 ## B01089_ba_4   0.0000000   0.6666667   0.7333333   0.9375000   0.8125000 ## B01190_ba_4   0.6666667   0.0000000   0.7500000   0.9166667   0.8461538 ## B01194_ba_4   0.7333333   0.7500000   0.0000000   0.4615385   0.3076923 ## B01196_ba_4   0.9375000   0.9166667   0.4615385   0.0000000   0.4615385 ## B01235_ba_4   0.8125000   0.8461538   0.3076923   0.4615385   0.0000000 range(distances) ## [1] 0 1"},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"ordination","dir":"Articles > Learn","previous_headings":"2: Dissimilarity, ordination, & filtering","what":"Ordination","title":"Learn microbiome analysis with microViz","text":"can distances dissimilarities? can make ordination. Ordination refers process ordering things (case: samples), similar things (samples) closer , dissimilar things (samples) away.","code":""},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"pcoa","dir":"Articles > Learn","previous_headings":"2: Dissimilarity, ordination, & filtering > Ordination","what":"PCoA","title":"Learn microbiome analysis with microViz","text":"Principal Co-ordinates Analysis one kind ordination. Takes distance matrix finds new dimensions (co-ordinate system like). new dimensions created aim preserve original distances samples, capture majority distance information first dimensions. like makes easier visualize patterns data (2D 3D). helpful info ordination methods including PCoA GUide STatistical Analysis Microbial Ecology (GUSTA ) website. https://sites.google.com/site/mb3gustame/dissimilarity-based-methods/principal-coordinates-analysis website covers lot topics, ’ll cover PCoA now, PCA next session. topics may interesting read later date ’ll work microbiome analysis.  get little insight happened , can colour sample according dominant (abundant) genus.","code":"shao4 %>%   tax_filter(min_prevalence = 2.5 / 100, verbose = FALSE) %>%   tax_agg(rank = \"genus\") %>%   dist_calc(dist = \"bray\") %>%   ord_calc(method = \"PCoA\") %>%   ord_plot(alpha = 0.6, size = 2) +   theme_classic(12) +   coord_fixed(0.7) shao4 %>%   tax_filter(min_prevalence = 2.5 / 100, verbose = FALSE) %>%   ps_calc_dominant(rank = \"genus\", none = \"Mixed\", other = \"Other\") %>%   tax_agg(rank = \"genus\") %>%   dist_calc(dist = \"bray\") %>%   ord_calc(method = \"PCoA\") %>%   ord_plot(color = \"dominant_genus\", alpha = 0.6, size = 2) +   scale_color_brewer(name = \"Dominant Genus\", palette = \"Dark2\") +   theme_classic(12) +   coord_fixed(0.7)"},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"interactive-ordination","dir":"Articles > Learn","previous_headings":"2: Dissimilarity, ordination, & filtering > Ordination","what":"Interactive ordination!","title":"Learn microbiome analysis with microViz","text":"microViz provides Shiny app ord_explore interactively create explore PCoA plots ordinations. See code get started. read instructions first. things try: Colour samples using variables sample data Select samples view composition barplots! Different rank taxonomic aggregation Different distances ’ve discussed Exit app (press escape click red button R console!) Paste run code recreate ordination plot Customise plot: change colour scheme, title, etc. Practice using ps_filter etc. e.g. plot data mothers’ gut microbiomes! compute one alpha diversity measures Beware: Filter fewer samples fewer taxa speed (launching app) shouldn’t use distance don’t understand actual work, even plot looks nice! ;) mostly implemented package vegan haven’t tested Errors appear RStudio R console can report distances don’t work ’re feeling helpful! discuss PCA various transformations dinner! things won’t time cover, can look info topics like constrained ordination –> TODO: insert gusta ecology website link","code":"# fire up the shiny app # run these lines in your console (don't keep in script/notebook) shao4 %>%   tax_filter(min_prevalence = 2.5 / 100, verbose = FALSE) %>%   # calculate new sample variables with dominant taxon (optional)   ps_calc_dominant(rank = \"genus\", none = \"Mixed\", other = \"Other\") %>%   # launch a Shiny app in your web browser!   ord_explore() # different options # run this line in your console shao19 %>%   ps_filter(family_role == \"mother\") %>%   tax_filter(min_prevalence = 2.5 / 100, verbose = FALSE) %>%   # calculate a few sample variables for interest (optional)   ps_calc_dominant(rank = \"genus\", none = \"Mixed\", other = \"Other\") %>%   ps_calc_diversity(rank = \"genus\", index = \"shannon\") %>%   ps_calc_richness(rank = \"genus\", index = \"observed\") %>%   # launch a Shiny app in your web browser!   ord_explore()"},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"permanova","dir":"Articles > Learn","previous_headings":"2: Dissimilarity, ordination, & filtering","what":"PERMANOVA","title":"Learn microbiome analysis with microViz","text":"Permutational multivariate analysis variance. ANOVA - analysis variance (statistical modelling approach) Multivariate - one dependent variable (multiple taxa!) Permutational - statistical significance estimates obtained shuffling data many times details. See excellent book chapter Marti Anderson PERMANOVA: https://onlinelibrary.wiley.com/doi/full/10.1002/9781118445112.stat07841 Sometimes also called NP-MANOVA (non-parametric MANOVA) e.g. GUide STatistical Analysis Microbial Ecology website. TLDR: groups PCoA actually different??  can see model output p value, Pr(>F) 0.05. good statistical evidence bacterial gut microbiota composition c-section delivered infants different composition vaginally delivered infants 4 days age. also report used Bray-Curtis dissimilarities, calculated genera. (keeping unique taxa prevalence least 2.5%!) ’s probably good idea decide couple appropriate distance measures front tests, report (least supplementary material), choice distance measure can affect results conclusions! can also adjust covariates PERMANOVA, often , depending study design. Let’s fit complex model, adjusting infant sex, birth weight, total number assigned reads.","code":"shao4 %>%   tax_filter(min_prevalence = 2.5 / 100, verbose = FALSE) %>%   tax_agg(rank = \"genus\") %>%   dist_calc(dist = \"bray\") %>%   ord_calc(method = \"PCoA\") %>%   ord_plot(alpha = 0.6, size = 2, color = \"birth_mode\") +   theme_classic(12) +   coord_fixed(0.7) +   stat_ellipse(aes(color = birth_mode)) +   scale_color_brewer(palette = \"Set1\") shao4 %>%   tax_filter(min_prevalence = 2.5 / 100, verbose = FALSE) %>%   tax_agg(rank = \"genus\") %>%   dist_calc(dist = \"bray\") %>%   dist_permanova(variables = \"birth_mode\", n_perms = 99, seed = 123) %>%   perm_get() ## 2025-04-14 11:46:10.460091 - Starting PERMANOVA with 99 perms with 1 processes ## 2025-04-14 11:46:10.53797 - Finished PERMANOVA ## Permutation test for adonis under reduced model ## Marginal effects of terms ## Permutation: free ## Number of permutations: 99 ##  ## vegan::adonis2(formula = formula, data = metadata, permutations = n_perms, by = by, parallel = parall) ##             Df SumOfSqs      R2      F Pr(>F)    ## birth_mode   1   13.790 0.12366 42.898   0.01 ** ## Residual   304   97.727 0.87634                  ## Total      305  111.518 1.00000                  ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 # Use more permutations for a more reliable p.value in your real work (slower) # Set a random seed number for reproducibility of this stochastic method shao4 %>%   tax_filter(min_prevalence = 2.5 / 100, verbose = FALSE) %>%   tax_agg(rank = \"genus\") %>%   dist_calc(dist = \"bray\") %>%   dist_permanova(     variables = c(\"birth_mode\", \"sex\", \"birth_weight\", \"number_reads\"),     n_perms = 99, seed = 111   ) %>%   perm_get() ## Dropping samples with missings: 15 ## 2025-04-14 11:46:10.77693 - Starting PERMANOVA with 99 perms with 1 processes ## 2025-04-14 11:46:11.298982 - Finished PERMANOVA ## Permutation test for adonis under reduced model ## Marginal effects of terms ## Permutation: free ## Number of permutations: 99 ##  ## vegan::adonis2(formula = formula, data = metadata, permutations = n_perms, by = by, parallel = parall) ##               Df SumOfSqs      R2       F Pr(>F)    ## birth_mode     1   10.794 0.10163 34.8045   0.01 ** ## sex            1    0.280 0.00264  0.9031   0.43    ## birth_weight   1    0.565 0.00532  1.8215   0.06 .  ## number_reads   1    2.873 0.02705  9.2656   0.01 ** ## Residual     286   88.696 0.83509                   ## Total        290  106.211 1.00000                   ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 # Use more permutations for a more reliable p.value in your real work (slower) # Set a random seed number for reproducibility of this stochastic method"},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"transformations-pca-da","dir":"Articles > Learn","previous_headings":"","what":"3: Transformations, PCA & DA","title":"Learn microbiome analysis with microViz","text":"section introduce : Euclidean distance; log CLR transformations; heatmaps microbiome abundance data; Principal Components Analysis (PCA); Differential Abundance (DA) testing methods.","code":""},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"euclidean-distances","dir":"Articles > Learn","previous_headings":"3: Transformations, PCA & DA","what":"Euclidean distances","title":"Learn microbiome analysis with microViz","text":"Euclidean distances? ? Euclidean distances essentially generalization Pythagoras’ theorem dimensions. data every taxon feature, dimension, calculate Euclidean distances. Pythagoras: c=a2+b2c = \\sqrt{^2 + b^2} Euclidean distance: d(p,q)=∑=1ntaxa(pi−qi)2d\\left(p, q\\right) = \\sqrt{\\sum _{=1}^{n_{taxa}} \\left( p_{}-q_{}\\right)^2 } Issues Sensitive sparsity (double-zero problem) –> filter rare taxa Excessive emphasis high-abundance taxa –> transform features first PCoA looks weird! samples bunched middle spindly projections..","code":"shao4 %>%   tax_filter(min_prevalence = 2.5 / 100, verbose = FALSE) %>%   tax_agg(rank = \"genus\") %>%   dist_calc(dist = \"euclidean\") %>%   ord_calc(method = \"PCoA\") %>%   ord_plot(alpha = 0.6, size = 2) +   theme_classic(12) +   coord_fixed(0.7) +   geom_rug(alpha = 0.1)"},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"abundance-transformation","dir":"Articles > Learn","previous_headings":"3: Transformations, PCA & DA","what":"Abundance transformation","title":"Learn microbiome analysis with microViz","text":"already two transformations tax_transform(): binary (Binary Jaccard distances) compositional (barplots). Now need log transformations, centered-log-ratio, CLR, transformation.","code":""},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"log-transformations","dir":"Articles > Learn","previous_headings":"3: Transformations, PCA & DA > Abundance transformation","what":"Log transformations","title":"Learn microbiome analysis with microViz","text":"First let’s look abundance , time heatmaps. column sample (infant), row taxon.   can add proportions small subset data numbers.  Even though picked top 20 abundant genera, still lot zeros, need deal zeros, log(0) undefined. solution add small amount every value (just every zero), applying log transformation. small value often called pseudo-count. value use pseudo-count? One option just add 1, another popular option add half smallest observed real value (across whole dataset).   general, zero replacement, keep simple record approach.","code":"# Getting the taxa in abundance order up front # to keep it consistent across multiple plots shao4_sorted <- shao4 %>%   tax_sort(by = sum, at = \"genus\", trans = \"compositional\", tree_warn = FALSE) shao4_sorted %>%   tax_transform(trans = \"identity\", rank = \"genus\") %>%   comp_heatmap(     samples = 1:20, taxa = 1:20, grid_lwd = 2, name = \"Counts\",     tax_seriation = \"Identity\", sample_seriation = \"Identity\"   ) shao4_sorted %>%   tax_transform(trans = \"compositional\", rank = \"genus\") %>%   comp_heatmap(     samples = 1:20, taxa = 1:20, grid_lwd = 2, name = \"Prop.\",     tax_seriation = \"Identity\", sample_seriation = \"Identity\"   ) shao4_sorted %>%   tax_transform(trans = \"compositional\", rank = \"genus\") %>%   comp_heatmap(     numbers = heat_numbers(fmt = \"%.1f\"), numbers_use_counts = FALSE,     samples = 1:20, taxa = 1:20, grid_lwd = 2, name = \"Prop.\",     tax_seriation = \"Identity\", sample_seriation = \"Identity\"   ) shao4_sorted %>%   tax_transform(rank = \"genus\", trans = \"log10\", zero_replace = 1) %>%   comp_heatmap(     samples = 1:20, taxa = 1:20, grid_lwd = 2, name = \"log10\\n(x+1)\",     tax_seriation = \"Identity\", sample_seriation = \"Identity\"   ) shao4_sorted %>%   tax_agg(rank = \"genus\") %>%   # tax_transform(trans = 'compositional') %>% # compositional also possible   tax_transform(trans = \"log10\", zero_replace = \"halfmin\", chain = TRUE) %>%   comp_heatmap(     samples = 1:20, taxa = 1:20, grid_lwd = 2, name = \"log10\\nhalfmin\",     tax_seriation = \"Identity\", sample_seriation = \"Identity\"   )"},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"centered-log-ratio-transformation","dir":"Articles > Learn","previous_headings":"3: Transformations, PCA & DA > Abundance transformation","what":"Centered Log Ratio transformation:","title":"Learn microbiome analysis with microViz","text":"Compositionality problem improved centered-log-ratio transformation. centered log-ratio (clr) transformation uses geometric mean sample vector reference.  sequencing data gives us relative abundances, absolute abundances. total number reads sequenced per sample arbitrary total. one taxon blooms, whilst everything else stays stable, relative abundance taxa must (appear ) go . leads two main types problem: interpretation caveats: see differential abundance section later statistical issues: taxon abundances independent, (weakly?) negatively correlated worse simpler ecosystems. problem theory RNAseq data, suspect less bothersome many competing “species” RNA transcript bacterial species even complex microbiome. centered-log-ratio transformation (along similar ratio transformations) claimed help statistical issues transforming abundances simplex real space. Practically, CLR transformation involves finding geometric mean sample, dividing abundance taxon sample geometric mean. Finally take natural log ratio. details, check Gloor 2017. Microbiome Datasets Compositional: optional","code":"shao4_sorted %>%   tax_agg(rank = \"genus\") %>%   # tax_transform(trans = 'compositional') %>% # compositional also possible   tax_transform(trans = \"clr\", zero_replace = \"halfmin\", chain = TRUE) %>%   comp_heatmap(     samples = 1:20, taxa = 1:20, grid_lwd = 2, name = \"CLR\\nhalfmin\",     colors = heat_palette(sym = TRUE),     tax_seriation = \"Identity\", sample_seriation = \"Identity\"   )"},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"fun-with-heatmaps","dir":"Articles > Learn","previous_headings":"3: Transformations, PCA & DA","what":"Fun with Heatmaps","title":"Learn microbiome analysis with microViz","text":"Heatmaps look much better sort rows similarity (using distances hierarchical clustering!). examples/tutorial visualizing microbiome data using heatmaps can found : https://david-barnett.github.io/microViz/articles/web-/heatmaps.html","code":"#"},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"pca","dir":"Articles > Learn","previous_headings":"3: Transformations, PCA & DA","what":"PCA","title":"Learn microbiome analysis with microViz","text":"Principal Components Analysis. Quite similar Principal Co-ordinates Analysis. fact, PCA produces equivalent results PCoA euclidean distances. let’s perform CLR-transform first check PCA euclidean PCoA .   PCA interesting us? Principal components built directly (linear) combination original features. means know much taxon contributes PC axis, can plot information (loadings) arrows, alongside sample points.  interpret taxa loading vectors? Cautiously. caveats nuance interpretation plots, called PCA bi-plots, can read : https://sites.google.com/site/mb3gustame/indirect-gradient-analysis/pca relative length direction arrow indicates much taxon contributes variation visible PC axis, e.g. Variation Enterococcus contributes quite lot variation along PC2 axis. allows infer samples positioned bottom plot tend higher relative abundance Enterococcus samples top plot. Interestingly, samples right plot (tend vaginally-delivered infants) seem relatively Bifidobacterium, Bacteroides Escherichia, whilst C-section born infants relatively Veillonella. (Side note, Phocaeicola considered part Bacteroides year!) might already noticed pattern, exploring making barplots interactively ord_explore earlier.","code":"shao4 %>%   tax_filter(min_prevalence = 2.5 / 100, verbose = FALSE) %>%   tax_transform(rank = \"genus\", trans = \"clr\", zero_replace = \"halfmin\") %>%   dist_calc(dist = \"euclidean\") %>%   ord_calc(method = \"PCoA\") %>%   ord_plot(alpha = 0.6, size = 2, color = \"birth_mode\") +   theme_classic(12) +   coord_fixed(0.7) +   scale_y_reverse() shao4 %>%   tax_filter(min_prevalence = 2.5 / 100, verbose = FALSE) %>%   tax_transform(rank = \"genus\", trans = \"clr\", zero_replace = \"halfmin\") %>%   ord_calc(method = \"PCA\") %>%   ord_plot(alpha = 0.6, size = 2, color = \"birth_mode\") +   theme_classic(12) +   coord_fixed(0.7) pca <- shao4 %>%   tax_filter(min_prevalence = 2.5 / 100, verbose = FALSE) %>%   tax_transform(rank = \"genus\", trans = \"clr\", zero_replace = \"halfmin\") %>%   ord_calc(method = \"PCA\") %>%   ord_plot(     alpha = 0.6, size = 2, color = \"birth_mode\",     plot_taxa = 1:6, tax_vec_length = 0.275,     tax_lab_style = tax_lab_style(       type = \"text\", max_angle = 90, aspect_ratio = 0.7,       size = 3, fontface = \"bold\"     ),   ) +   theme_classic(12) +   coord_fixed(0.7, clip = \"off\") pca"},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"iris-plot","dir":"Articles > Learn","previous_headings":"3: Transformations, PCA & DA > PCA","what":"Iris plot","title":"Learn microbiome analysis with microViz","text":"can make another kind barplot now, using PCA information order samples circular layout.","code":"iris <- shao4 %>%   tax_filter(min_prevalence = 2.5 / 100, verbose = FALSE) %>%   tax_transform(rank = \"genus\", trans = \"clr\", zero_replace = \"halfmin\") %>%   ord_calc(method = \"PCA\") %>%   ord_plot_iris(     tax_level = \"genus\", n_taxa = 12, other = \"Other\",     anno_colour = \"birth_mode\",     anno_colour_style = list(alpha = 0.6, size = 0.6, show.legend = FALSE)   ) iris patchwork::wrap_plots(pca, iris, nrow = 1, guides = \"collect\")"},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"taxon-stats","dir":"Articles > Learn","previous_headings":"3: Transformations, PCA & DA","what":"Taxon stats","title":"Learn microbiome analysis with microViz","text":"PCA loadings barplots , strong suspicions taxa higher relative abundance vaginally delivered infants c-section delivered infants, vice versa, can also statistically test . often called “differential abundance” (DA) testing, style “differential expression” (DE) testing transcriptomics field.","code":"shao4 %>%   comp_barplot(     tax_level = \"genus\", n_taxa = 12, facet_by = \"birth_mode\",     label = NULL, bar_outline_colour = NA   ) +   coord_flip() +   theme(axis.ticks.y = element_blank())"},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"model-one-taxon","dir":"Articles > Learn","previous_headings":"3: Transformations, PCA & DA > Taxon stats","what":"Model one taxon","title":"Learn microbiome analysis with microViz","text":"start creating linear regression model one genus, Bacteroides. transform count data first making proportions, taking binary logarithm, log2, adding pseudocount. Click optional ggplot2 extension exercise: Starting dataframe like one produced code , plot: Easy: percentage prevalence Bacteroides birth_mode group Medium: distribution relative abundance Bacteroides birth_mode group, omitting zeros, log2 scale Hard: task 1 2 several taxa one plot - (hint: pivot_longer) can fit model covariates, PERMANOVA. going convert categorical variables indicator (dummy) variables, scale continuous covariates 0 mean SD 1 (z-scores). ’ll see make subsequent plots easier interpret later.","code":"bacteroidesRegression1 <- shao4 %>%   tax_transform(\"compositional\", rank = \"genus\") %>%   tax_model(     type = \"lm\", rank = \"genus\",     trans = \"log2\", trans_args = list(zero_replace = \"halfmin\"),     taxa = \"Bacteroides\", variables = \"birth_mode\",     return_psx = FALSE   ) %>%   pluck(1) ## Modelling: Bacteroides # looking at the regression results summary(bacteroidesRegression1) ##  ## Call: ## Bacteroides ~ birth_mode ##  ## Residuals: ##     Min      1Q  Median      3Q     Max  ## -7.7492 -0.6172 -0.6172  2.6421 18.0804  ##  ## Coefficients: ##                   Estimate Std. Error t value Pr(>|t|)     ## (Intercept)       -19.3756     0.4863  -39.84   <2e-16 *** ## birth_modevaginal   7.1320     0.6812   10.47   <2e-16 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Residual standard error: 5.957 on 304 degrees of freedom ## Multiple R-squared:  0.265,  Adjusted R-squared:  0.2626  ## F-statistic: 109.6 on 1 and 304 DF,  p-value: < 2.2e-16 confint(bacteroidesRegression1) ##                        2.5 %     97.5 % ## (Intercept)       -20.332614 -18.418542 ## birth_modevaginal   5.791662   8.472414 broom::tidy(bacteroidesRegression1, conf.int = TRUE) ## # A tibble: 2 × 7 ##   term              estimate std.error statistic   p.value conf.low conf.high ##   <chr>                <dbl>     <dbl>     <dbl>     <dbl>    <dbl>     <dbl> ## 1 (Intercept)         -19.4      0.486     -39.8 1.08e-122   -20.3     -18.4  ## 2 birth_modevaginal     7.13     0.681      10.5 4.13e- 22     5.79      8.47 shao4 %>%   tax_transform(\"compositional\", rank = \"genus\") %>%   ps_get() %>%   ps_otu2samdat(taxa = \"Bacteroides\") %>%   samdat_tbl() shao4 <- shao4 %>%   ps_mutate(     C_section = if_else(birth_mode == \"c_section\", true = 1, false = 0),     Female = if_else(sex == \"female\", true = 1, false = 0),     Birth_weight_Z = scale(birth_weight, center = TRUE, scale = TRUE),     Reads_Z = scale(number_reads, center = TRUE, scale = TRUE)   ) bacteroidesRegression2 <- shao4 %>%   tax_transform(\"compositional\", rank = \"genus\") %>%   tax_model(     type = \"lm\", rank = \"genus\", taxa = \"Bacteroides\",     trans = \"log2\", trans_args = list(zero_replace = \"halfmin\"),     variables = c(\"C_section\", \"Female\", \"Birth_weight_Z\", \"Reads_Z\"),     return_psx = FALSE   ) %>%   pluck(1) ## Warning in do.call(fun, list(txt)): 15 / 306 values are NA in Female ## Warning in do.call(fun, list(txt)): 14 / 306 values are NA in Birth_weight_Z ## Modelling: Bacteroides # looking at the regression results summary(bacteroidesRegression2) ##  ## Call: ## Bacteroides ~ C_section + Female + Birth_weight_Z + Reads_Z ##  ## Residuals: ##     Min      1Q  Median      3Q     Max  ## -9.4271 -2.1555 -0.4115  2.8176 18.1784  ##  ## Coefficients: ##                Estimate Std. Error t value Pr(>|t|)     ## (Intercept)    -11.7942     0.6103 -19.325   <2e-16 *** ## C_section       -7.5696     0.7206 -10.505   <2e-16 *** ## Female          -0.3809     0.7101  -0.536    0.592     ## Birth_weight_Z   0.3277     0.3514   0.932    0.352     ## Reads_Z          0.5361     0.3620   1.481    0.140     ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Residual standard error: 5.934 on 286 degrees of freedom ##   (15 observations deleted due to missingness) ## Multiple R-squared:  0.2854, Adjusted R-squared:  0.2754  ## F-statistic: 28.55 on 4 and 286 DF,  p-value: < 2.2e-16 broom::tidy(bacteroidesRegression2, conf.int = TRUE) ## # A tibble: 5 × 7 ##   term           estimate std.error statistic  p.value conf.low conf.high ##   <chr>             <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl> ## 1 (Intercept)     -11.8       0.610   -19.3   8.15e-54  -13.0      -10.6  ## 2 C_section        -7.57      0.721   -10.5   4.81e-22   -8.99      -6.15 ## 3 Female           -0.381     0.710    -0.536 5.92e- 1   -1.78       1.02 ## 4 Birth_weight_Z    0.328     0.351     0.932 3.52e- 1   -0.364      1.02 ## 5 Reads_Z           0.536     0.362     1.48  1.40e- 1   -0.176      1.25"},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"many-da-methods","dir":"Articles > Learn","previous_headings":"3: Transformations, PCA & DA > Taxon stats > Model one taxon","what":"Many DA methods","title":"Learn microbiome analysis with microViz","text":"method MaAsLin2 default (except call compositional transformation “Total Sum Scaling (TSS)”). quite straightforward method, stick today, many statistical methods developed differential abundance analyses. Microbiome abundance data quite awkward, statistically speaking, due sparseness compositionality. successive method claims handle aspect awkwardness “better” previous methods. aim method adequate power detect true associations, whilst controlling type 1 error rate, “false positive” reporting associations “truly” present. Results surprisingly inconsistent across different methods, demonstrated year fascinating analysis Jacob Nearing colleagues. ? Filter noise & interpret results caution! use multiple testing corrections Remember ’s relative (abundance) Avoid Lefse edgeR? Beware: methods allow covariate adjustment & allow random effects (time-series)","code":""},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"model-all-the-taxa","dir":"Articles > Learn","previous_headings":"3: Transformations, PCA & DA > Taxon stats","what":"Model all the taxa!","title":"Learn microbiome analysis with microViz","text":"’re normally interested just one taxon! often ’s also hard decide taxonomic rank interested modelling! Lower ranks like species ASVs give better resolution also sparsity classification uncertainty… Higher ranks e.g. classes, also powerful think taxa within class follow similar pattern. now fit similar model almost* every taxon every rank available, phylum species. *’ll actually filter species prevalence less 10%. filter taxa? ’s less likely interested rare taxa, models rare taxon abundances likely unreliable. Reducing number taxa modelled also makes process faster makes visualizing results easier!","code":"# The code for `taxatree_models` is quite similar to tax_model. # However, you might need to run `tax_prepend_ranks` to ensure that each taxon at each rank is always unique. shaoModels <- shao4 %>%   tax_prepend_ranks() %>%   tax_transform(\"compositional\", rank = \"species\", keep_counts = TRUE) %>%   tax_filter(min_prevalence = 0.1, undetected = 0, use_counts = TRUE) %>%   taxatree_models(     type = lm, trans = \"log2\", trans_args = list(zero_replace = \"halfmin\"),     ranks = c(\"phylum\", \"class\", \"order\", \"family\", \"genus\", \"species\"),     variables = c(\"C_section\", \"Female\", \"Birth_weight_Z\", \"Reads_Z\")   ) ## Proportional min_prevalence given: 0.1 --> min 31/306 samples. ## 2025-04-14 11:46:29.508849 - modelling at rank: phylum ## Warning in do.call(fun, list(txt)): 15 / 306 values are NA in Female ## Warning in do.call(fun, list(txt)): 14 / 306 values are NA in Birth_weight_Z ## 2025-04-14 11:46:29.658459 - modelling at rank: class ## Warning in do.call(fun, list(txt)): 15 / 306 values are NA in Female ## Warning in do.call(fun, list(txt)): 14 / 306 values are NA in Birth_weight_Z ## 2025-04-14 11:46:29.847102 - modelling at rank: order ## Warning in do.call(fun, list(txt)): 15 / 306 values are NA in Female ## Warning in do.call(fun, list(txt)): 14 / 306 values are NA in Birth_weight_Z ## 2025-04-14 11:46:30.091785 - modelling at rank: family ## Warning in do.call(fun, list(txt)): 15 / 306 values are NA in Female ## Warning in do.call(fun, list(txt)): 14 / 306 values are NA in Birth_weight_Z ## 2025-04-14 11:46:30.38357 - modelling at rank: genus ## Warning in do.call(fun, list(txt)): 15 / 306 values are NA in Female ## Warning in do.call(fun, list(txt)): 14 / 306 values are NA in Birth_weight_Z ## 2025-04-14 11:46:30.724581 - modelling at rank: species ## Warning in do.call(fun, list(txt)): 15 / 306 values are NA in Female ## Warning in do.call(fun, list(txt)): 14 / 306 values are NA in Birth_weight_Z shaoModels ## psExtra object - a phyloseq object with extra slots: ##  ## phyloseq-class experiment-level object ## otu_table()   OTU Table:         [ 39 taxa and 306 samples ] ## sample_data() Sample Data:       [ 306 samples by 15 sample variables ] ## tax_table()   Taxonomy Table:    [ 39 taxa by 6 taxonomic ranks ] ##  ## otu_get(counts = TRUE)        [ 39 taxa and 306 samples ] ##  ## psExtra info: ## tax_agg = \"species\" tax_trans = \"compositional\"  ##  ## taxatree_models list: ## Ranks: phylum/class/order/family/genus/species"},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"getting-stats-from-the-models","dir":"Articles > Learn","previous_headings":"3: Transformations, PCA & DA > Taxon stats > Model all the taxa!","what":"Getting stats from the models","title":"Learn microbiome analysis with microViz","text":"Next get data.frame containing regression coefficient estimates, test statistics corresponding p values regression models.","code":"shaoStats <- taxatree_models2stats(shaoModels) shaoStats ## psExtra object - a phyloseq object with extra slots: ##  ## phyloseq-class experiment-level object ## otu_table()   OTU Table:         [ 39 taxa and 306 samples ] ## sample_data() Sample Data:       [ 306 samples by 15 sample variables ] ## tax_table()   Taxonomy Table:    [ 39 taxa by 6 taxonomic ranks ] ##  ## otu_get(counts = TRUE)        [ 39 taxa and 306 samples ] ##  ## psExtra info: ## tax_agg = \"species\" tax_trans = \"compositional\"  ##  ## taxatree_stats dataframe: ## 89 taxa at 6 ranks: phylum, class, order, family, genus, species  ## 4 terms: C_section, Female, Birth_weight_Z, Reads_Z shaoStats %>% taxatree_stats_get() ## # A tibble: 356 × 8 ##    term           taxon      rank  formula estimate std.error statistic  p.value ##    <fct>          <chr>      <fct> <chr>      <dbl>     <dbl>     <dbl>    <dbl> ##  1 C_section      p: Proteo… phyl… `p: Pr…  -3.72       0.812   -4.58   7.01e- 6 ##  2 Female         p: Proteo… phyl… `p: Pr…  -0.0684     0.800   -0.0855 9.32e- 1 ##  3 Birth_weight_Z p: Proteo… phyl… `p: Pr…  -0.253      0.396   -0.638  5.24e- 1 ##  4 Reads_Z        p: Proteo… phyl… `p: Pr…  -0.369      0.408   -0.905  3.66e- 1 ##  5 C_section      p: Actino… phyl… `p: Ac…  -4.25       0.739   -5.75   2.25e- 8 ##  6 Female         p: Actino… phyl… `p: Ac…  -0.439      0.728   -0.603  5.47e- 1 ##  7 Birth_weight_Z p: Actino… phyl… `p: Ac…   0.293      0.361    0.813  4.17e- 1 ##  8 Reads_Z        p: Actino… phyl… `p: Ac…  -0.876      0.371   -2.36   1.90e- 2 ##  9 C_section      p: Firmic… phyl… `p: Fi…   2.43       0.342    7.12   8.74e-12 ## 10 Female         p: Firmic… phyl… `p: Fi…   0.697      0.337    2.07   3.95e- 2 ## # ℹ 346 more rows"},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"adjusting-p-values","dir":"Articles > Learn","previous_headings":"3: Transformations, PCA & DA > Taxon stats > Model all the taxa!","what":"Adjusting p values","title":"Learn microbiome analysis with microViz","text":"performed lot statistical tests , quite possible find significant p-values chance alone. correct multiple testing / control false discovery rate family-wise error rate. Instead applying adjustment methods across 86 taxa models ranks, default behaviour control family-wise error rate per taxonomic rank.","code":"shaoStats <- shaoStats %>% taxatree_stats_p_adjust(method = \"BH\", grouping = \"rank\") # notice the new variable shaoStats %>% taxatree_stats_get() ## # A tibble: 356 × 9 ## # Groups:   rank [6] ##    term  taxon rank  formula estimate std.error statistic  p.value p.adj.BH.rank ##    <fct> <chr> <fct> <chr>      <dbl>     <dbl>     <dbl>    <dbl>         <dbl> ##  1 C_se… p: P… phyl… `p: Pr…  -3.72       0.812   -4.58   7.01e- 6      2.81e- 5 ##  2 Fema… p: P… phyl… `p: Pr…  -0.0684     0.800   -0.0855 9.32e- 1      9.32e- 1 ##  3 Birt… p: P… phyl… `p: Pr…  -0.253      0.396   -0.638  5.24e- 1      6.45e- 1 ##  4 Read… p: P… phyl… `p: Pr…  -0.369      0.408   -0.905  3.66e- 1      6.39e- 1 ##  5 C_se… p: A… phyl… `p: Ac…  -4.25       0.739   -5.75   2.25e- 8      1.20e- 7 ##  6 Fema… p: A… phyl… `p: Ac…  -0.439      0.728   -0.603  5.47e- 1      6.45e- 1 ##  7 Birt… p: A… phyl… `p: Ac…   0.293      0.361    0.813  4.17e- 1      6.39e- 1 ##  8 Read… p: A… phyl… `p: Ac…  -0.876      0.371   -2.36   1.90e- 2      5.07e- 2 ##  9 C_se… p: F… phyl… `p: Fi…   2.43       0.342    7.12   8.74e-12      6.99e-11 ## 10 Fema… p: F… phyl… `p: Fi…   0.697      0.337    2.07   3.95e- 2      9.03e- 2 ## # ℹ 346 more rows"},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"plot-all-the-taxatree_stats","dir":"Articles > Learn","previous_headings":"3: Transformations, PCA & DA > Taxon stats","what":"Plot all the taxatree_stats!","title":"Learn microbiome analysis with microViz","text":"taxatree_plots() allows plot statistics (e.g. point estimates significance) taxa models onto tree layout. taxon models organised rank, radiating central root node e.g. Phyla around center Species outermost ring. taxatree_plots() returns list plots, can arrange one figure patchwork package example (/cowplot).","code":"shaoStats %>%   taxatree_plots(node_size_range = c(1, 3), sig_stat = \"p.adj.BH.rank\") %>%   patchwork::wrap_plots(ncol = 2, guides = \"collect\")"},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"taxatree-key","dir":"Articles > Learn","previous_headings":"3: Transformations, PCA & DA > Taxon stats > Plot all the taxatree_stats!","what":"Taxatree Key","title":"Learn microbiome analysis with microViz","text":"know taxa nodes? can create labelled grey tree taxatree_plotkey(). labels taxa based certain conditions specify.  can trees customise liking. See extended tutorial microViz website: including directly label taxa colored plots, change layout style trees, even use different regression modelling approach.","code":"set.seed(123) # label position key <- shaoStats %>%   taxatree_plotkey(     taxon_renamer = function(x) stringr::str_remove(x, \"[pfg]: \"),     # conditions below, for filtering taxa to be labelled     rank == \"phylum\" | rank == \"genus\" & prevalence > 0.2     # all phyla are labelled, and all genera with a prevalence of over 0.2   ) key # try it out!"},{"path":"https://david-barnett.github.io/microViz/articles/learn/exercises.html","id":"session-info","dir":"Articles > Learn","previous_headings":"","what":"Session info","title":"Learn microbiome analysis with microViz","text":"session_info records package versions etc. useful debugging / reproducing analysis.","code":"devtools::session_info() ## ─ Session info ─────────────────────────────────────────────────────────────── ##  setting  value ##  version  R version 4.5.0 (2025-04-11) ##  os       Ubuntu 24.04.2 LTS ##  system   x86_64, linux-gnu ##  ui       X11 ##  language en ##  collate  C.UTF-8 ##  ctype    C.UTF-8 ##  tz       UTC ##  date     2025-04-14 ##  pandoc   3.1.11 @ /opt/hostedtoolcache/pandoc/3.1.11/x64/ (via rmarkdown) ##  quarto   NA ##  ## ─ Packages ─────────────────────────────────────────────────────────────────── ##  package          * version date (UTC) lib source ##  ade4               1.7-23  2025-02-14 [1] RSPM ##  ape                5.8-1   2024-12-16 [1] RSPM ##  backports          1.5.0   2024-05-23 [1] RSPM ##  Biobase            2.67.0  2024-10-29 [1] Bioconduc~ ##  BiocGenerics       0.53.6  2025-01-27 [1] Bioconduc~ ##  biomformat         1.35.0  2024-10-29 [1] Bioconduc~ ##  Biostrings         2.75.4  2025-02-21 [1] Bioconduc~ ##  broom              1.0.8   2025-03-28 [1] RSPM ##  bslib              0.9.0   2025-01-30 [1] RSPM ##  ca                 0.71.1  2020-01-24 [1] RSPM ##  cachem             1.1.0   2024-05-16 [1] RSPM ##  circlize           0.4.16  2024-02-20 [1] RSPM ##  cli                3.6.4   2025-02-13 [1] RSPM ##  clue               0.3-66  2024-11-13 [1] RSPM ##  cluster            2.1.8.1 2025-03-12 [3] CRAN (R 4.5.0) ##  codetools          0.2-20  2024-03-31 [3] CRAN (R 4.5.0) ##  colorspace         2.1-1   2024-07-26 [1] RSPM ##  ComplexHeatmap     2.23.1  2025-04-01 [1] Bioconduc~ ##  corncob            0.4.2   2025-03-29 [1] RSPM ##  crayon             1.5.3   2024-06-20 [1] RSPM ##  data.table         1.17.0  2025-02-22 [1] RSPM ##  desc               1.4.3   2023-12-10 [1] RSPM ##  devtools           2.4.5   2022-10-11 [1] RSPM ##  digest             0.6.37  2024-08-19 [1] RSPM ##  doParallel         1.0.17  2022-02-07 [1] RSPM ##  dplyr            * 1.1.4   2023-11-17 [1] RSPM ##  ellipsis           0.3.2   2021-04-29 [1] RSPM ##  evaluate           1.0.3   2025-01-10 [1] RSPM ##  farver             2.1.2   2024-05-13 [1] RSPM ##  fastmap            1.2.0   2024-05-15 [1] RSPM ##  forcats            1.0.0   2023-01-29 [1] RSPM ##  foreach            1.5.2   2022-02-02 [1] RSPM ##  fs                 1.6.5   2024-10-30 [1] RSPM ##  generics           0.1.3   2022-07-05 [1] RSPM ##  GenomeInfoDb       1.43.4  2025-01-24 [1] Bioconduc~ ##  GenomeInfoDbData   1.2.14  2025-04-14 [1] Bioconductor ##  GetoptLong         1.0.5   2020-12-15 [1] RSPM ##  ggforce            0.4.2   2024-02-19 [1] RSPM ##  ggplot2          * 3.5.2   2025-04-09 [1] RSPM ##  ggraph             2.2.1   2024-03-07 [1] RSPM ##  ggrepel            0.9.6   2024-09-07 [1] RSPM ##  GlobalOptions      0.1.2   2020-06-10 [1] RSPM ##  glue               1.8.0   2024-09-30 [1] RSPM ##  graphlayouts       1.2.2   2025-01-23 [1] RSPM ##  gridExtra          2.3     2017-09-09 [1] RSPM ##  gtable             0.3.6   2024-10-25 [1] RSPM ##  htmltools          0.5.8.1 2024-04-04 [1] RSPM ##  htmlwidgets        1.6.4   2023-12-06 [1] RSPM ##  httpuv             1.6.15  2024-03-26 [1] RSPM ##  httr               1.4.7   2023-08-15 [1] RSPM ##  igraph             2.1.4   2025-01-23 [1] RSPM ##  IRanges            2.41.3  2025-02-12 [1] Bioconduc~ ##  iterators          1.0.14  2022-02-05 [1] RSPM ##  jquerylib          0.1.4   2021-04-26 [1] RSPM ##  jsonlite           2.0.0   2025-03-27 [1] RSPM ##  knitr              1.50    2025-03-16 [1] RSPM ##  labeling           0.4.3   2023-08-29 [1] RSPM ##  later              1.4.2   2025-04-08 [1] RSPM ##  lattice            0.22-6  2024-03-20 [3] CRAN (R 4.5.0) ##  lifecycle          1.0.4   2023-11-07 [1] RSPM ##  magrittr           2.0.3   2022-03-30 [1] RSPM ##  MASS               7.3-65  2025-02-28 [3] CRAN (R 4.5.0) ##  Matrix             1.7-3   2025-03-11 [3] CRAN (R 4.5.0) ##  matrixStats        1.5.0   2025-01-07 [1] RSPM ##  memoise            2.0.1   2021-11-26 [1] RSPM ##  mgcv               1.9-1   2023-12-21 [3] CRAN (R 4.5.0) ##  microbiome         1.29.0  2025-01-23 [1] Bioconduc~ ##  microViz         * 0.12.7  2025-04-14 [1] local ##  mime               0.13    2025-03-17 [1] RSPM ##  miniUI             0.1.1.1 2018-05-18 [1] RSPM ##  multtest           2.63.0  2024-10-29 [1] Bioconduc~ ##  munsell            0.5.1   2024-04-01 [1] RSPM ##  nlme               3.1-168 2025-03-31 [3] CRAN (R 4.5.0) ##  patchwork          1.3.0   2024-09-16 [1] RSPM ##  permute            0.9-7   2022-01-27 [1] RSPM ##  phyloseq         * 1.51.0  2025-01-23 [1] Bioconduc~ ##  pillar             1.10.2  2025-04-05 [1] RSPM ##  pkgbuild           1.4.7   2025-03-24 [1] RSPM ##  pkgconfig          2.0.3   2019-09-22 [1] RSPM ##  pkgdown            2.1.1   2024-09-17 [1] RSPM ##  pkgload            1.4.0   2024-06-28 [1] RSPM ##  plyr               1.8.9   2023-10-02 [1] RSPM ##  png                0.1-8   2022-11-29 [1] RSPM ##  polyclip           1.10-7  2024-07-23 [1] RSPM ##  profvis            0.4.0   2024-09-20 [1] RSPM ##  promises           1.3.2   2024-11-28 [1] RSPM ##  purrr            * 1.0.4   2025-02-05 [1] RSPM ##  R6                 2.6.1   2025-02-15 [1] RSPM ##  ragg               1.4.0   2025-04-10 [1] RSPM ##  RColorBrewer       1.1-3   2022-04-03 [1] RSPM ##  Rcpp               1.0.14  2025-01-12 [1] RSPM ##  registry           0.5-1   2019-03-05 [1] RSPM ##  remotes            2.5.0   2024-03-17 [1] RSPM ##  reshape2           1.4.4   2020-04-09 [1] RSPM ##  rhdf5              2.51.2  2025-01-08 [1] Bioconduc~ ##  rhdf5filters       1.19.2  2025-03-05 [1] Bioconduc~ ##  Rhdf5lib           1.29.2  2025-03-24 [1] Bioconduc~ ##  rjson              0.2.23  2024-09-16 [1] RSPM ##  rlang              1.1.5   2025-01-17 [1] RSPM ##  rmarkdown          2.29    2024-11-04 [1] RSPM ##  Rtsne              0.17    2023-12-07 [1] RSPM ##  S4Vectors          0.45.4  2025-02-11 [1] Bioconduc~ ##  sass               0.4.9   2024-03-15 [1] RSPM ##  scales             1.3.0   2023-11-28 [1] RSPM ##  seriation        * 1.5.7   2024-12-05 [1] RSPM ##  sessioninfo        1.2.3   2025-02-05 [1] RSPM ##  shape              1.4.6.1 2024-02-23 [1] RSPM ##  shiny            * 1.10.0  2024-12-14 [1] RSPM ##  stringi            1.8.7   2025-03-27 [1] RSPM ##  stringr            1.5.1   2023-11-14 [1] RSPM ##  survival           3.8-3   2024-12-17 [3] CRAN (R 4.5.0) ##  systemfonts        1.2.2   2025-04-04 [1] RSPM ##  textshaping        1.0.0   2025-01-20 [1] RSPM ##  tibble             3.2.1   2023-03-20 [1] RSPM ##  tidygraph          1.3.1   2024-01-30 [1] RSPM ##  tidyr              1.3.1   2024-01-24 [1] RSPM ##  tidyselect         1.2.1   2024-03-11 [1] RSPM ##  TSP                1.2-4   2023-04-04 [1] RSPM ##  tweenr             2.0.3   2024-02-26 [1] RSPM ##  UCSC.utils         1.3.1   2025-01-15 [1] Bioconduc~ ##  urlchecker         1.0.1   2021-11-30 [1] RSPM ##  usethis            3.1.0   2024-11-26 [1] RSPM ##  utf8               1.2.4   2023-10-22 [1] RSPM ##  vctrs              0.6.5   2023-12-01 [1] RSPM ##  vegan              2.6-10  2025-01-29 [1] RSPM ##  viridis            0.6.5   2024-01-29 [1] RSPM ##  viridisLite        0.4.2   2023-05-02 [1] RSPM ##  withr              3.0.2   2024-10-28 [1] RSPM ##  xfun               0.52    2025-04-02 [1] RSPM ##  xtable             1.8-4   2019-04-21 [1] RSPM ##  XVector            0.47.2  2025-01-08 [1] Bioconduc~ ##  yaml               2.3.10  2024-07-26 [1] RSPM ##  ##  [1] /home/runner/work/_temp/Library ##  [2] /opt/R/4.5.0/lib/R/site-library ##  [3] /opt/R/4.5.0/lib/R/library ##  * ── Packages attached to the search path. ##  ## ──────────────────────────────────────────────────────────────────────────────"},{"path":"https://david-barnett.github.io/microViz/articles/ps_extra-replaced.html","id":"do-i-need-to-read-this","dir":"Articles","previous_headings":"","what":"Do I need to read this?","title":"Upgrading to microViz version 0.10.0 (and beyond)","text":"article important read already using microViz version 0.9.7 earlier, like upgrade newest version. can check version microViz using running following code.","code":"packageVersion(\"microViz\") #> [1] '0.12.7'"},{"path":"https://david-barnett.github.io/microViz/articles/ps_extra-replaced.html","id":"key-points","dir":"Articles","previous_headings":"","what":"Key points","title":"Upgrading to microViz version 0.10.0 (and beyond)","text":"microViz version 0.10.0 introduces changes may break code written older versions microViz. Breaking change 1: Description: using $ operator access parts old “ps_extra” S3 class list (e.g. yourData$ps yourData$dist) longer work microViz 0.10.0 later Solution: must replace use $ operator accessor functions, e.g. ps_get() dist_get() Breaking change 2: Description: saved “ps_extra” object generated older version microViz, compatible microViz version 0.10.0 later versions Solution: can convert old “ps_extra” objects new “psExtra” S4 objects new function upgrade_ps_extra_to_psExtra() Need help? questions upgrading version microViz, please ask Discussions page. encounter problems (mentioned ) upgrading version 0.10.0 later, please report Issues, describe version microViz occur , e.g. include output packageVersion(\"microViz\") sessionInfo().","code":""},{"path":"https://david-barnett.github.io/microViz/articles/ps_extra-replaced.html","id":"explanation","dir":"Articles","previous_headings":"","what":"Explanation","title":"Upgrading to microViz version 0.10.0 (and beyond)","text":"Many microViz functions, including tax_transform(), dist_calc(), etc. use produce R objects contain “phyloseq” object along additional information (e.g. name transformation applied, name distance method used) additional objects (e.g. distance matrix ). microViz versions 0.9.7 earlier, extra information objects stored alongside phyloseq object simple (S3) list object class, “ps_extra”. microViz version 0.10.0 onwards, S3 “ps_extra” object class longer used. replaced S4 object class “psExtra”. “psExtra” S4 class extension “phyloseq” S4 class, extra slots store information additional objects. slots clearly named accessor function retrieve information data stored within .","code":""},{"path":"https://david-barnett.github.io/microViz/articles/ps_extra-replaced.html","id":"why-was-this-change-made","dir":"Articles","previous_headings":"Explanation","what":"Why was this change made?","title":"Upgrading to microViz version 0.10.0 (and beyond)","text":"long term, change simplify compatibility microViz packages work phyloseq objects. functions expect phyloseq object now also work psExtra objects, extra slots can just ignored. (now, unsure, safest use ps_get extract plain phyloseq psExtra object.)","code":""},{"path":"https://david-barnett.github.io/microViz/articles/ps_extra-replaced.html","id":"do-i-need-to-understand-what-s4-and-s3-classes-are","dir":"Articles","previous_headings":"Explanation","what":"Do I need to understand what S4 and S3 classes are?","title":"Upgrading to microViz version 0.10.0 (and beyond)","text":", need understand concepts use microViz. interested learn, good place start Hadley Wickham’s Advanced R book chapter object-oriented programming.","code":""},{"path":"https://david-barnett.github.io/microViz/articles/shao19-analyses.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Example analyses: Shao 2019 data","text":"article demonstrate data processing steps, statistical analyses, visualisations can performed microViz package. also provide tips use microViz data, point articles details. data used article derived faecal samples obtained infants mothers participating large birth cohort study. Note: human gut microbiota data generated shotgun metagenomic sequencing, microViz can () used microbiota data various sources, including 16S marker gene amplicon sequencing techniques, well HITChip profiling. Environmental vitro microbiota datasets also welcome microViz, just human gut bugs. can put data phyloseq object, can use microViz . need guidance create phyloseq object data: see article resource links.","code":"set.seed(1) # for reproducible stochastic processes library(phyloseq) library(ggplot2) library(patchwork) # for combining multiple plots library(microViz) #> microViz version 0.12.7 - Copyright (C) 2021-2025 David Barnett #> ! Website: https://david-barnett.github.io/microViz #> ✔ Useful?  For citation details, run: `citation(\"microViz\")` #> ✖ Silence? `suppressPackageStartupMessages(library(microViz))` shao19 #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 819 taxa and 1644 samples ] #> sample_data() Sample Data:       [ 1644 samples by 11 sample variables ] #> tax_table()   Taxonomy Table:    [ 819 taxa by 6 taxonomic ranks ] #> phy_tree()    Phylogenetic Tree: [ 819 tips and 818 internal nodes ] ?shao19 # for more details on the dataset"},{"path":"https://david-barnett.github.io/microViz/articles/shao19-analyses.html","id":"checking-your-data","dir":"Articles","previous_headings":"","what":"Checking your data","title":"Example analyses: Shao 2019 data","text":"can check basic characteristics phyloseq dataset using standard phyloseq functions. microViz also provides helper functions. Note: taxa already informative unique names, taxa_names just numbers sequences, look tax_rename() function one way replace readable/informative unique names. function phyloseq_validate() can used check common problems phyloseq objects, suggest running data trying start analyses.","code":"sample_names(shao19) %>% head() #> [1] \"B01042_mo\"    \"B01042_ba_10\" \"B01042_ba_7\"  \"B01089_mo\"    \"B01089_ba_4\"  #> [6] \"B01089_ba_7\" taxa_names(shao19) %>% head() #> [1] \"Escherichia coli\"             \"Bacteroides caccae\"           #> [3] \"Bacteroides stercoris\"        \"Ruminococcus bromii\"          #> [5] \"[Eubacterium] rectale\"        \"Bifidobacterium adolescentis\" sample_variables(shao19) #>  [1] \"subject_id\"              \"family_id\"               #>  [3] \"sex\"                     \"family_role\"             #>  [5] \"age\"                     \"infant_age\"              #>  [7] \"birth_weight\"            \"birth_mode\"              #>  [9] \"c_section_type\"          \"antibiotics_current_use\" #> [11] \"number_reads\" samdat_tbl(shao19) # retrieve sample_data as a tibble #> # A tibble: 1,644 × 12 #>    .sample_name subject_id family_id sex    family_role   age infant_age #>    <chr>        <chr>      <chr>     <chr>  <chr>       <int>      <int> #>  1 B01042_mo    B01042_mo  193       male   mother         32         NA #>  2 B01042_ba_10 B01042_ba  193       male   child           0         10 #>  3 B01042_ba_7  B01042_ba  193       male   child           0          7 #>  4 B01089_mo    B01089_mo  194       female mother         38         NA #>  5 B01089_ba_4  B01089_ba  194       female child           0          4 #>  6 B01089_ba_7  B01089_ba  194       female child           0          7 #>  7 B01089_ba_21 B01089_ba  194       female child           0         21 #>  8 B01128_ba_7  B01128_ba  195       male   child           0          7 #>  9 B01128_mo    B01128_mo  195       male   mother         32         NA #> 10 B01190_ba_21 B01190_ba  196       male   child           0         21 #> # ℹ 1,634 more rows #> # ℹ 5 more variables: birth_weight <dbl>, birth_mode <chr>, #> #   c_section_type <chr>, antibiotics_current_use <chr>, number_reads <int> otu_get(shao19, taxa = 1:3, samples = 1:5) # look at a tiny part of the otu_table #> OTU Table:          [3 taxa and 5 samples] #>                      taxa are columns #>              Escherichia coli Bacteroides caccae Bacteroides stercoris #> B01042_mo             5787899            2237960               1225392 #> B01042_ba_10           130453                  0                     0 #> B01042_ba_7                 0                  0                     0 #> B01089_mo             7371972             595532                746435 #> B01089_ba_4                 0                  0                     0 rank_names(shao19) #> [1] \"phylum\"  \"class\"   \"order\"   \"family\"  \"genus\"   \"species\" tax_table(shao19) %>% head(3) #> Taxonomy Table:     [3 taxa by 6 taxonomic ranks]: #>                       phylum           class                 order              #> Escherichia coli      \"Proteobacteria\" \"Gammaproteobacteria\" \"Enterobacterales\" #> Bacteroides caccae    \"Bacteroidetes\"  \"Bacteroidia\"         \"Bacteroidales\"    #> Bacteroides stercoris \"Bacteroidetes\"  \"Bacteroidia\"         \"Bacteroidales\"    #>                       family               genus         #> Escherichia coli      \"Enterobacteriaceae\" \"Escherichia\" #> Bacteroides caccae    \"Bacteroidaceae\"     \"Bacteroides\" #> Bacteroides stercoris \"Bacteroidaceae\"     \"Bacteroides\" #>                       species                 #> Escherichia coli      \"Escherichia coli\"      #> Bacteroides caccae    \"Bacteroides caccae\"    #> Bacteroides stercoris \"Bacteroides stercoris\" shao19 <- phyloseq_validate(shao19) # no messages or warnings means no detected problems"},{"path":"https://david-barnett.github.io/microViz/articles/shao19-analyses.html","id":"fixing-your-tax_table","dir":"Articles","previous_headings":"Checking your data","what":"Fixing your tax_table","title":"Example analyses: Shao 2019 data","text":"One common problem encounter either run phyloseq_validate shortly , problematic entries taxonomy table. example many “species” rank entries \"s__\" \"unknown_species\" NA etc. species name appear multiple genera, duplicated uninformative entries need replaced can proceed. See article discussion fix problems using tax_fix() maybe tax_fix_interactive() /tax_filter(). last resort also try deleting entirely unwanted taxa using tax_select().","code":""},{"path":"https://david-barnett.github.io/microViz/articles/shao19-analyses.html","id":"modify-your-sample_data","dir":"Articles","previous_headings":"","what":"Modify your sample_data","title":"Example analyses: Shao 2019 data","text":"Later example analyses need modified version sample variables stored sample_data slot phyloseq object. ps_mutate() function provides easy way modify phyloseq sample_data (ps short phyloseq). can use ps_mutate() similar way dplyr::mutate(). unfamiliar dplyr package, highly recommend look dplyr website, learn incredibly handy tools data transformation, several microViz data transformation functions used similar way.","code":"shao19 <- shao19 %>%   ps_mutate(     Csection = ifelse(birth_mode == \"c_section\", yes = 1, no = 0),     birth_mode3 = dplyr::recode(       c_section_type,       Elective_CS = \"CS Elective\", Emergency_CS = \"CS Emergency\", .missing = \"Vaginal\"     )   )"},{"path":"https://david-barnett.github.io/microViz/articles/shao19-analyses.html","id":"subset-your-samples","dir":"Articles","previous_headings":"","what":"Subset your samples","title":"Example analyses: Shao 2019 data","text":"first part example analyses look one sample per infant, timepoint 4 days old. microViz function ps_filter() makes easy. use ps_filter() similar way dplyr::filter(), filter samples using variables sample_data. also use ps_dedupe() “deduplicate” samples, ensure definitely keep one sample per family (e.g. infant one sample age 4, twins). Note 1: Observe == used , = Note 2: default, ps_filter() also removes taxa longer appear filtered dataset (zero total counts). different phyloseq::subset_samples() phyloseq::prune_samples().","code":"shao4d <- shao19 %>%   ps_filter(family_role == \"child\", infant_age == 4, .keep_all_taxa = TRUE) %>%   ps_dedupe(vars = \"family_id\") #> 306 groups: with 1 samples each #> Dropped 0 samples. shao4d #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 353 taxa and 306 samples ] #> sample_data() Sample Data:       [ 306 samples by 13 sample variables ] #> tax_table()   Taxonomy Table:    [ 353 taxa by 6 taxonomic ranks ] #> phy_tree()    Phylogenetic Tree: [ 353 tips and 352 internal nodes ]"},{"path":"https://david-barnett.github.io/microViz/articles/shao19-analyses.html","id":"composition-barplot","dir":"Articles","previous_headings":"","what":"Composition barplot","title":"Example analyses: Shao 2019 data","text":"Let us look compositions infant samples age 4 days, grouping samples birth mode. comp_barplot() function make generating attractive informative ggplot2 bar chart easy: default automatically sorts samples microbiota similarity, sorts taxa overall abundance, applies sensible categorical colour palette many colours. Taxa assigned colour merged one light grey bar default, can shown un-merged, example.  practice, try modifying barplot changing comp_barplot() arguments, try example: using different dissimilarity measure sort samples, displaying different taxonomic rank, colouring fewer taxa, /removing bar outlines. Check article composition bar plots guidance ideas.","code":"shao4d %>%   comp_barplot(\"genus\", n_taxa = 15, merge_other = FALSE, label = NULL) +   facet_wrap(vars(birth_mode), scales = \"free\") + # scales = \"free\" is IMPORTANT!   coord_flip() +   ggtitle(     \"Neonatal gut microbiota composition at 4 days\",     \"Substanstial differences are visible in profiles of high abundance taxa\"   ) +   theme(axis.ticks.y = element_blank(), strip.text = element_text(face = \"bold\"))"},{"path":"https://david-barnett.github.io/microViz/articles/shao19-analyses.html","id":"ordination-plot","dir":"Articles","previous_headings":"","what":"Ordination plot","title":"Example analyses: Shao 2019 data","text":"microViz provides easy workflow creating ordination plots including PCA, PCoA NMDS using ggplot2, including plotting taxa loadings arrows PCA. Preparing ordination plot requires steps. tax_filter() filter rare taxa - optional step, relevant ordination methods tax_agg() aggregate taxa chosen taxonomic rank, e.g. genus tax_transform() transform abundance counts (important PCA, inappropriate many dissimilarity-based ordinations) dist_calc() calculate sample-sample distance dissimilarity matrix (needed dissimilarity-based methods, e.g. PCoA NMDS) ord_calc() perform ordination analysis ord_plot() plot two dimensions ordinated data Note: microViz record choices steps 2 5, adding additional information phyloseq object, now called “psExtra”. default psExtra object also store: original counts OTU table (transformation); distance matrix; ordination object. retrieve , use ps_get(counts = TRUE), dist_get(), ord_get().  PCA plot ggplot object, can adjust aesthetic scales (colour, shape, size etc.) theme elements usual ggplot ways. However, styling taxon loadings arrows labels can done within ord_plot() call .  many choices make ordination analysis visualisation. Try customising ordination plot : change arguments ord_plot() (e.g. map shape aesthetic infant sex, plot 1st & 4th principal components); use ggplot functions change appearance plot (e.g. pick new theme modify current theme remove panel.grid). Try different choices ordination analysis , e.g. make NMDS plot using Bray-Curtis dissimilarities calculating using class-level data. sounds like much typing, might like skip ahead section creating exploring Interactive ordination plots ord_explore(). Note 1: distance calculation ordination analysis methods implemented collected within brilliant vegan package developed statisticians Jari Oksanen Gavin Simpson, amongst others. microViz uses vegan functions internally, provides ggplot2 approach visualising ordination results. Note 2: Constrained conditioned ordination analyses, e.g. RDA, also possible. understand rationale behind analyses, feel free try setting constraints /conditions arguments ord_calc(). concepts new , “GUSTA ” GUide STatistical Analysis Microbial Ecology website one good resource learning useful methods like redundancy analysis partial redundancy analysis. easy produce quite misleading plots misuse constrained analyses, careful! 😇","code":"shao4d_psX <- shao4d %>%   # keep only taxa belonging to genera that have over 100 counts in at least 5% of samples   tax_filter(min_prevalence = 0.05, undetected = 100, tax_level = \"genus\") %>%   # aggregate counts at genus-level & transform with robust CLR transformation   tax_transform(trans = \"rclr\", rank = \"genus\") %>%   # no distances are needed for PCA: so skip dist_calc and go straight to ord_calc   ord_calc(method = \"PCA\") #> Proportional min_prevalence given: 0.05 --> min 16/306 samples.  shao4d_psX #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 29 taxa and 306 samples ] #> sample_data() Sample Data:       [ 306 samples by 13 sample variables ] #> tax_table()   Taxonomy Table:    [ 29 taxa by 5 taxonomic ranks ] #>  #> otu_get(counts = TRUE)        [ 29 taxa and 306 samples ] #>  #> psExtra info: #> tax_agg = \"genus\" tax_trans = \"rclr\"  #>  #> ordination of class: rda cca  #> rda(formula = OTU ~ 1, data = data) #> Ordination info: #> method = 'PCA' PCA_plot <- shao4d_psX %>%   ord_plot(     colour = \"birth_mode\", shape = \"birth_mode\",     plot_taxa = 10:1,     tax_vec_length = 0.3,     tax_lab_style = tax_lab_style(       type = \"label\", max_angle = 90, aspect_ratio = 1,       size = 2.5, alpha = 0.8, fontface = \"bold\", # style the labels       label.r = unit(0, \"mm\") # square corners of labels - see ?geom_label     )   ) +   coord_fixed(ratio = 1, clip = \"off\", xlim = c(-2, 2)) # match coord_fixed() ratio to tax_lab_style() aspect_ratio for correct text angles  PCA_plot PCA_plot_custom <- PCA_plot +   # add a convex hull around the points for each group, to aid the eye   stat_chull(     mapping = aes(colour = birth_mode, linetype = birth_mode),     linewidth = 0.5, alpha = 0.5, show.legend = FALSE   ) +   scale_shape_manual(     name = \"Birth mode\",     values = c(\"circle\", \"circle open\"), labels = c(\"C-section\", \"Vaginal\")   ) +   # set a custom colour scale and customise the legend order and appearance   scale_color_manual(     name = \"Birth mode\",     values = c(\"black\", \"grey45\"), labels = c(\"C-section\", \"Vaginal\"),     guide = guide_legend(override.aes = list(size = 4))   ) +   # add a title and delete the automatic caption   labs(title = \"4-day-old gut microbiota and birth mode\", caption = NULL) +   # put the legend at the bottom and draw a border around it   theme(legend.position = \"bottom\", legend.background = element_rect())  PCA_plot_custom"},{"path":"https://david-barnett.github.io/microViz/articles/shao19-analyses.html","id":"ordination-sorted-circular-barplot","dir":"Articles","previous_headings":"","what":"Ordination-sorted circular barplot","title":"Example analyses: Shao 2019 data","text":"additional insight ordination plot results, microViz provides novel approach pairing circular microbiota composition bar chart, “iris” plot, ordination plot. samples circular bar chart ordered using rotational order samples ordination plot axes!","code":"irisPlot <- shao4d_psX %>%   ord_plot_iris(     axes = c(1, 2), tax_level = \"genus\", n_taxa = 8,     anno_binary = \"Csection\", # add an annotation ring indicating C-section birth     anno_binary_style = list(size = 0.5, colour = \"black\"), # from ord plot colour scale     ord_plot = \"none\" # we'll reuse the customised PCA plot from earlier   ) +   guides(fill = guide_legend(ncol = 3)) +   theme(legend.position = \"bottom\")  patchwork::wrap_plots(PCA_plot_custom, irisPlot, nrow = 1, widths = c(5, 4))"},{"path":"https://david-barnett.github.io/microViz/articles/shao19-analyses.html","id":"interactive-ordination-plots","dir":"Articles","previous_headings":"","what":"Interactive ordination plots","title":"Example analyses: Shao 2019 data","text":"Want create ordination plot /explore dataset, don’t fancy much typing? Starting just validated phyloseq object can run ord_explore() interactively create explore ordination plots.  shown video clip , default web browser open new window (tab), display interactive shiny application. Select options menu build interactive ordination plot, click /lasso select samples view compositions. Click “Options” button change ordination settings. Click “Code” button generate code can copy-paste script/notebook reproduce ordination plot.","code":"ord_explore(shao19)"},{"path":"https://david-barnett.github.io/microViz/articles/shao19-analyses.html","id":"composition-heatmap","dir":"Articles","previous_headings":"","what":"Composition heatmap","title":"Example analyses: Shao 2019 data","text":"Heatmaps can useful way display taxonomic composition samples, addition instead bar charts. can transform taxa using tax_transform(), various kinds log transformations (including clr rclr) can helpful illustrate relative abundance patterns low abundance high abundance taxa plot. advantage heatmaps comp_barplot(), patterns involving low relative abundance taxa can hard spot.  See microViz heatmaps article guidance making composition heatmaps. See ComplexHeatmap online book information controlling display Complex Heatmaps.","code":"shao4d %>%   tax_transform(trans = \"rclr\", rank = \"genus\") %>%   tax_filter(min_prevalence = 0.1, use_counts = TRUE) %>%   comp_heatmap(     colors = heat_palette(sym = TRUE), grid_col = NA,     sample_side = \"bottom\", name = \"Robust\\nCLR\",     sample_anno = sampleAnnotation(       \"Birth mode\" = anno_sample(\"birth_mode3\"),       col = list(\"Birth mode\" = c(         \"CS Elective\" = \"black\", \"CS Emergency\" = \"orange\", \"Vaginal\" = \"lightgrey\"       ))     )   ) #> Proportional min_prevalence given: 0.1 --> min 31/306 samples."},{"path":"https://david-barnett.github.io/microViz/articles/shao19-analyses.html","id":"statistical-testing","dir":"Articles","previous_headings":"","what":"Statistical testing","title":"Example analyses: Shao 2019 data","text":"microViz can also help perform visualise results statistical tests. couple simple examples follow.","code":""},{"path":"https://david-barnett.github.io/microViz/articles/shao19-analyses.html","id":"permanova","dir":"Articles","previous_headings":"Statistical testing","what":"PERMANOVA","title":"Example analyses: Shao 2019 data","text":"One common method assessing whether variable associated overall difference microbiota composition dataset permutational multivariate analysis variance (PERMANOVA). great introduction PERMANOVA, see resource Marti J Anderson. vegan provides vegan::adonis2() function performing PERMANOVA analyses. microViz provides convenience function, dist_permanova() allows use distance matrix stored psExtra object perform PERMANOVA adonis2, store result psExtra .","code":"shao4d_perm <- shao4d %>%   tax_transform(\"identity\", rank = \"genus\") %>%   dist_calc(\"aitchison\") %>%   dist_permanova(     variables = c(\"birth_mode\", \"sex\", \"number_reads\"),     n_perms = 99, # you should use more permutations in your real analyses!     n_processes = 1   ) #> Dropping samples with missings: 15 #> 2025-04-14 11:49:13.887985 - Starting PERMANOVA with 99 perms with 1 processes #> 2025-04-14 11:49:14.30558 - Finished PERMANOVA  shao4d_perm %>% perm_get() #> Permutation test for adonis under reduced model #> Marginal effects of terms #> Permutation: free #> Number of permutations: 99 #>  #> vegan::adonis2(formula = formula, data = metadata, permutations = n_perms, by = by, parallel = parall) #>               Df SumOfSqs      R2       F Pr(>F)    #> birth_mode     1    10462 0.09055 29.3778   0.01 ** #> sex            1      402 0.00348  1.1296   0.29    #> number_reads   1     1117 0.00967  3.1364   0.01 ** #> Residual     287   102209 0.88462                   #> Total        290   115540 1.00000                   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://david-barnett.github.io/microViz/articles/shao19-analyses.html","id":"differential-abundance-testing","dir":"Articles","previous_headings":"Statistical testing","what":"Differential abundance testing","title":"Example analyses: Shao 2019 data","text":"microViz provides functions applying various statistical modelling methods microbiome data, see statistical modelling article longer discussion. microViz introduce novel statistical method differential abundance testing, allows apply various methods, including packages, multiple taxa across multiple taxonomic ranks aggregation, using taxatree_models() function. want apply statistical tests many taxa single rank, use tax_model() function. microViz offers somewhat novel general approach visualising results (effect estimates significance) many tests across multiple ranks, “Taxonomic Association Trees”, heatmap-style visualisation results arranged tree structure, following hierarchy taxonomic rank relationships taxonomy table: taxatree_plots().","code":""},{"path":"https://david-barnett.github.io/microViz/articles/shao19-analyses.html","id":"taxonomic-association-tree-plots","dir":"Articles","previous_headings":"Statistical testing > Differential abundance testing","what":"Taxonomic association tree plots","title":"Example analyses: Shao 2019 data","text":"Starting simple approach borrowed MaAsLin2, let’s perform simple linear regression using log2-transformed relative abundances (dependent variable). test differences average relative abundance taxon infants born C-section vaginally delivered infants. models stored nested list. list ranks containing lists taxa. stats extracted model (help broom::tidy()) stored tibble (data frame). Let’s make labelled tree plot:  Check statistical modelling article many tree examples, including covariate-adjusted regression.","code":"# First transform and filter the taxa, ready for statistical modelling #  shao4d_prev10 <- shao4d %>%   # prepend the 1st letter of the rank to each tax_table entry, to ensure all are unique   tax_prepend_ranks() %>%   tax_transform(trans = \"compositional\", rank = \"genus\") %>%    # for various statistical, biological, and practical reasons, let's strictly filter taxa   tax_filter(min_prevalence = 0.1, use_counts = TRUE) #> Proportional min_prevalence given: 0.1 --> min 31/306 samples.  shao4d_prev10 #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 18 taxa and 306 samples ] #> sample_data() Sample Data:       [ 306 samples by 13 sample variables ] #> tax_table()   Taxonomy Table:    [ 18 taxa by 5 taxonomic ranks ] #>  #> otu_get(counts = TRUE)        [ 18 taxa and 306 samples ] #>  #> psExtra info: #> tax_agg = \"genus\" tax_trans = \"compositional\" shao4d_treeStats <- shao4d_prev10 %>%   # run all the statistical models   taxatree_models(     ranks = c(\"phylum\", \"class\", \"order\", \"family\", \"genus\"),     trans = \"log2\", trans_args = list(add = \"halfmin\"),     variables = \"Csection\", type = lm # modelling function   ) %>%   # extract stats from the models   taxatree_models2stats(.keep_models = TRUE) %>%   # adjust the p values for multiple testing, within each rank   taxatree_stats_p_adjust(method = \"fdr\", grouping = \"rank\") #> 2025-04-14 11:49:14.683869 - modelling at rank: phylum #> 2025-04-14 11:49:14.831641 - modelling at rank: class #> 2025-04-14 11:49:15.034188 - modelling at rank: order #> 2025-04-14 11:49:15.311254 - modelling at rank: family #> 2025-04-14 11:49:15.636246 - modelling at rank: genus shao4d_treeStats #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 18 taxa and 306 samples ] #> sample_data() Sample Data:       [ 306 samples by 13 sample variables ] #> tax_table()   Taxonomy Table:    [ 18 taxa by 5 taxonomic ranks ] #>  #> otu_get(counts = TRUE)        [ 18 taxa and 306 samples ] #>  #> psExtra info: #> tax_agg = \"genus\" tax_trans = \"compositional\"  #>  #> taxatree_models list: #> Ranks: phylum/class/order/family/genus #> taxatree_stats dataframe: #> 57 taxa at 5 ranks: phylum, class, order, family, genus  #> 1 terms: Csection taxatree_models_get(shao4d_treeStats)$genus$`g: Phocaeicola` #>  #> Call: #> `g: Phocaeicola` ~ Csection #>  #> Coefficients: #> (Intercept)     Csection   #>     -12.400       -7.057 taxatree_stats_get(shao4d_treeStats) #> # A tibble: 57 × 9 #> # Groups:   rank [5] #>    term     taxon            rank  formula estimate std.error statistic  p.value #>    <fct>    <chr>            <fct> <chr>      <dbl>     <dbl>     <dbl>    <dbl> #>  1 Csection p: Proteobacter… phyl… `p: Pr…    -2.58     0.767     -3.36 8.68e- 4 #>  2 Csection p: Bacteroidetes phyl… `p: Ba…    -8.73     0.698    -12.5  3.13e-29 #>  3 Csection p: Actinobacter… phyl… `p: Ac…    -4.67     0.679     -6.88 3.38e-11 #>  4 Csection p: Firmicutes    phyl… `p: Fi…     2.73     0.327      8.36 2.22e-15 #>  5 Csection c: Gammaproteob… class `c: Ga…    -2.67     0.768     -3.48 5.72e- 4 #>  6 Csection c: Bacteroidia   class `c: Ba…    -8.73     0.698    -12.5  3.13e-29 #>  7 Csection c: Actinomycetia class `c: Ac…    -4.47     0.684     -6.53 2.68e-10 #>  8 Csection c: Bacilli       class `c: Ba…     2.56     0.338      7.56 4.93e-13 #>  9 Csection c: Coriobacteri… class `c: Co…    -2.52     0.451     -5.59 5.12e- 8 #> 10 Csection c: Clostridia    class `c: Cl…     1.58     0.599      2.64 8.64e- 3 #> # ℹ 47 more rows #> # ℹ 1 more variable: p.adj.fdr.rank <dbl> treePlotsSimple <- shao4d_treeStats %>%   # specify which taxa will get labeled (adds a \"label\" variable to the stats tibble)   taxatree_label(p.adj.fdr.rank < 0.01, rank %in% c(\"phylum\", \"genus\")) %>%   # make the plots (1 per predictor variable, so a list of 1 in this example)   taxatree_plots(     sig_stat = \"p.adj.fdr.rank\", sig_threshold = 0.01,     drop_ranks = FALSE # drop_ranks = TRUE has a bug in version 0.10.4 :(   )  treePlotsSimple %>% str(max.level = 1) # just a list with a single ggplot inside #> List of 1 #>  $ Csection:List of 11 #>   ..- attr(*, \"class\")= chr [1:3] \"ggraph\" \"gg\" \"ggplot\" treePlotsSimple$Csection %>%   # add labels to the plot, only for the taxa indicated earlier   taxatree_plot_labels(     taxon_renamer = function(x) gsub(x = x, pattern = \"[pg]: \", replacement = \"\")   ) +   coord_fixed(expand = TRUE, clip = \"off\") + # allow scale expansion   scale_x_continuous(expand = expansion(mult = 0.2)) # make space for labels"},{"path":"https://david-barnett.github.io/microViz/articles/shao19-analyses.html","id":"longitudinal-data","dir":"Articles","previous_headings":"","what":"Longitudinal data?","title":"Example analyses: Shao 2019 data","text":"microViz doesn’t yet contain much functionality designed longitudinal data (specifically, multiple timepoints microbiome data individual/site/experimental run/etc.), already ways can use microViz help visualise repeated samples. Let us create dataset containing 10 infants numerous samples across multiple ages. Try ord_explore() dataset (dataset repeated samples arranged time order). can try: colour samples subject_id, map size points infant_age, try selecting “paths” infants “add” menu, follow infants trajectories time. Use “Code” button get example code, ’ll able recreate something fun like .  learn sort samples time, manual order, example , check section sorting samples time composition barplots article.","code":"# some dplyr wrangling to get the names of the infants we want! repeatedInfants <- shao19 %>%   samdat_tbl() %>%   dplyr::filter(family_role == \"child\") %>%   dplyr::group_by(subject_id) %>%   dplyr::summarise(nSamples = dplyr::n()) %>%   dplyr::arrange(desc(nSamples)) %>%   dplyr::pull(subject_id) %>%   head(10)  shaoRepeated <- shao19 %>%   ps_filter(subject_id %in% repeatedInfants) %>%   ps_arrange(subject_id, infant_age) %>% # put the samples in age order, per infant   ps_mutate(age_factor = factor(infant_age)) # useful for plotting  samdat_tbl(shaoRepeated) #> # A tibble: 48 × 15 #>    .sample_name  subject_id family_id sex    family_role   age infant_age #>    <chr>         <chr>      <chr>     <chr>  <chr>       <int>      <int> #>  1 A00502_ba_4   A00502_ba  27        female child           0          4 #>  2 A00502_ba_7   A00502_ba  27        female child           0          7 #>  3 A00502_ba_21  A00502_ba  27        female child           0         21 #>  4 A00502_ba_226 A00502_ba  27        female child           0        226 #>  5 A01166_ba_4   A01166_ba  47        female child           0          4 #>  6 A01166_ba_7   A01166_ba  47        female child           0          7 #>  7 A01166_ba_21  A01166_ba  47        female child           0         21 #>  8 A01166_ba_420 A01166_ba  47        female child           0        420 #>  9 A01173_ba_4   A01173_ba  48        female child           0          4 #> 10 A01173_ba_7   A01173_ba  48        female child           0          7 #> # ℹ 38 more rows #> # ℹ 8 more variables: birth_weight <dbl>, birth_mode <chr>, #> #   c_section_type <chr>, antibiotics_current_use <chr>, number_reads <int>, #> #   Csection <dbl>, birth_mode3 <chr>, age_factor <fct> ord_explore(shaoRepeated) shaoRepeated %>%   tax_transform(rank = \"genus\", trans = \"identity\") %>%   dist_calc(dist = \"bray\") %>%   ord_calc(method = \"auto\") %>%   ord_plot(colour = \"subject_id\", alpha = 0.5, size = \"infant_age\") %>%   add_paths(     id_var = \"subject_id\",     id_values = c(\"A01166_ba\", \"SID523133_ba\", \"A01173_ba\", \"SID512120_ba\", \"SID519128_ba\"),     mapping = aes(colour = subject_id)   ) +   scale_color_viridis_d(option = \"turbo\")"},{"path":"https://david-barnett.github.io/microViz/articles/shao19-analyses.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Example analyses: Shao 2019 data","text":"","code":"devtools::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.5.0 (2025-04-11) #>  os       Ubuntu 24.04.2 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  C.UTF-8 #>  ctype    C.UTF-8 #>  tz       UTC #>  date     2025-04-14 #>  pandoc   3.1.11 @ /opt/hostedtoolcache/pandoc/3.1.11/x64/ (via rmarkdown) #>  quarto   NA #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package          * version date (UTC) lib source #>  ade4               1.7-23  2025-02-14 [1] RSPM #>  ape                5.8-1   2024-12-16 [1] RSPM #>  backports          1.5.0   2024-05-23 [1] RSPM #>  Biobase            2.67.0  2024-10-29 [1] Bioconduc~ #>  BiocGenerics       0.53.6  2025-01-27 [1] Bioconduc~ #>  biomformat         1.35.0  2024-10-29 [1] Bioconduc~ #>  Biostrings         2.75.4  2025-02-21 [1] Bioconduc~ #>  broom              1.0.8   2025-03-28 [1] RSPM #>  bslib              0.9.0   2025-01-30 [1] RSPM #>  ca                 0.71.1  2020-01-24 [1] RSPM #>  cachem             1.1.0   2024-05-16 [1] RSPM #>  circlize           0.4.16  2024-02-20 [1] RSPM #>  cli                3.6.4   2025-02-13 [1] RSPM #>  clue               0.3-66  2024-11-13 [1] RSPM #>  cluster            2.1.8.1 2025-03-12 [3] CRAN (R 4.5.0) #>  codetools          0.2-20  2024-03-31 [3] CRAN (R 4.5.0) #>  colorspace         2.1-1   2024-07-26 [1] RSPM #>  commonmark         1.9.5   2025-03-17 [1] RSPM #>  ComplexHeatmap     2.23.1  2025-04-01 [1] Bioconduc~ #>  corncob            0.4.2   2025-03-29 [1] RSPM #>  crayon             1.5.3   2024-06-20 [1] RSPM #>  data.table         1.17.0  2025-02-22 [1] RSPM #>  desc               1.4.3   2023-12-10 [1] RSPM #>  devtools           2.4.5   2022-10-11 [1] RSPM #>  digest             0.6.37  2024-08-19 [1] RSPM #>  doParallel         1.0.17  2022-02-07 [1] RSPM #>  dplyr              1.1.4   2023-11-17 [1] RSPM #>  ellipsis           0.3.2   2021-04-29 [1] RSPM #>  evaluate           1.0.3   2025-01-10 [1] RSPM #>  farver             2.1.2   2024-05-13 [1] RSPM #>  fastmap            1.2.0   2024-05-15 [1] RSPM #>  foreach            1.5.2   2022-02-02 [1] RSPM #>  fs                 1.6.5   2024-10-30 [1] RSPM #>  generics           0.1.3   2022-07-05 [1] RSPM #>  GenomeInfoDb       1.43.4  2025-01-24 [1] Bioconduc~ #>  GenomeInfoDbData   1.2.14  2025-04-14 [1] Bioconductor #>  GetoptLong         1.0.5   2020-12-15 [1] RSPM #>  ggforce            0.4.2   2024-02-19 [1] RSPM #>  ggplot2          * 3.5.2   2025-04-09 [1] RSPM #>  ggraph             2.2.1   2024-03-07 [1] RSPM #>  ggrepel            0.9.6   2024-09-07 [1] RSPM #>  ggtext             0.1.2   2022-09-16 [1] RSPM #>  GlobalOptions      0.1.2   2020-06-10 [1] RSPM #>  glue               1.8.0   2024-09-30 [1] RSPM #>  graphlayouts       1.2.2   2025-01-23 [1] RSPM #>  gridExtra          2.3     2017-09-09 [1] RSPM #>  gridtext           0.1.5   2022-09-16 [1] RSPM #>  gtable             0.3.6   2024-10-25 [1] RSPM #>  htmltools          0.5.8.1 2024-04-04 [1] RSPM #>  htmlwidgets        1.6.4   2023-12-06 [1] RSPM #>  httpuv             1.6.15  2024-03-26 [1] RSPM #>  httr               1.4.7   2023-08-15 [1] RSPM #>  igraph             2.1.4   2025-01-23 [1] RSPM #>  IRanges            2.41.3  2025-02-12 [1] Bioconduc~ #>  iterators          1.0.14  2022-02-05 [1] RSPM #>  jquerylib          0.1.4   2021-04-26 [1] RSPM #>  jsonlite           2.0.0   2025-03-27 [1] RSPM #>  knitr              1.50    2025-03-16 [1] RSPM #>  labeling           0.4.3   2023-08-29 [1] RSPM #>  later              1.4.2   2025-04-08 [1] RSPM #>  lattice            0.22-6  2024-03-20 [3] CRAN (R 4.5.0) #>  lifecycle          1.0.4   2023-11-07 [1] RSPM #>  litedown           0.7     2025-04-08 [1] RSPM #>  magrittr           2.0.3   2022-03-30 [1] RSPM #>  markdown           2.0     2025-03-23 [1] RSPM #>  MASS               7.3-65  2025-02-28 [3] CRAN (R 4.5.0) #>  Matrix             1.7-3   2025-03-11 [3] CRAN (R 4.5.0) #>  matrixStats        1.5.0   2025-01-07 [1] RSPM #>  memoise            2.0.1   2021-11-26 [1] RSPM #>  mgcv               1.9-1   2023-12-21 [3] CRAN (R 4.5.0) #>  microbiome         1.29.0  2025-01-23 [1] Bioconduc~ #>  microViz         * 0.12.7  2025-04-14 [1] local #>  mime               0.13    2025-03-17 [1] RSPM #>  miniUI             0.1.1.1 2018-05-18 [1] RSPM #>  multtest           2.63.0  2024-10-29 [1] Bioconduc~ #>  munsell            0.5.1   2024-04-01 [1] RSPM #>  nlme               3.1-168 2025-03-31 [3] CRAN (R 4.5.0) #>  patchwork        * 1.3.0   2024-09-16 [1] RSPM #>  permute            0.9-7   2022-01-27 [1] RSPM #>  phyloseq         * 1.51.0  2025-01-23 [1] Bioconduc~ #>  pillar             1.10.2  2025-04-05 [1] RSPM #>  pkgbuild           1.4.7   2025-03-24 [1] RSPM #>  pkgconfig          2.0.3   2019-09-22 [1] RSPM #>  pkgdown            2.1.1   2024-09-17 [1] RSPM #>  pkgload            1.4.0   2024-06-28 [1] RSPM #>  plyr               1.8.9   2023-10-02 [1] RSPM #>  png                0.1-8   2022-11-29 [1] RSPM #>  polyclip           1.10-7  2024-07-23 [1] RSPM #>  profvis            0.4.0   2024-09-20 [1] RSPM #>  promises           1.3.2   2024-11-28 [1] RSPM #>  purrr              1.0.4   2025-02-05 [1] RSPM #>  R6                 2.6.1   2025-02-15 [1] RSPM #>  ragg               1.4.0   2025-04-10 [1] RSPM #>  RColorBrewer       1.1-3   2022-04-03 [1] RSPM #>  Rcpp               1.0.14  2025-01-12 [1] RSPM #>  registry           0.5-1   2019-03-05 [1] RSPM #>  remotes            2.5.0   2024-03-17 [1] RSPM #>  reshape2           1.4.4   2020-04-09 [1] RSPM #>  rhdf5              2.51.2  2025-01-08 [1] Bioconduc~ #>  rhdf5filters       1.19.2  2025-03-05 [1] Bioconduc~ #>  Rhdf5lib           1.29.2  2025-03-24 [1] Bioconduc~ #>  rjson              0.2.23  2024-09-16 [1] RSPM #>  rlang              1.1.5   2025-01-17 [1] RSPM #>  rmarkdown          2.29    2024-11-04 [1] RSPM #>  Rtsne              0.17    2023-12-07 [1] RSPM #>  S4Vectors          0.45.4  2025-02-11 [1] Bioconduc~ #>  sass               0.4.9   2024-03-15 [1] RSPM #>  scales             1.3.0   2023-11-28 [1] RSPM #>  seriation          1.5.7   2024-12-05 [1] RSPM #>  sessioninfo        1.2.3   2025-02-05 [1] RSPM #>  shape              1.4.6.1 2024-02-23 [1] RSPM #>  shiny              1.10.0  2024-12-14 [1] RSPM #>  stringi            1.8.7   2025-03-27 [1] RSPM #>  stringr            1.5.1   2023-11-14 [1] RSPM #>  survival           3.8-3   2024-12-17 [3] CRAN (R 4.5.0) #>  systemfonts        1.2.2   2025-04-04 [1] RSPM #>  textshaping        1.0.0   2025-01-20 [1] RSPM #>  tibble             3.2.1   2023-03-20 [1] RSPM #>  tidygraph          1.3.1   2024-01-30 [1] RSPM #>  tidyr              1.3.1   2024-01-24 [1] RSPM #>  tidyselect         1.2.1   2024-03-11 [1] RSPM #>  TSP                1.2-4   2023-04-04 [1] RSPM #>  tweenr             2.0.3   2024-02-26 [1] RSPM #>  UCSC.utils         1.3.1   2025-01-15 [1] Bioconduc~ #>  urlchecker         1.0.1   2021-11-30 [1] RSPM #>  usethis            3.1.0   2024-11-26 [1] RSPM #>  utf8               1.2.4   2023-10-22 [1] RSPM #>  vctrs              0.6.5   2023-12-01 [1] RSPM #>  vegan              2.6-10  2025-01-29 [1] RSPM #>  viridis            0.6.5   2024-01-29 [1] RSPM #>  viridisLite        0.4.2   2023-05-02 [1] RSPM #>  withr              3.0.2   2024-10-28 [1] RSPM #>  xfun               0.52    2025-04-02 [1] RSPM #>  xml2               1.3.8   2025-03-14 [1] RSPM #>  xtable             1.8-4   2019-04-21 [1] RSPM #>  XVector            0.47.2  2025-01-08 [1] Bioconduc~ #>  yaml               2.3.10  2024-07-26 [1] RSPM #>  #>  [1] /home/runner/work/_temp/Library #>  [2] /opt/R/4.5.0/lib/R/site-library #>  [3] /opt/R/4.5.0/lib/R/library #>  * ── Packages attached to the search path. #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/atlas1006.html","id":"load-necessary-packages","dir":"Articles > Web-only","previous_headings":"","what":"Load necessary packages","title":"Example analyses with atlas1006 data","text":"","code":"library(dplyr) library(ggplot2) library(patchwork) library(phyloseq) library(microbiome) library(microViz)"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/atlas1006.html","id":"get-example-data","dir":"Articles > Web-only","previous_headings":"","what":"Get example data","title":"Example analyses with atlas1006 data","text":"","code":"# get some example data data(\"atlas1006\", package = \"microbiome\")  # create a couple of numerical variables (often more useful than character strings) ps <- atlas1006 %>%   ps_mutate(     weight = recode(       .x = bmi_group, morbidobese = 5, severeobese = 4,       obese = 3, overweight = 2, lean = 1, underweight = 0     ),     lean = if_else(weight < 2, true = 1, false = 0, missing = 0),     female = if_else(sex == \"female\", true = 1, false = 0),     extract_P = if_else(DNA_extraction_method == \"p\", true = 1, false = 0)   ) %>%   # only look at the baseline time point if multiple samples available   # and drop samples with no DNA extraction method info   ps_filter(time == 0, !is.na(DNA_extraction_method)) %>%   # remove the sample data variables about time   ps_select(-time)  # add a couple of missing values to show how microViz handles missing data sample_data(ps)$female[c(3, 4)] <- NA  # look at phyloseq object description ps #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 125 taxa and 801 samples ] #> sample_data() Sample Data:       [ 801 samples by 13 sample variables ] #> tax_table()   Taxonomy Table:    [ 125 taxa by 3 taxonomic ranks ] # this example data has a slightly odd tax_table because it comes from HITChip data (instead of sequencing) # the taxonomic assignment is done differently, so we need to ensure taxon names are not repeated across columns # it can otherwise be used the same as sequencing data for this example tax_table(ps) %>% head(3) #> Taxonomy Table:     [3 taxa by 3 taxonomic ranks]: #>                  Phylum            Family            Genus              #> Actinomycetaceae \"Actinobacteria\"  \"Actinobacteria\"  \"Actinomycetaceae\" #> Aerococcus       \"Firmicutes\"      \"Bacilli\"         \"Aerococcus\"       #> Akkermansia      \"Verrucomicrobia\" \"Verrucomicrobia\" \"Akkermansia\" ps <- ps %>% tax_prepend_ranks() tax_table(ps) %>% head(3) #> Taxonomy Table:     [3 taxa by 3 taxonomic ranks]: #>                  Phylum               Family               Genus                 #> Actinomycetaceae \"P: Actinobacteria\"  \"F: Actinobacteria\"  \"G: Actinomycetaceae\" #> Aerococcus       \"P: Firmicutes\"      \"F: Bacilli\"         \"G: Aerococcus\"       #> Akkermansia      \"P: Verrucomicrobia\" \"F: Verrucomicrobia\" \"G: Akkermansia\" # replace any uninformative tax_table values ps <- ps %>% tax_fix()  # look at the effect of removing rare Genera, e.g. how many Genera are present in at least 5% of samples? ps %>% tax_filter(min_prevalence = 5 / 100, tax_level = \"Genus\") #> Proportional min_prevalence given: 0.05 --> min 41/801 samples. #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 117 taxa and 801 samples ] #> sample_data() Sample Data:       [ 801 samples by 13 sample variables ] #> tax_table()   Taxonomy Table:    [ 117 taxa by 3 taxonomic ranks ] # we will use this udring other analyses, but not overwrite the original phyloseq object as the # unfiltered set of taxa would be required if we were performing e.g. alpha diversity analyses"},{"path":[]},{"path":"https://david-barnett.github.io/microViz/articles/web-only/atlas1006.html","id":"ordination-plots","dir":"Articles > Web-only","previous_headings":"Exploring your data","what":"Ordination plots","title":"Example analyses with atlas1006 data","text":"Ordination methods can help visualize variation overall microbial ecosystem composition, look whether might differ markedly groups, e.g. weight. one option try first: Filter rare taxa (e.g. remove Genera present least 5% samples) - use tax_filter() Aggregate taxa bacterial families (example) - use tax_agg() Transform microbial data centered-log-ratio transformation - use tax_transform() Perform PCA CLR-transformed features (equivalent Aitchison distance PCoA) - use ord_calc() Plot first 2 axes PCA ordination, colouring samples group adding taxon loading arrows visualise taxa generally differ across samples - use ord_plot() Customise theme ggplot like /add features like ellipses annotations","code":"clr_pca <- ps %>%   tax_filter(min_prevalence = 5 / 100, tax_level = \"Genus\") %>%   tax_agg(\"Genus\") %>% # aggregate taxa at Genus level   tax_transform(\"clr\") %>% # centered log ratio transformation   ord_calc(method = \"PCA\") # Note: PCA is RDA without constraints (& ord_calc uses an RDA method to perform PCA) #> Proportional min_prevalence given: 0.05 --> min 41/801 samples. clr_pca #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 117 taxa and 801 samples ] #> sample_data() Sample Data:       [ 801 samples by 13 sample variables ] #> tax_table()   Taxonomy Table:    [ 117 taxa by 3 taxonomic ranks ] #>  #> otu_get(counts = TRUE)        [ 117 taxa and 801 samples ] #>  #> psExtra info: #> tax_agg = \"Genus\" tax_trans = \"clr\"  #>  #> ordination of class: rda cca  #> rda(formula = OTU ~ 1, data = data) #> Ordination info: #> method = 'PCA' clr_pca %>%   ord_plot(colour = \"weight\", shape = \"DNA_extraction_method\", alpha = 0.7, size = 1.5) +   scale_colour_viridis_c(option = \"inferno\", direction = -1, end = 0.8) +   scale_shape_manual(     values = c(o = \"square open\", r = \"triangle open\", p = \"circle\"),     name = \"DNA\\nextraction\\nmethod\"   )"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/atlas1006.html","id":"taxonomic-compositions","dir":"Articles > Web-only","previous_headings":"Exploring your data","what":"Taxonomic compositions?","title":"Example analyses with atlas1006 data","text":"Using PCA ordination allows us reliably draw biplots, showing taxa associated major variation sample microbiota composition represented axes PC1 PC2.  actual compositions 800 samples?  can arrange plots together patchwork package.","code":"pca <- clr_pca %>%   ord_plot(     colour = \"weight\", shape = \"DNA_extraction_method\", alpha = 0.7, size = 1,     plot_taxa = 12:1, tax_vec_length = 0.3,     taxon_renamer = function(x) stringr::str_remove_all(x, \"^G: | [ae]t rel.\"),     center = TRUE,     tax_lab_style = tax_lab_style(       type = \"label\", max_angle = 90, fontface = \"bold\",       alpha = 0.8, size = 2     )   ) +   scale_colour_viridis_c(option = \"inferno\", direction = -1, end = 0.8) +   scale_shape_manual(     values = c(o = \"square open\", r = \"triangle open\", p = \"circle\"),     name = \"DNA\\nextraction\\nmethod\"   ) +   # essential for correct label angles   coord_fixed(clip = \"off\", xlim = c(-1.5, 1.5), ylim = c(-1.5, 1.5)) pca iris <- clr_pca %>%   ord_plot_iris(     tax_level = \"Genus\", n_taxa = 15,     anno_binary = \"extract_P\",     anno_binary_style = list(y = 1.1, size = 0.5, alpha = 0.3, shape = 1),     taxon_renamer = function(x) stringr::str_remove_all(x, \"^G: | [ae]t rel.\")   )  iris pca / iris"},{"path":[]},{"path":"https://david-barnett.github.io/microViz/articles/web-only/atlas1006.html","id":"permanova","dir":"Articles > Web-only","previous_headings":"Testing hypotheses","what":"PERMANOVA","title":"Example analyses with atlas1006 data","text":"variables overall microbial community variation associated ?","code":"ps %>%   tax_filter(min_prevalence = 5 / 100, tax_level = \"Genus\") %>%   tax_agg(\"Genus\") %>%   dist_calc(\"aitchison\") %>%   dist_permanova(     variables = c(\"DNA_extraction_method\", \"weight\", \"female\"),     n_perms = 99, # this is a low number of permutations for speed, you should set more e.g. 9999     seed = 12345, complete_cases = TRUE, verbose = \"max\"   ) #> Proportional min_prevalence given: 0.05 --> min 41/801 samples. #> Dropping samples with missings: 17 #> weight has NAs: 15 #> female has NAs: 2 #> 2025-04-14 11:44:39.368895 - Starting PERMANOVA with 99 perms with 1 processes #> 2025-04-14 11:44:42.318727 - Finished PERMANOVA #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 117 taxa and 784 samples ] #> sample_data() Sample Data:       [ 784 samples by 13 sample variables ] #> tax_table()   Taxonomy Table:    [ 117 taxa by 3 taxonomic ranks ] #>  #> psExtra info: #> tax_agg = \"Genus\"  #>  #> aitchison distance matrix of size 784  #> 10.80016 12.87657 14.29766 13.91425 11.64419 ... #>  #> permanova: #> Permutation test for adonis under reduced model #> Marginal effects of terms #> Permutation: free #> Number of permutations: 99 #>  #> vegan::adonis2(formula = formula, data = metadata, permutations = n_perms, by = by, parallel = parall) #>                        Df SumOfSqs      R2       F Pr(>F)    #> DNA_extraction_method   2     8847 0.12742 58.3201   0.01 ** #> weight                  1      259 0.00372  3.4087   0.01 ** #> female                  1      317 0.00456  4.1742   0.01 ** #> Residual              779    59084 0.85098                   #> Total                 783    69431 1.00000                   #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/atlas1006.html","id":"visualising-significant-predictors","dir":"Articles > Web-only","previous_headings":"Testing hypotheses","what":"Visualising significant predictors?","title":"Example analyses with atlas1006 data","text":"(Partial) Constrained ordination can useful show microbial variation explained predictors significant PERMANOVA analyses.  DNA extraction method dominates plot , try “partialing ” variation explained DNA extraction method, prior constraining factors interest.","code":"# constraints need to be on the same or similar scales for comparability # so make binary variables and scale the weight variable ps <- ps %>%   ps_mutate(     wt_scaled = c(scale(weight, center = TRUE, scale = TRUE)),     P = if_else(DNA_extraction_method == \"p\", 1, 0),     R = if_else(DNA_extraction_method == \"r\", 1, 0),     O = if_else(DNA_extraction_method == \"o\", 1, 0)   ) constr_ord <- ps %>%   tax_filter(min_prevalence = 5 / 100, tax_level = \"Genus\") %>%   tax_agg(\"Genus\") %>%   tax_transform(\"clr\") %>%   ord_calc(     method = \"RDA\", constraints = c(\"female\", \"wt_scaled\", \"P\", \"R\", \"O\")   ) #> Proportional min_prevalence given: 0.05 --> min 41/801 samples. #> Dropping samples with missings: 17 #>  #> Centering (mean) and scaling (sd) the constraints and/or conditions: #>  female #>  wt_scaled #>  P #>  R #>  O #>  #> Some constraints or conditions were aliased because they were redundant. This can happen if terms #> are linearly dependent (collinear): 'O' constr_ord #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 117 taxa and 784 samples ] #> sample_data() Sample Data:       [ 784 samples by 17 sample variables ] #> tax_table()   Taxonomy Table:    [ 117 taxa by 3 taxonomic ranks ] #>  #> otu_get(counts = TRUE)        [ 117 taxa and 801 samples ] #>  #> psExtra info: #> tax_agg = \"Genus\" tax_trans = \"clr\"  #>  #> ordination of class: rda cca  #> rda(formula = OTU ~ female + wt_scaled + P + R + O, data = data) #> Ordination info: #> method = 'RDA'   constraints = 'female+wt_scaled+P+R+O' ord_plot(constr_ord, plot_taxa = 10:1, colour = \"DNA_extraction_method\", shape = 1) +   scale_color_brewer(palette = \"Set2\", name = \"DNA\\nextraction\\nmethod\") ps %>%   tax_filter(min_prevalence = 5 / 100, tax_level = \"Genus\") %>%   tax_agg(\"Genus\") %>%   tax_transform(\"clr\") %>%   ord_calc(     method = \"RDA\", conditions = c(\"P\", \"R\", \"O\"),     constraints = c(\"female\", \"wt_scaled\")   ) %>%   ord_plot(plot_taxa = 10:1, colour = \"DNA_extraction_method\", shape = 1) +   scale_color_brewer(palette = \"Set2\", name = \"DNA\\nextraction\\nmethod\") #> Proportional min_prevalence given: 0.05 --> min 41/801 samples. #> Dropping samples with missings: 17 #>  #> Centering (mean) and scaling (sd) the constraints and/or conditions: #>  female #>  wt_scaled #>  P #>  R #>  O #>  #> Some constraints or conditions were aliased because they were redundant. This can happen if terms #> are linearly dependent (collinear): 'O'"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/atlas1006.html","id":"taxon-models","dir":"Articles > Web-only","previous_headings":"Testing hypotheses","what":"Taxon models","title":"Example analyses with atlas1006 data","text":"effects factors individual taxa? Let’s use beta binomial regression models find . skip fitting models genera , speed generating example. include ranks (default) best use taxatree_plots. See taxon modelling article comprehensive look taxatree_* family functions. Visualize results compactly microViz taxonomic association tree.","code":"library(corncob) tt_models <- ps %>%   tax_filter(min_prevalence = 5 / 100, tax_level = \"Genus\") %>%   taxatree_models(     ranks = c(\"Phylum\", \"Family\"),     variables = c(\"female\", \"wt_scaled\", \"P\", \"R\"),     type = \"bbdml\", verbose = \"max\"   ) #> Proportional min_prevalence given: 0.05 --> min 41/801 samples. #> 2025-04-14 11:44:45.571443 - modelling at rank: Phylum #> Warning in do.call(fun, list(txt)): 2 / 801 values are NA in female #> Warning in do.call(fun, list(txt)): 15 / 801 values are NA in wt_scaled #> 2025-04-14 11:44:48.480335 - modelling at rank: Family #> Warning in do.call(fun, list(txt)): 2 / 801 values are NA in female #> Warning in do.call(fun, list(txt)): 15 / 801 values are NA in wt_scaled tt_stats <- taxatree_models2stats(tt_models, param = \"mu\") tt_stats %>%   taxatree_plotkey(     node_size_range = c(2, 8), size_stat = list(mean = mean),     rank == \"Phylum\",     taxon_renamer = function(x) stringr::str_remove_all(x, \"^.: | [ae]t rel.\")   ) tt_stats %>%   taxatree_plots(     node_size_range = c(1, 5), size_stat = list(mean = mean)   ) %>%   .[c(\"P\", \"R\", \"female\", \"wt_scaled\")] %>%   wrap_plots(., ncol = 2, guides = \"collect\")"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/atlas1006.html","id":"example-interpretation-illustrative-only","dir":"Articles > Web-only","previous_headings":"Testing hypotheses > Taxon models","what":"Example interpretation (illustrative only):","title":"Example analyses with atlas1006 data","text":"DNA extraction methods P R associated significantly higher levels Actinobacteria lower Bacteroides, relative reference extraction method O. associations weight various taxa, strong associations extraction method.","code":""},{"path":"https://david-barnett.github.io/microViz/articles/web-only/atlas1006.html","id":"disclaimer","dir":"Articles > Web-only","previous_headings":"","what":"Disclaimer","title":"Example analyses with atlas1006 data","text":"document intended example kind analyses visualization can microViz. analysis atlas1006 data intended considered theoretically sound biologically interpretable.","code":""},{"path":"https://david-barnett.github.io/microViz/articles/web-only/atlas1006.html","id":"session-info","dir":"Articles > Web-only","previous_headings":"","what":"Session info","title":"Example analyses with atlas1006 data","text":"","code":"devtools::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.5.0 (2025-04-11) #>  os       Ubuntu 24.04.2 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  C.UTF-8 #>  ctype    C.UTF-8 #>  tz       UTC #>  date     2025-04-14 #>  pandoc   3.1.11 @ /opt/hostedtoolcache/pandoc/3.1.11/x64/ (via rmarkdown) #>  quarto   NA #>  #> ─ Packages ─────────────────────────────────────────────────────────────────────────────────────── #>  package            * version       date (UTC) lib source #>  ade4                 1.7-23        2025-02-14 [1] RSPM #>  ape                  5.8-1         2024-12-16 [1] RSPM #>  backports            1.5.0         2024-05-23 [1] RSPM #>  Biobase              2.67.0        2024-10-29 [1] Bioconduc~ #>  BiocGenerics         0.53.6        2025-01-27 [1] Bioconduc~ #>  biomformat           1.35.0        2024-10-29 [1] Bioconduc~ #>  Biostrings           2.75.4        2025-02-21 [1] Bioconduc~ #>  broom                1.0.8         2025-03-28 [1] RSPM #>  bslib                0.9.0         2025-01-30 [1] RSPM #>  cachem               1.1.0         2024-05-16 [1] RSPM #>  checkmate            2.3.2         2024-07-29 [1] RSPM #>  cli                  3.6.4         2025-02-13 [1] RSPM #>  cluster              2.1.8.1       2025-03-12 [3] CRAN (R 4.5.0) #>  codetools            0.2-20        2024-03-31 [3] CRAN (R 4.5.0) #>  colorspace           2.1-1         2024-07-26 [1] RSPM #>  commonmark           1.9.5         2025-03-17 [1] RSPM #>  corncob            * 0.4.2         2025-03-29 [1] RSPM #>  crayon               1.5.3         2024-06-20 [1] RSPM #>  data.table           1.17.0        2025-02-22 [1] RSPM #>  desc                 1.4.3         2023-12-10 [1] RSPM #>  detectseparation     0.3           2022-08-26 [1] RSPM #>  devtools             2.4.5         2022-10-11 [1] RSPM #>  digest               0.6.37        2024-08-19 [1] RSPM #>  dplyr              * 1.1.4         2023-11-17 [1] RSPM #>  ellipsis             0.3.2         2021-04-29 [1] RSPM #>  evaluate             1.0.3         2025-01-10 [1] RSPM #>  farver               2.1.2         2024-05-13 [1] RSPM #>  fastmap              1.2.0         2024-05-15 [1] RSPM #>  foreach              1.5.2         2022-02-02 [1] RSPM #>  fs                   1.6.5         2024-10-30 [1] RSPM #>  generics             0.1.3         2022-07-05 [1] RSPM #>  GenomeInfoDb         1.43.4        2025-01-24 [1] Bioconduc~ #>  GenomeInfoDbData     1.2.14        2025-04-14 [1] Bioconductor #>  ggforce              0.4.2         2024-02-19 [1] RSPM #>  ggplot2            * 3.5.2         2025-04-09 [1] RSPM #>  ggraph               2.2.1         2024-03-07 [1] RSPM #>  ggrepel              0.9.6         2024-09-07 [1] RSPM #>  ggtext               0.1.2         2022-09-16 [1] RSPM #>  glue                 1.8.0         2024-09-30 [1] RSPM #>  graphlayouts         1.2.2         2025-01-23 [1] RSPM #>  gridExtra            2.3           2017-09-09 [1] RSPM #>  gridtext             0.1.5         2022-09-16 [1] RSPM #>  gtable               0.3.6         2024-10-25 [1] RSPM #>  htmltools            0.5.8.1       2024-04-04 [1] RSPM #>  htmlwidgets          1.6.4         2023-12-06 [1] RSPM #>  httpuv               1.6.15        2024-03-26 [1] RSPM #>  httr                 1.4.7         2023-08-15 [1] RSPM #>  igraph               2.1.4         2025-01-23 [1] RSPM #>  IRanges              2.41.3        2025-02-12 [1] Bioconduc~ #>  iterators            1.0.14        2022-02-05 [1] RSPM #>  jquerylib            0.1.4         2021-04-26 [1] RSPM #>  jsonlite             2.0.0         2025-03-27 [1] RSPM #>  knitr                1.50          2025-03-16 [1] RSPM #>  labeling             0.4.3         2023-08-29 [1] RSPM #>  later                1.4.2         2025-04-08 [1] RSPM #>  lattice              0.22-6        2024-03-20 [3] CRAN (R 4.5.0) #>  lifecycle            1.0.4         2023-11-07 [1] RSPM #>  litedown             0.7           2025-04-08 [1] RSPM #>  lpSolveAPI           5.5.2.0-17.12 2024-07-19 [1] RSPM #>  magrittr             2.0.3         2022-03-30 [1] RSPM #>  markdown             2.0           2025-03-23 [1] RSPM #>  MASS                 7.3-65        2025-02-28 [3] CRAN (R 4.5.0) #>  Matrix               1.7-3         2025-03-11 [3] CRAN (R 4.5.0) #>  memoise              2.0.1         2021-11-26 [1] RSPM #>  mgcv                 1.9-1         2023-12-21 [3] CRAN (R 4.5.0) #>  microbiome         * 1.29.0        2025-01-23 [1] Bioconduc~ #>  microViz           * 0.12.7        2025-04-14 [1] local #>  mime                 0.13          2025-03-17 [1] RSPM #>  miniUI               0.1.1.1       2018-05-18 [1] RSPM #>  multtest             2.63.0        2024-10-29 [1] Bioconduc~ #>  munsell              0.5.1         2024-04-01 [1] RSPM #>  nlme                 3.1-168       2025-03-31 [3] CRAN (R 4.5.0) #>  numDeriv             2016.8-1.1    2019-06-06 [1] RSPM #>  patchwork          * 1.3.0         2024-09-16 [1] RSPM #>  permute              0.9-7         2022-01-27 [1] RSPM #>  phyloseq           * 1.51.0        2025-01-23 [1] Bioconduc~ #>  pillar               1.10.2        2025-04-05 [1] RSPM #>  pkgbuild             1.4.7         2025-03-24 [1] RSPM #>  pkgconfig            2.0.3         2019-09-22 [1] RSPM #>  pkgdown              2.1.1         2024-09-17 [1] RSPM #>  pkgload              1.4.0         2024-06-28 [1] RSPM #>  plyr                 1.8.9         2023-10-02 [1] RSPM #>  polyclip             1.10-7        2024-07-23 [1] RSPM #>  profvis              0.4.0         2024-09-20 [1] RSPM #>  promises             1.3.2         2024-11-28 [1] RSPM #>  purrr                1.0.4         2025-02-05 [1] RSPM #>  R6                   2.6.1         2025-02-15 [1] RSPM #>  ragg                 1.4.0         2025-04-10 [1] RSPM #>  RColorBrewer         1.1-3         2022-04-03 [1] RSPM #>  Rcpp                 1.0.14        2025-01-12 [1] RSPM #>  registry             0.5-1         2019-03-05 [1] RSPM #>  remotes              2.5.0         2024-03-17 [1] RSPM #>  reshape2             1.4.4         2020-04-09 [1] RSPM #>  rhdf5                2.51.2        2025-01-08 [1] Bioconduc~ #>  rhdf5filters         1.19.2        2025-03-05 [1] Bioconduc~ #>  Rhdf5lib             1.29.2        2025-03-24 [1] Bioconduc~ #>  rlang                1.1.5         2025-01-17 [1] RSPM #>  rmarkdown            2.29          2024-11-04 [1] RSPM #>  ROI                  1.0-1         2023-04-20 [1] RSPM #>  ROI.plugin.lpsolve   1.0-2         2023-07-07 [1] RSPM #>  Rtsne                0.17          2023-12-07 [1] RSPM #>  S4Vectors            0.45.4        2025-02-11 [1] Bioconduc~ #>  sass                 0.4.9         2024-03-15 [1] RSPM #>  scales               1.3.0         2023-11-28 [1] RSPM #>  sessioninfo          1.2.3         2025-02-05 [1] RSPM #>  shiny                1.10.0        2024-12-14 [1] RSPM #>  slam                 0.1-55        2024-11-13 [1] RSPM #>  stringi              1.8.7         2025-03-27 [1] RSPM #>  stringr              1.5.1         2023-11-14 [1] RSPM #>  survival             3.8-3         2024-12-17 [3] CRAN (R 4.5.0) #>  systemfonts          1.2.2         2025-04-04 [1] RSPM #>  textshaping          1.0.0         2025-01-20 [1] RSPM #>  tibble               3.2.1         2023-03-20 [1] RSPM #>  tidygraph            1.3.1         2024-01-30 [1] RSPM #>  tidyr                1.3.1         2024-01-24 [1] RSPM #>  tidyselect           1.2.1         2024-03-11 [1] RSPM #>  trust                0.1-8         2020-01-10 [1] RSPM #>  tweenr               2.0.3         2024-02-26 [1] RSPM #>  UCSC.utils           1.3.1         2025-01-15 [1] Bioconduc~ #>  urlchecker           1.0.1         2021-11-30 [1] RSPM #>  usethis              3.1.0         2024-11-26 [1] RSPM #>  vctrs                0.6.5         2023-12-01 [1] RSPM #>  vegan                2.6-10        2025-01-29 [1] RSPM #>  viridis              0.6.5         2024-01-29 [1] RSPM #>  viridisLite          0.4.2         2023-05-02 [1] RSPM #>  withr                3.0.2         2024-10-28 [1] RSPM #>  xfun                 0.52          2025-04-02 [1] RSPM #>  xml2                 1.3.8         2025-03-14 [1] RSPM #>  xtable               1.8-4         2019-04-21 [1] RSPM #>  XVector              0.47.2        2025-01-08 [1] Bioconduc~ #>  yaml                 2.3.10        2024-07-26 [1] RSPM #>  #>  [1] /home/runner/work/_temp/Library #>  [2] /opt/R/4.5.0/lib/R/site-library #>  [3] /opt/R/4.5.0/lib/R/library #>  * ── Packages attached to the search path. #>  #> ──────────────────────────────────────────────────────────────────────────────────────────────────"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/compositions.html","id":"quick-example-barplot","dir":"Articles > Web-only","previous_headings":"","what":"Quick example barplot","title":"Visualising compositions","text":"Visualize top Genera across female samples inflammatory bowel disease study dataset. order samples automatically set “bray”-curtis dissimilarity. default, top 8 taxa shown. taxa chosen total count abundance across plotted samples.","code":"pseq %>%   ps_filter(gender == \"female\") %>%   comp_barplot(tax_level = \"Genus\") +   coord_flip() # horizontal bars are often more readable #> Registered S3 method overwritten by 'seriation': #>   method         from  #>   reorder.hclust vegan"},{"path":[]},{"path":"https://david-barnett.github.io/microViz/articles/web-only/compositions.html","id":"comp_barplot-arguments","dir":"Articles > Web-only","previous_headings":"Customising the barplot","what":"comp_barplot arguments","title":"Visualising compositions","text":"output comp_barplot can customised several ways. See comment alongside argument explanation effect.  notes: Dissimilarity calculated using visibly distinct taxa, optimize sorting visual similarity. can change setting order_with_all_taxa = TRUE, always use taxa similarity sorting. colour palette important, allow (adjacent) taxa distinguished. palette microViz uses generated distinct_palette function, starts Paired Dark2 palettes ColorBrewer continues distinct colours generated http://medialab.github.io/iwanthue/ (colors, soft k-means).","code":"pseq %>%   ps_filter(gender == \"female\") %>%   comp_barplot(     tax_level = \"Genus\",     label = \"DiseaseState\", # name an alternative variable to label axis     n_taxa = 15, # give more taxa unique colours     taxon_renamer = function(x) stringr::str_replace_all(x, \"_\", \" \"), # remove underscores     other_name = \"Other genera\", # set custom name for the \"other\" category     merge_other = FALSE, # split the \"Other\" category to display alpha diversity     bar_width = 0.7, # reduce the bar width to 70% of one row     bar_outline_colour = \"grey5\" # is the default (use NA to remove outlines)   ) +   coord_flip()"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/compositions.html","id":"colour-palette-customisation","dir":"Articles > Web-only","previous_headings":"Customising the barplot","what":"Colour palette customisation","title":"Visualising compositions","text":"can use tax_palette() function help create custom colour palette use (multiple) barplots. Try ensure assign colour every taxon expect see separately barplot.","code":"myPal <- tax_palette(   data = pseq, rank = \"Genus\", n = 25, pal = \"greenArmytage\",   add = c(Other = \"white\") ) tax_palette_plot(myPal) # Override existing values myPal[\"Bacteroides\"] <- \"grey75\" myPal[\"Streptococcus\"] <- \"black\" myPal[\"Klebsiella\"] <- \"darkorange\" # Add more values myPal[\"Enterobacteriaceae Family\"] <- \"hotpink\" tax_palette_plot(myPal) pseq %>%   ps_filter(gender == \"female\") %>%   comp_barplot(     tax_level = \"Genus\", palette = myPal,     n_taxa = 12, other_name = \"Other\", merge_other = FALSE   ) +   coord_flip()"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/compositions.html","id":"alternative-taxa-ordering","dir":"Articles > Web-only","previous_headings":"Customising the barplot","what":"Alternative taxa ordering","title":"Visualising compositions","text":"default taxa ordered overall sum counts across samples dataset. can sort taxa another function, prev prevalence.","code":"pseq %>%   ps_filter(gender == \"male\") %>%   comp_barplot(tax_level = \"Genus\", tax_order = prev, merge_other = FALSE) +   coord_flip()"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/compositions.html","id":"customising-taxa-order","dir":"Articles > Web-only","previous_headings":"Customising the barplot","what":"Customising taxa order","title":"Visualising compositions","text":"easy (since microViz version 0.9.6) set custom order taxa display comp_barplot. example might particularly interested abundance Proteobacteria genera samples, want appear first, regardless overall abundance.","code":"interestingGenera <- pseq %>%   tax_select(\"Proteobacteria\") %>%   tax_top(n = 10, rank = \"Genus\") interestingGenera #>  [1] \"Escherichia/Shigella\"      \"Klebsiella\"                \"Haemophilus\"               #>  [4] \"Sutterella\"                \"Enterobacteriaceae Family\" \"Parasutterella\"            #>  [7] \"Cronobacter\"               \"Comamonadaceae Family\"     \"Raoultella\"                #> [10] \"Proteus\" pseq %>%   ps_filter(gender == \"male\") %>%   tax_sort(by = sum, at = \"Genus\") %>% # put other taxa in a reasonable order   comp_barplot(     tax_level = \"Genus\", n_taxa = 10, merge_other = FALSE, other_name = \"Other\",     palette = distinct_palette(10, pal = \"kelly\", add = \"grey90\"),     tax_order = interestingGenera # this is the reordering magic   ) +   coord_flip()"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/compositions.html","id":"custom-taxa-order-and-colour-palette","dir":"Articles > Web-only","previous_headings":"Customising the barplot","what":"Custom taxa order and colour palette","title":"Visualising compositions","text":"Customising taxa order colour palette often needed together. pair nicely can use names custom palette fix taxa order.   Let’s look abundance genera separate dataset.  genera present dataset, get warning. Notice also whilst genus-colour pairings , legends identical, taxa 2nd set don’t appear legend.","code":"customPal <- tax_palette(   data = pseq, rank = \"Genus\", pal = \"kelly\", n = 20, add = c(Other = \"white\") ) tax_palette_plot(customPal)  # I'm interested in Prevotella, so let's put that first names(customPal) <- c(\"Prevotella\", setdiff(names(customPal), \"Prevotella\")) tax_palette_plot(customPal) pseq %>%   ps_filter(gender == \"female\") %>%   tax_sort(by = sum, at = \"Genus\", tree_warn = FALSE) %>%   comp_barplot(     tax_level = \"Genus\", merge_other = FALSE,     n_taxa = 12,     other_name = \"Other\", # must match a name in palette     tax_order = names(customPal),     palette = customPal   ) +   coord_flip() data(\"shao19\") shao19 %>%   ps_filter(family_role == \"mother\", age == 38) %>%   tax_sort(by = sum, at = \"genus\", tree_warn = FALSE) %>%   comp_barplot(     tax_level = \"genus\", n_taxa = 12, other_name = \"Other\", merge_other = FALSE,     tax_order = names(customPal), palette = customPal   ) +   coord_flip() #> Warning in tax_reorder(ps, tax_order = tax_order, tree_warn = FALSE, ignore = other_name): 5 taxa #> specified in tax_order are not in phyloseq ps: they are ignored"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/compositions.html","id":"merging-phyloseq-objects-to-compare-them","dir":"Articles > Web-only","previous_headings":"Customising the barplot","what":"Merging phyloseq objects to compare them","title":"Visualising compositions","text":"best way create harmonised barcharts two () separate datasets (e.g. data public dataset) merge datasets. Often data generation methods (e.g. primer sets) won’t match, making ASV species-level merging impossible (advisable). can still try merging higher taxonomic rank, Class, comparison. Now can plot two datasets separate facets plot.  plot separate plots group argument.","code":"dataset1 <- ps_filter(pseq, gender == \"female\") dataset2 <- ps_filter(shao19, family_role == \"mother\", age == 38)  # first make sure the rank_names are the same format (e.g. both lowercase) colnames(dataset1@tax_table) <- rank_names(dataset1) %>% tolower()  # remove ranks that are not shared dataset1 <- dataset1 %>% tax_mutate(kingdom = NULL)  # create a dataset ID variable to distinguish the two datasets after merging dataset1 <- dataset1 %>% ps_mutate(dataset = \"IBD study\") dataset2 <- dataset2 %>% ps_mutate(dataset = \"Birth cohort mothers\")  # aggregate and merge combined <- phyloseq::merge_phyloseq(   dataset1 %>% tax_agg(\"class\") %>% ps_get(),   dataset2 %>% tax_agg(\"class\") %>% ps_get() )  combined #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 28 taxa and 93 samples ] #> sample_data() Sample Data:       [ 93 samples by 26 sample variables ] #> tax_table()   Taxonomy Table:    [ 28 taxa by 2 taxonomic ranks ] combined %>%   comp_barplot(\"class\", facet_by = \"dataset\", n_taxa = 12) +   coord_flip() plots <- combined %>% comp_barplot(\"class\", n_taxa = 12, group_by = \"dataset\")  # combine plots with shared legend patchwork::wrap_plots(plots, nrow = 2, guides = \"collect\") &   theme(axis.ticks.x = element_blank(), axis.text.x = element_blank())"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/compositions.html","id":"alphabetical-top-taxa","dir":"Articles > Web-only","previous_headings":"Customising the barplot","what":"Alphabetical top taxa","title":"Visualising compositions","text":"Sometimes might prefer top taxa shown alphabetical order.  Another way reordering names custom palette, like :","code":"# set up for alphabetical sorting topTaxa <- pseq %>%   ps_filter(gender == \"male\") %>%   tax_top(n = 9, rank = \"Genus\") %>%   sort() # this makes them alphabetical  # plot with alphabetical sorting pseq %>%   ps_filter(gender == \"male\") %>%   tax_sort(by = sum, at = \"Genus\") %>% # this orders all genera by abundance   comp_barplot(     tax_order = topTaxa, # this brings the named taxa to the front     tax_level = \"Genus\", n_taxa = 9, merge_other = FALSE, other_name = \"Other\"   ) +   coord_flip() # don't add an \"Other\" colour for now alphaPal <- tax_palette(pseq, pal = \"kelly\", rank = \"Genus\", n = 12, add = NA) names(alphaPal) <- sort(names(alphaPal)) # now add the \"Other\" colour to the end alphaPal[\"Other\"] <- \"white\" tax_palette_plot(alphaPal) pseq %>%   ps_filter(gender == \"male\") %>%   comp_barplot(     tax_level = \"Genus\", n_taxa = 12, merge_other = FALSE,     other_name = \"Other\", # must match a name in palette     tax_order = names(alphaPal), palette = alphaPal   ) +   coord_flip()"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/compositions.html","id":"custom-hierarchical-sorting-and-palette","dir":"Articles > Web-only","previous_headings":"Customising the barplot","what":"Custom hierarchical sorting and palette","title":"Visualising compositions","text":"complex example showing one method obtaining hierarchical colour palette hues specified Phylum (another high rank) shades hue specified Family (another low rank).","code":"hueRank <- \"Phylum\" hueRankPlural <- \"Phyla\" shadeRank <- \"Family\"  # Sort phyloseq at lower, and then higher ranks pseq2 <- pseq %>%   ps_filter(gender == \"male\") %>%   tax_sort(by = sum, at = shadeRank) %>%   tax_sort(by = sum, at = hueRank) %>%   tax_agg(rank = shadeRank)  # Specify number of hues and shades desired nHues <- 3 # \"Other\" phyla will be shades of grey nShades <- 4 # \"Other\" families will be the lightest shade of each hue  hierarchicalPalInfo <- data.frame(   hue = as.vector(tt_get(pseq2)[, hueRank]),   shade = as.vector(tt_get(pseq2)[, shadeRank]),   counts = taxa_sums(otu_get(pseq2)) )  hierarchicalPalInfo <- hierarchicalPalInfo %>%   dplyr::mutate(     hue = forcats::fct_other(       f = hue, keep = unique(hue)[seq_len(nHues)],       other_level = paste(\"Other\", hueRankPlural)     ),     nChrHue = nchar(as.character(hue)), padHue = max(nChrHue) - nChrHue   ) %>%   dplyr::group_by(hue) %>%   dplyr::mutate(     shade = forcats::fct_other(       f = shade, keep = unique(shade)[seq_len(nShades - 1)],       other_level = \"Other\"     )   ) %>%   dplyr::ungroup() %>%   dplyr::mutate(     nChrShade = nchar(as.character(shade)), padShade = max(nChrShade) - nChrShade,     Taxa = paste0(hue, \": \", strrep(\" \", padHue), shade, strrep(\" \", padShade))   ) hierarchicalPalMatrix <- matrix(   data = sapply(     X = seq(from = 30, to = 75, length.out = nShades),     FUN = function(l) scales::hue_pal(l = l, h.start = 30)(n = nHues)   ),   byrow = TRUE, ncol = nHues ) hierarchicalPalMatrix <- cbind(hierarchicalPalMatrix, grey.colors(n = nShades))  hierarchicalPal <- hierarchicalPalMatrix %>%   as.vector() %>%   setNames(unique(hierarchicalPalInfo$Taxa)) tax_palette_plot(hierarchicalPal) +   theme(axis.text.y.left = element_text(family = \"mono\")) pseq2 %>%   ps_get() %>%   tax_mutate(\"Phylum: Family\" = hierarchicalPalInfo$Taxa, .keep = \"none\") %>%   comp_barplot(     tax_level = \"Phylum: Family\", n_taxa = length(hierarchicalPal),     tax_order = \"asis\", palette = hierarchicalPal, bar_width = 0.975   ) +   coord_flip() +   theme(legend.text = element_text(family = \"mono\")) # for text alignment"},{"path":[]},{"path":"https://david-barnett.github.io/microViz/articles/web-only/compositions.html","id":"averaging-compositions","dir":"Articles > Web-only","previous_headings":"Averages, faceting or grouping?","what":"Averaging compositions","title":"Visualising compositions","text":"Sometimes, compare microbial compositions across groups, average compositions presented. However “group-averaging” approach hides lot within-group variation, well imbalance group sizes.","code":"pseq %>%   ps_select(age, DiseaseState) %>% # avoids lots of phyloseq::merge_samples warnings   ps_filter(DiseaseState != \"IBDundef\") %>%   phyloseq::merge_samples(group = \"DiseaseState\") %>%   comp_barplot(tax_level = \"Genus\", n_taxa = 12, bar_width = 0.8) +   coord_flip() + labs(x = NULL, y = NULL) #> Warning in asMethod(object): NAs introduced by coercion"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/compositions.html","id":"faceting","dir":"Articles > Web-only","previous_headings":"Averages, faceting or grouping?","what":"Faceting","title":"Visualising compositions","text":"Faceting show group small subplot. plot can see minority UC samples high abundance Escherichia/Shigella Streptococcus. merged bars might misled thinking UC samples somewhat increased abundances taxa.  Instead using facet_by argument comp_barplot can control faceting afterwards. can use facet_grid create row facets.","code":"pseq %>%   ps_filter(DiseaseState != \"IBDundef\") %>% # only one sample in this group   # convert DiseaseState into ordered factor to control order of facets   ps_mutate(     DiseaseState = factor(DiseaseState, levels = c(\"UC\", \"nonIBD\", \"CD\"))   ) %>%   comp_barplot(     tax_level = \"Genus\", n_taxa = 15,     bar_outline_colour = NA, facet_by = \"DiseaseState\"   ) +   coord_flip() pseq %>%   ps_filter(DiseaseState != \"IBDundef\") %>% # only one sample in this group   # convert DiseaseState into ordered factor to control order of facets   ps_mutate(     DiseaseState = factor(DiseaseState, levels = c(\"UC\", \"CD\", \"nonIBD\"))   ) %>%   comp_barplot(     tax_level = \"Genus\", n_taxa = 15,     sample_order = \"bray\", bar_outline_colour = NA,   ) +   facet_grid(     rows = vars(DiseaseState),     scales = \"free\", space = \"free\" # these options are critically important!   ) +   coord_flip() +   theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/compositions.html","id":"grouping","dir":"Articles > Web-only","previous_headings":"Averages, faceting or grouping?","what":"Grouping","title":"Visualising compositions","text":"even greater control faceting, comp_barplot allows generate separate ggplot objects group, whilst maintaining taxa colour scheme. can assemble plots one figure , example, patchwork package, keep separate. Note ordering samples may differ facet group_by approaches. group_by method, ordering samples similarity done separately group, whereas facet_by method, similarity-based ordering done samples samples separated facet afterwards.  Notice can theme plots & operator. See https://patchwork.data-imaginist.com/index.html examples arranging multiple plots.","code":"plot_list <- pseq %>%   ps_filter(DiseaseState != \"IBDundef\") %>%   comp_barplot(n_taxa = 15, tax_level = \"Genus\", group_by = \"DiseaseState\")  # Plot them side by side with the patchwork package. patch <- patchwork::wrap_plots(plot_list, nrow = 1, guides = \"collect\") patch & coord_flip() # make all plots horizontal (note: use & instead of +) patch &   coord_flip() & labs(x = NULL, y = NULL) &   theme(     axis.text.y = element_text(size = 5),     legend.text = element_text(size = 8)   ) &   plot_annotation(     title = \"Microbial composition across disease groups\",     caption = \"Caption: patchwork is a great package!\",     theme = theme(plot.title = element_text(size = 14, face = \"bold\"))   )"},{"path":[]},{"path":"https://david-barnett.github.io/microViz/articles/web-only/compositions.html","id":"sorting-by-similarity","dir":"Articles > Web-only","previous_headings":"Sorting the barplot","what":"Sorting by similarity","title":"Visualising compositions","text":"Sorting samples compositional barplots similarity can make patterns data much easier see. Check unsorted version first barplot article.  can play dissimilarity measure (set sample_order argument) seriate_method like, defaults (Bray Curtis OLO Ward) seem work pretty well time. sorting samples similarity, default treat “” taxa one group, .e. merge_other = TRUE order_with_all_taxa = FALSE. set order_with_all_taxa = TRUE, samples sorted merging taxa. resulting sample order merge_other = FALSE.","code":"pseq %>%   ps_filter(gender == \"female\") %>%   comp_barplot(tax_level = \"Genus\", sample_order = \"asis\") +   coord_flip() +   ggtitle(\"Unsorted barcharts are hard to read!\") pseq %>%   ps_filter(gender == \"female\") %>%   comp_barplot(tax_level = \"Genus\") +   coord_flip() +   ggtitle(\"Samples sorted AFTER merging 'other' taxa\") pseq %>%   ps_filter(gender == \"female\") %>%   comp_barplot(tax_level = \"Genus\", order_with_all_taxa = TRUE) +   coord_flip() +   ggtitle(\"Samples sorted BEFORE merging 'other' taxa\") pseq %>%   ps_filter(gender == \"female\") %>%   comp_barplot(tax_level = \"Genus\", merge_other = FALSE) +   coord_flip() +   ggtitle(\"'other' taxa not merged\")"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/compositions.html","id":"sort-by-ordination","dir":"Articles > Web-only","previous_headings":"Sorting the barplot","what":"Sort by ordination","title":"Visualising compositions","text":"Coming soon.","code":""},{"path":"https://david-barnett.github.io/microViz/articles/web-only/compositions.html","id":"sort-by-1-taxon","dir":"Articles > Web-only","previous_headings":"Sorting the barplot","what":"Sort by 1 taxon","title":"Visualising compositions","text":"study distribution single taxonomic group across samples, can use ps_arrange (.target argument set “otu_table”) ‘default’ sample_order setting comp_barplot.","code":"pseq %>%   tax_agg(\"Phylum\") %>%   tax_transform(\"compositional\") %>%   ps_arrange(desc(Firmicutes), .target = \"otu_table\") %>%   comp_barplot(tax_level = \"Phylum\", sample_order = \"asis\", counts_warn = FALSE) +   coord_flip()"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/compositions.html","id":"sorting-by-time","dir":"Articles > Web-only","previous_headings":"Sorting the barplot","what":"Sorting by time","title":"Visualising compositions","text":"Sometimes multiple samples individuals/sites several timepoints. must first order phyloseq time ordering variable set comp_barplot sample order “asis” () keep pre-set order. x argument available since microViz 0.9.7, allows specify variable sample name x aesthetic ggplot. useful missing samples per timepoint group, want fix consistent x axes scales across facets scales = “fixed”.  can try roughly sort subjects microbiome composition seriating samples front plotting, fixing subject order mutating subject factor, preserving unique levels sample-sorted order.  alternative way present grouped repeated samples.","code":"data(\"shao19\")  # prepare subset of data ps <- shao19 %>%   ps_mutate(family_id = as.numeric(family_id)) %>%   # take an arbitrary smaller subset of infants and timepoints   ps_filter(family_role == \"child\", family_id < 30, infant_age %in% c(4, 7, 21)) ps %>%   ps_mutate(infant_age = factor(infant_age, levels = unique(infant_age))) %>%   comp_barplot(     tax_level = \"genus\", sample_order = \"asis\", bar_width = 0.7,     merge_other = FALSE, x = \"infant_age\" # x argument available since microViz 0.9.7   ) +   facet_wrap(     facets = vars(family_id), labeller = as_labeller(~ paste(\"Fam.\", .))   ) +   theme_bw() + # slightly clearer axes for facets   labs(x = \"Age (days)\", y = \"Relative Abundance\", fill = \"Genus\") +   scale_y_continuous(     expand = expansion(add = c(0, 0.1)), # axis starts exactly at 0     labels = scales::label_percent()   ) ps %>%   ps_seriate(rank = \"genus\") %>%   ps_mutate(     family_id = factor(family_id, levels = unique(family_id)),     infant_age = factor(infant_age, levels = unique(infant_age))   ) %>%   comp_barplot(     tax_level = \"genus\", sample_order = \"asis\", bar_width = 0.7,     x = \"infant_age\" # x argument is available since microViz 0.9.7   ) +   facet_wrap(     facets = vars(family_id), labeller = as_labeller(~ paste(\"Fam.\", .))   ) +   theme_bw() + # slightly clearer axes for facets   labs(x = \"Age (days)\", y = \"Relative Abundance\") +   scale_y_continuous(     expand = expansion(add = c(0, 0.1)), # axis starts exactly at 0     labels = scales::label_percent()   ) ps %>%   ps_arrange(family_id) %>%   ps_mutate(     family_id = paste(\"Fam\", family_id), # better labels     family_id = factor(family_id, rev(unique(family_id))) # fix plot order   ) %>%   comp_barplot(     tax_level = \"genus\", bar_width = 0.7, sample_order = \"asis\", # don't sort     x = \"family_id\" # x argument is available since microViz 0.9.7   ) +   facet_wrap(     facets = vars(infant_age), labeller = as_labeller(~ paste(\"Age\", ., \"days\")),     scales = \"fixed\"   ) +   coord_flip() +   labs(x = \"Family ID\", y = \"Relative abundance\") +   scale_y_continuous(expand = expansion(add = c(0, 0.05))) + # axis starts exactly at 0   theme_bw() + # slightly clearer axes for facets   theme(panel.spacing.x = unit(6, \"mm\")) # space for non-overlapping axis numbers"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/compositions.html","id":"faceting-by-timepoint-and-another-variable","dir":"Articles > Web-only","previous_headings":"Sorting the barplot","what":"Faceting by timepoint and another variable","title":"Visualising compositions","text":"Grid faceting separate samples timepoint another grouping variable, whilst keeping subjects’ samples paired.  can try roughly sort subjects microbiome composition seriating samples front plotting, fixing subject order mutating subject factor, preserving unique levels sample-sorted order.  Faceted timepoint grouped nationality.","code":"# prepare arbitrary subset of dataset data(\"dietswap\", package = \"microbiome\") psD <- dietswap %>% ps_filter(group == \"DI\") psD %>%   comp_barplot(     tax_level = \"Genus\", n_taxa = 10, sample_order = \"asis\",     bar_width = 0.7, x = \"subject\", # x arg available since microViz 0.9.7     merge_other = FALSE, bar_outline_colour = \"grey25\"   ) +   facet_grid(     cols = vars(timepoint.within.group), rows = vars(nationality),     scales = \"free_y\", # this only frees y scale per row in grid faceting     space = \"free_y\" # allows bars to be same size by freeing facet heights   ) +   scale_x_discrete(limits = rev) + # reverses order: top-down alphabetical   coord_flip() psD %>%   ps_seriate(rank = \"Genus\") %>%   ps_mutate(subject = factor(subject, levels = unique(subject))) %>%   comp_barplot(     tax_level = \"Genus\", n_taxa = 10, sample_order = \"asis\",     bar_width = 0.7, x = \"subject\", # x arg available since microViz 0.9.7     merge_other = FALSE, bar_outline_colour = \"grey25\"   ) +   facet_grid(     cols = vars(timepoint.within.group), rows = vars(nationality),     labeller = labeller(.cols = as_labeller(~ paste(\"Timepoint\", .))),     scales = \"free_y\", # this only frees y scale per row in grid faceting     space = \"free_y\" # allows bars to be same size by freeing facet heights   ) +   theme(text = element_text(size = 10), panel.spacing.x = unit(5, \"mm\")) +   coord_flip() times_list <- psD %>%   ps_seriate(rank = \"Genus\") %>% # can help for approximate subject sorting   ps_mutate(subject = factor(subject, levels = unique(subject))) %>%   comp_barplot(     tax_level = \"Genus\", n_taxa = 11,     sample_order = \"asis\", # don't bother sorting here, will be ignored     group_by = \"nationality\", bar_width = 0.7, x = \"subject\",     merge_other = FALSE, bar_outline_colour = \"grey25\"   )  times_list %>%   patchwork::wrap_plots(guides = \"collect\", heights = c(7, 6)) &   facet_wrap(~timepoint.within.group, nrow = 1) &   ylab(\"Relative abundance\") &   coord_flip() &   theme(text = element_text(size = 10), panel.spacing.x = unit(5, \"mm\"))"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/compositions.html","id":"session-info","dir":"Articles > Web-only","previous_headings":"","what":"Session info","title":"Visualising compositions","text":"","code":"devtools::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.5.0 (2025-04-11) #>  os       Ubuntu 24.04.2 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  C.UTF-8 #>  ctype    C.UTF-8 #>  tz       UTC #>  date     2025-04-14 #>  pandoc   3.1.11 @ /opt/hostedtoolcache/pandoc/3.1.11/x64/ (via rmarkdown) #>  quarto   NA #>  #> ─ Packages ─────────────────────────────────────────────────────────────────────────────────────── #>  package          * version date (UTC) lib source #>  ade4               1.7-23  2025-02-14 [1] RSPM #>  ape                5.8-1   2024-12-16 [1] RSPM #>  Biobase            2.67.0  2024-10-29 [1] Bioconduc~ #>  BiocGenerics       0.53.6  2025-01-27 [1] Bioconduc~ #>  biomformat         1.35.0  2024-10-29 [1] Bioconduc~ #>  Biostrings         2.75.4  2025-02-21 [1] Bioconduc~ #>  bslib              0.9.0   2025-01-30 [1] RSPM #>  ca                 0.71.1  2020-01-24 [1] RSPM #>  cachem             1.1.0   2024-05-16 [1] RSPM #>  cli                3.6.4   2025-02-13 [1] RSPM #>  cluster            2.1.8.1 2025-03-12 [3] CRAN (R 4.5.0) #>  codetools          0.2-20  2024-03-31 [3] CRAN (R 4.5.0) #>  colorspace         2.1-1   2024-07-26 [1] RSPM #>  crayon             1.5.3   2024-06-20 [1] RSPM #>  data.table         1.17.0  2025-02-22 [1] RSPM #>  desc               1.4.3   2023-12-10 [1] RSPM #>  devtools           2.4.5   2022-10-11 [1] RSPM #>  digest             0.6.37  2024-08-19 [1] RSPM #>  dplyr              1.1.4   2023-11-17 [1] RSPM #>  ellipsis           0.3.2   2021-04-29 [1] RSPM #>  evaluate           1.0.3   2025-01-10 [1] RSPM #>  farver             2.1.2   2024-05-13 [1] RSPM #>  fastmap            1.2.0   2024-05-15 [1] RSPM #>  forcats            1.0.0   2023-01-29 [1] RSPM #>  foreach            1.5.2   2022-02-02 [1] RSPM #>  fs                 1.6.5   2024-10-30 [1] RSPM #>  generics           0.1.3   2022-07-05 [1] RSPM #>  GenomeInfoDb       1.43.4  2025-01-24 [1] Bioconduc~ #>  GenomeInfoDbData   1.2.14  2025-04-14 [1] Bioconductor #>  ggplot2          * 3.5.2   2025-04-09 [1] RSPM #>  glue               1.8.0   2024-09-30 [1] RSPM #>  gtable             0.3.6   2024-10-25 [1] RSPM #>  htmltools          0.5.8.1 2024-04-04 [1] RSPM #>  htmlwidgets        1.6.4   2023-12-06 [1] RSPM #>  httpuv             1.6.15  2024-03-26 [1] RSPM #>  httr               1.4.7   2023-08-15 [1] RSPM #>  igraph             2.1.4   2025-01-23 [1] RSPM #>  IRanges            2.41.3  2025-02-12 [1] Bioconduc~ #>  iterators          1.0.14  2022-02-05 [1] RSPM #>  jquerylib          0.1.4   2021-04-26 [1] RSPM #>  jsonlite           2.0.0   2025-03-27 [1] RSPM #>  knitr              1.50    2025-03-16 [1] RSPM #>  labeling           0.4.3   2023-08-29 [1] RSPM #>  later              1.4.2   2025-04-08 [1] RSPM #>  lattice            0.22-6  2024-03-20 [3] CRAN (R 4.5.0) #>  lifecycle          1.0.4   2023-11-07 [1] RSPM #>  magrittr           2.0.3   2022-03-30 [1] RSPM #>  MASS               7.3-65  2025-02-28 [3] CRAN (R 4.5.0) #>  Matrix             1.7-3   2025-03-11 [3] CRAN (R 4.5.0) #>  memoise            2.0.1   2021-11-26 [1] RSPM #>  mgcv               1.9-1   2023-12-21 [3] CRAN (R 4.5.0) #>  microbiome         1.29.0  2025-01-23 [1] Bioconduc~ #>  microViz         * 0.12.7  2025-04-14 [1] local #>  mime               0.13    2025-03-17 [1] RSPM #>  miniUI             0.1.1.1 2018-05-18 [1] RSPM #>  multtest           2.63.0  2024-10-29 [1] Bioconduc~ #>  munsell            0.5.1   2024-04-01 [1] RSPM #>  nlme               3.1-168 2025-03-31 [3] CRAN (R 4.5.0) #>  patchwork        * 1.3.0   2024-09-16 [1] RSPM #>  permute            0.9-7   2022-01-27 [1] RSPM #>  phyloseq         * 1.51.0  2025-01-23 [1] Bioconduc~ #>  pillar             1.10.2  2025-04-05 [1] RSPM #>  pkgbuild           1.4.7   2025-03-24 [1] RSPM #>  pkgconfig          2.0.3   2019-09-22 [1] RSPM #>  pkgdown            2.1.1   2024-09-17 [1] RSPM #>  pkgload            1.4.0   2024-06-28 [1] RSPM #>  plyr               1.8.9   2023-10-02 [1] RSPM #>  profvis            0.4.0   2024-09-20 [1] RSPM #>  promises           1.3.2   2024-11-28 [1] RSPM #>  purrr              1.0.4   2025-02-05 [1] RSPM #>  R6                 2.6.1   2025-02-15 [1] RSPM #>  ragg               1.4.0   2025-04-10 [1] RSPM #>  Rcpp               1.0.14  2025-01-12 [1] RSPM #>  registry           0.5-1   2019-03-05 [1] RSPM #>  remotes            2.5.0   2024-03-17 [1] RSPM #>  reshape2           1.4.4   2020-04-09 [1] RSPM #>  rhdf5              2.51.2  2025-01-08 [1] Bioconduc~ #>  rhdf5filters       1.19.2  2025-03-05 [1] Bioconduc~ #>  Rhdf5lib           1.29.2  2025-03-24 [1] Bioconduc~ #>  rlang              1.1.5   2025-01-17 [1] RSPM #>  rmarkdown          2.29    2024-11-04 [1] RSPM #>  Rtsne              0.17    2023-12-07 [1] RSPM #>  S4Vectors          0.45.4  2025-02-11 [1] Bioconduc~ #>  sass               0.4.9   2024-03-15 [1] RSPM #>  scales             1.3.0   2023-11-28 [1] RSPM #>  seriation          1.5.7   2024-12-05 [1] RSPM #>  sessioninfo        1.2.3   2025-02-05 [1] RSPM #>  shiny              1.10.0  2024-12-14 [1] RSPM #>  stringi            1.8.7   2025-03-27 [1] RSPM #>  stringr            1.5.1   2023-11-14 [1] RSPM #>  survival           3.8-3   2024-12-17 [3] CRAN (R 4.5.0) #>  systemfonts        1.2.2   2025-04-04 [1] RSPM #>  textshaping        1.0.0   2025-01-20 [1] RSPM #>  tibble             3.2.1   2023-03-20 [1] RSPM #>  tidyr              1.3.1   2024-01-24 [1] RSPM #>  tidyselect         1.2.1   2024-03-11 [1] RSPM #>  TSP                1.2-4   2023-04-04 [1] RSPM #>  UCSC.utils         1.3.1   2025-01-15 [1] Bioconduc~ #>  urlchecker         1.0.1   2021-11-30 [1] RSPM #>  usethis            3.1.0   2024-11-26 [1] RSPM #>  vctrs              0.6.5   2023-12-01 [1] RSPM #>  vegan              2.6-10  2025-01-29 [1] RSPM #>  withr              3.0.2   2024-10-28 [1] RSPM #>  xfun               0.52    2025-04-02 [1] RSPM #>  xtable             1.8-4   2019-04-21 [1] RSPM #>  XVector            0.47.2  2025-01-08 [1] Bioconduc~ #>  yaml               2.3.10  2024-07-26 [1] RSPM #>  #>  [1] /home/runner/work/_temp/Library #>  [2] /opt/R/4.5.0/lib/R/site-library #>  [3] /opt/R/4.5.0/lib/R/library #>  * ── Packages attached to the search path. #>  #> ──────────────────────────────────────────────────────────────────────────────────────────────────"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/heatmaps.html","id":"setup","dir":"Articles > Web-only","previous_headings":"","what":"Setup","title":"microViz annotated heatmaps","text":"First ’ll get OTU abundance data inflammatory bowel disease patients controls corncob package. Remove mostly unclassified species-level data, drop rare taxa fix taxonomy rest. Also drop patients unclassified IBD.","code":"library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(phyloseq) library(microViz) #> microViz version 0.12.7 - Copyright (C) 2021-2025 David Barnett #> ! Website: https://david-barnett.github.io/microViz #> ✔ Useful?  For citation details, run: `citation(\"microViz\")` #> ✖ Silence? `suppressPackageStartupMessages(library(microViz))` data(\"ibd\", package = \"microViz\") ibd #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 36349 taxa and 91 samples ] #> sample_data() Sample Data:       [ 91 samples by 15 sample variables ] #> tax_table()   Taxonomy Table:    [ 36349 taxa by 7 taxonomic ranks ] psq <- ibd %>%   tax_mutate(Species = NULL) %>%   tax_filter(min_prevalence = 5) %>%   tax_fix() %>%   ps_filter(DiseaseState != \"IBDundef\") psq #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 1599 taxa and 90 samples ] #> sample_data() Sample Data:       [ 90 samples by 15 sample variables ] #> tax_table()   Taxonomy Table:    [ 1599 taxa by 6 taxonomic ranks ]"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/heatmaps.html","id":"microbiome-heatmaps","dir":"Articles > Web-only","previous_headings":"","what":"Microbiome heatmaps","title":"microViz annotated heatmaps","text":"Visualise microbial composition samples. samples taxa sorted similarity. (default uses hierarchical clustering optimal leaf ordering, using euclidean distances transformed data). example use “compositional” transformation, Class abundances shown proportions sample.  can easily swap symmetrical colour palette transformations like “clr” “standardize”. default symmetrical palette can pick many.","code":"psq %>%   tax_transform(\"compositional\", rank = \"Class\") %>%   comp_heatmap() #> Registered S3 method overwritten by 'seriation': #>   method         from  #>   reorder.hclust vegan psq %>%   tax_transform(\"clr\", rank = \"Family\") %>%   comp_heatmap(colors = heat_palette(sym = TRUE), name = \"CLR\")"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/heatmaps.html","id":"annotating-taxa","dir":"Articles > Web-only","previous_headings":"Microbiome heatmaps","what":"Annotating taxa","title":"microViz annotated heatmaps","text":"","code":"psq %>%   tax_transform(\"compositional\", rank = \"Class\") %>%   comp_heatmap(tax_anno = taxAnnotation(     Prev. = anno_tax_prev(bar_width = 0.3, size = grid::unit(1, \"cm\"))   ))"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/heatmaps.html","id":"legend-positioning","dir":"Articles > Web-only","previous_headings":"Microbiome heatmaps","what":"Legend positioning","title":"microViz annotated heatmaps","text":"Positioning heatmap legend bottom possible. can assign heatmap name call ComplexHeatmap’s draw function.","code":"heat <- psq %>%   tax_transform(\"compositional\", rank = \"Class\") %>%   comp_heatmap(     tax_anno = taxAnnotation(       Prev. = anno_tax_prev(bar_width = 0.3, size = grid::unit(1, \"cm\"))     ),     heatmap_legend_param = list(       at = 0:5 / 5,       direction = \"horizontal\", title_position = \"leftcenter\",       legend_width = grid::unit(4, \"cm\"), grid_height = grid::unit(5, \"mm\")     )   )  ComplexHeatmap::draw(   object = heat, heatmap_legend_side = \"bottom\",   adjust_annotation_extension = FALSE )"},{"path":[]},{"path":"https://david-barnett.github.io/microViz/articles/web-only/heatmaps.html","id":"group-membership","dir":"Articles > Web-only","previous_headings":"Microbiome heatmaps > Annotating samples","what":"Group membership","title":"microViz annotated heatmaps","text":"2 different methods annotating sample’s values categorical metadata possible. anno_sample() borders around cell, automatically adds legend. anno_sample_cat() can cell borders, requires extra step draw legend  Let’s try drawing equivalent categorical annotations two methods. methods can draw annotations borders individual boxes. style suits heatmaps gridlines (.e. grid_col = NA). example suppressed row ordering cluster_rows = FALSE, added spaces taxa splitting every row row_split = 1:11, ComplexHeatmap::Heatmap() arguments.  can also manually draw legend convenience function anno_cat_legend().","code":"cols <- distinct_palette(n = 3, add = NA) names(cols) <- unique(samdat_tbl(psq)$DiseaseState)  psq %>%   tax_transform(\"compositional\", rank = \"Class\") %>%   comp_heatmap(     tax_anno = taxAnnotation(       Prev. = anno_tax_prev(bar_width = 0.3, size = grid::unit(1, \"cm\"))     ),     sample_anno = sampleAnnotation(       State1 = anno_sample(\"DiseaseState\"),       col = list(State1 = cols), border = FALSE,       State2 = anno_sample_cat(\"DiseaseState\", col = cols)     )   ) psqC <- psq %>% tax_transform(\"compositional\", rank = \"Class\")  htmp <- psqC %>%   comp_heatmap(     grid_col = NA,     cluster_rows = FALSE, row_title = NULL,     row_split = seq_len(ntaxa(ps_get(psqC))),     tax_anno = taxAnnotation(       Prev. = anno_tax_prev(bar_width = 0.9, size = grid::unit(1, \"cm\"), border = F)     ),     sample_anno = sampleAnnotation(       # method one       State1 = anno_sample(\"DiseaseState\"),       col = list(State1 = cols), border = TRUE,       # method two       State2 = anno_sample_cat(         var = \"DiseaseState\", col = cols, box_col = NA, border_col = \"black\",         legend_title = \"State2\"       )     )   ) htmp %>% ComplexHeatmap::draw(   annotation_legend_list = attr(htmp, \"AnnoLegends\") ) grid::grid.newpage() anno_cat_legend(   col = c(\"a level\" = \"red\", \"another level\" = \"blue\", c = \"white\"),   border = \"black\", gap = grid::unit(2, \"cm\"), ncol = 3 ) %>%   ComplexHeatmap::draw()"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/heatmaps.html","id":"arranging-samples","dir":"Articles > Web-only","previous_headings":"Microbiome heatmaps","what":"Arranging samples","title":"microViz annotated heatmaps","text":"Instead sorting samples similarity, can alternatively arrange samples beforehand ps_arrange methods, suppress reordering heatmap sample_seriation = “Identity”","code":"cols <- distinct_palette(n = 3, add = NA) names(cols) <- unique(samdat_tbl(psq)$DiseaseState)  psq %>%   # sort all samples by similarity   ps_seriate(rank = \"Class\", tax_transform = \"compositional\", dist = \"bray\") %>%    # arrange the samples into Disease State groups   ps_arrange(DiseaseState) %>%    tax_transform(\"compositional\", rank = \"Class\") %>%   comp_heatmap(     tax_anno = taxAnnotation(       Prev. = anno_tax_prev(bar_width = 0.3, size = grid::unit(1, \"cm\"))     ),     sample_anno = sampleAnnotation(       State1 = anno_sample(\"DiseaseState\"),       col = list(State1 = cols), border = FALSE,       State2 = anno_sample_cat(\"DiseaseState\", col = cols)     ),     sample_seriation = \"Identity\" # suppress sample reordering   )"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/heatmaps.html","id":"numbering-cells","dir":"Articles > Web-only","previous_headings":"Microbiome heatmaps","what":"Numbering cells","title":"microViz annotated heatmaps","text":"fewer samples (taxa) might like label cells values. default, raw counts shown.  can easily change showing values colours setting numbers_use_counts = FALSE, can/change number decimals shown .  numbers can transformation counts, irrespective transformations used colours, seriation.  demonstrate coloration, numbering seriation can use different transformations original count data, example specifies seriating taxa samples using numerical values used numbers transformation, colours, just presence/absence!","code":"psq %>%   tax_transform(\"compositional\", rank = \"Class\") %>%   comp_heatmap(samples = 1:15, numbers = heat_numbers()) psq %>%   tax_transform(\"compositional\", rank = \"Class\") %>%   comp_heatmap(     samples = 1:15, numbers_use_counts = FALSE,     numbers = heat_numbers(decimals = 2)   ) psq %>%   tax_transform(\"binary\", undetected = 0, rank = \"Class\") %>%   comp_heatmap(     samples = 1:15, numbers_use_counts = TRUE, numbers_trans = \"compositional\",     numbers = heat_numbers(decimals = 2, col = \"white\"),     show_heatmap_legend = FALSE   ) psq %>%   tax_transform(\"binary\", undetected = 0, rank = \"Class\") %>%   comp_heatmap(     samples = 1:15,     sample_ser_counts = TRUE, sample_ser_trans = \"compositional\",     tax_ser_counts = TRUE, tax_ser_trans = \"compositional\",     numbers_use_counts = TRUE, numbers_trans = \"compositional\",     numbers = heat_numbers(decimals = 2, col = \"white\"),     show_heatmap_legend = FALSE   )"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/heatmaps.html","id":"correlation-heatmaps","dir":"Articles > Web-only","previous_headings":"","what":"Correlation heatmaps","title":"microViz annotated heatmaps","text":"Correlation heatmaps can nice way quickly assess patterns associations numerical variables dataset, microbial abundances metadata. Let’s make fake numeric variables exemplify .","code":"set.seed(111) # ensures making same random variables every time! psq <- psq %>%   ps_arrange(ibd) %>%   ps_mutate(     var1 = rnorm(nsamples(psq), mean = 10, sd = 3),     var2 = c(       rnorm(nsamples(psq) * 0.75, mean = 4, sd = 2),       rnorm(1 + nsamples(psq) / 4, mean = 9, sd = 3)     ),     var3 = runif(nsamples(psq), 2, 10),     var4 = rnorm(nsamples(psq), mean = 100 + nsamples(psq):0, sd = 20) / 20,     var5 = rnorm(nsamples(psq), mean = 5, sd = 2),     var6 = rnbinom(nsamples(psq), size = 1:75 / 10, mu = 5)   )"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/heatmaps.html","id":"calculating-correlations","dir":"Articles > Web-only","previous_headings":"Correlation heatmaps","what":"Calculating correlations","title":"microViz annotated heatmaps","text":"default, cor_heatmap function correlate taxa numerical sample data, using pearson correlation method.  ’s easy change different method, .e. spearman’s rank correlation kendall’s tau, reflected legend title. also specify use 15 abundant taxa, maximum count, just make tutorial figures little compact!  Older versions microViz cor_heatmap tax_transform argument. flexibility, must now transform taxa passing psExtra object cor_heatmap. transformed taxa “clr” centered-log-ratio transformation prior correlating. Notice annotations stay scale, default annotation functions extract stored counts data psExtra input, transformed data.  Let’s transform scale taxon abundances correlating.","code":"psq %>%   tax_agg(\"Family\") %>%   cor_heatmap(vars = c(\"var1\", \"var2\", \"var3\", \"var4\", \"var5\", \"var6\")) psq %>%   tax_agg(\"Family\") %>%   cor_heatmap(     taxa = tax_top(psq, 15, by = max, rank = \"Family\"),     vars = paste0(\"var\", 1:6), cor = \"spearman\"   ) psq %>%   tax_agg(\"Family\") %>%   tax_transform(\"clr\", zero_replace = \"halfmin\") %>%   cor_heatmap(     taxa = tax_top(psq, 15, by = max, rank = \"Family\"),     vars = paste0(\"var\", 1:6)   ) psq %>%   tax_agg(\"Family\") %>%   tax_transform(\"clr\", zero_replace = \"halfmin\") %>%   cor_heatmap(     taxa = tax_top(psq, 15, by = max, rank = \"Family\"),     vars = paste0(\"var\", 1:6)   )"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/heatmaps.html","id":"taxon-annotations","dir":"Articles > Web-only","previous_headings":"Correlation heatmaps","what":"Taxon annotations","title":"microViz annotated heatmaps","text":"seen previous plots taxa annotated default prevalence relative abundance. can transform taxa abundance annotation. trans zero_replace arguments sent tax_transform().  can multiple transformations scaling supplying function, takes psExtra phyloseq object, transforms , returns .  Note default relative abundance shown samples taxon detected! can include values samples taxa setting only_detected = FALSE. Let’s try heatmap-style density plot annotation. ’ll replace zeroes ones interpretable minimum value plot. ’ll compare side--side default setting showing distribution values detection threshold. zero-inflated microbiome data, showing prevalence “abundance detected” often seems like informative annotation.","code":"psq %>%   tax_agg(\"Family\") %>%   cor_heatmap(     taxa = tax_top(psq, 15, by = max, rank = \"Family\"),     vars = paste0(\"var\", 1:6),     tax_anno = taxAnnotation(       Prev. = anno_tax_prev(ylim = 0:1),       Log10. = anno_tax_box(trans = \"log10\", zero_replace = \"halfmin\")     )   ) psq %>%   tax_agg(\"Family\") %>%   cor_heatmap(     taxa = tax_top(psq, 15, by = max, rank = \"Family\"),     vars = paste0(\"var\", 1:6),     tax_anno = taxAnnotation(       Log2 = anno_tax_density(         joyplot_scale = 2, gp = grid::gpar(fill = \"black\", alpha = 0.2),         trans = \"log2\", zero_replace = 1       ),       `prop Log2` = anno_tax_density(         joyplot_scale = 1.5, gp = grid::gpar(fill = \"black\", alpha = 0.2),         trans = function(ps) {           ps %>%             tax_transform(\"compositional\", zero_replace = 1) %>%             tax_transform(\"log2\", chain = TRUE)         }       )     )   ) psq %>%   tax_agg(\"Family\") %>%   cor_heatmap(     taxa = tax_top(psq, 15, by = max, rank = \"Family\"),     vars = paste0(\"var\", 1:6),     tax_anno = taxAnnotation(       Prev. = anno_tax_prev(size = grid::unit(10, \"mm\"), ylim = 0:1),       All = anno_tax_density(         size = grid::unit(20, \"mm\"),         trans = \"log10\", zero_replace = 1,         heatmap_colors = viridisLite::turbo(n = 15),         type = \"heatmap\", only_detected = FALSE       ),       Default = anno_tax_density(         size = grid::unit(20, \"mm\"),         trans = \"log10\", zero_replace = 1,         heatmap_colors = viridisLite::turbo(n = 15),         type = \"heatmap\", only_detected = TRUE       )     )   )"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/heatmaps.html","id":"sorting","dir":"Articles > Web-only","previous_headings":"Correlation heatmaps > Taxon annotations","what":"Sorting","title":"microViz annotated heatmaps","text":"default, rows columns sorted using hierarchical clustering optimal leaf ordering \"OLO_ward\". can use valid method seriation package. can suppress ordering using seriation_method = \"Identity\". default also suppresses column ordering, can set seriation_method_col = OLO_ward keep ordering.","code":"psq %>%   tax_agg(\"Family\") %>%   tax_sort(by = prev, at = \"Family\") %>%   cor_heatmap(     seriation_method = \"Identity\",     seriation_method_col = \"OLO_ward\",     taxa = tax_top(psq, 15, by = max, rank = \"Family\"),     vars = paste0(\"var\", 1:6),     tax_anno = taxAnnotation(       Prev. = anno_tax_prev(ylim = 0:1),       CLR = anno_tax_box(trans = \"clr\", zero_replace = \"halfmin\")     )   )"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/heatmaps.html","id":"taxa-annotation-side","dir":"Articles > Web-only","previous_headings":"Correlation heatmaps > Taxon annotations","what":"Taxa annotation side","title":"microViz annotated heatmaps","text":"can easily put taxa annotations another heatmap e.g. taxa_side = \"left\"  top bottom also possible, rotate heatmap. Remember swap seriation method arguments around!","code":"psq %>%   tax_agg(\"Family\") %>%   tax_sort(by = prev, at = \"Family\") %>%   cor_heatmap(     seriation_method = \"Identity\",     seriation_method_col = \"OLO_ward\",     taxa_side = \"left\",     taxa = tax_top(psq, 15, by = max, rank = \"Family\"),     vars = paste0(\"var\", 1:6),     tax_anno = taxAnnotation(       Prev. = anno_tax_prev(ylim = 0:1),       CLR = anno_tax_box(trans = \"clr\", zero_replace = \"halfmin\")     )   ) psq %>%   tax_agg(\"Family\") %>%   tax_sort(by = prev, at = \"Family\") %>%   cor_heatmap(     seriation_method_col = \"Identity\", # swapped!     seriation_method = \"OLO_ward\", # swapped!     taxa_side = \"top\",     taxa = tax_top(psq, 15, by = max, rank = \"Family\"),     vars = paste0(\"var\", 1:6),     tax_anno = taxAnnotation(       Prev. = anno_tax_prev(ylim = 0:1),       CLR = anno_tax_box(trans = \"clr\", zero_replace = \"halfmin\")     )   )"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/heatmaps.html","id":"variable-annotation","dir":"Articles > Web-only","previous_headings":"Correlation heatmaps","what":"Variable annotation","title":"microViz annotated heatmaps","text":"well annotating taxa, can also annotate variables.","code":"psq %>%   tax_agg(\"Family\") %>%   cor_heatmap(     taxa = tax_top(psq, 15, by = max, rank = \"Family\"),     vars = paste0(\"var\", 1:6),     var_anno = varAnnotation(       Value = anno_var_box(),       Zscore = anno_var_density(fun = scale, type = \"violin\")     )   )"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/heatmaps.html","id":"alternative-ggplot-correlation-heatmaps-with-p-values","dir":"Articles > Web-only","previous_headings":"Correlation heatmaps","what":"Alternative: ggplot correlation heatmaps with p-values","title":"microViz annotated heatmaps","text":"response number questions/requests annotating correlation heatmaps p-values: cor_heatmap , alternative way using tax_model.  Additionally, scale_y_dendro function legendry package can add visualisation hclust dendrogram y axis. See: https://teunbrand.github.io/legendry/reference/scale_y_dendro.html","code":"# compute correlations, with p values, and store in a dataframe correlations_df <- psq %>%    tax_model(     trans = \"clr\",     rank = \"Family\", variables = list(\"var1\", \"var2\", \"var3\", \"var4\", \"var5\"),      type = microViz::cor_test, method = \"spearman\",      return_psx = FALSE, verbose = FALSE   ) %>%    tax_models2stats(rank = \"Family\")  # get nice looking ordering of correlation estimates using hclust taxa_hclust <- correlations_df %>%    dplyr::select(term, taxon, estimate) %>%    tidyr::pivot_wider(     id_cols = taxon, names_from = term, values_from = estimate   ) %>%    tibble::column_to_rownames(\"taxon\") %>%    as.matrix() %>%    stats::dist(method = \"euclidean\") %>%    hclust(method = \"ward.D2\")   taxa_order <- taxa_hclust$labels[taxa_hclust$order] library(ggplot2)  correlations_df %>%    mutate(p.FDR = p.adjust(p.value, method = \"fdr\")) %>%    ggplot(aes(x = term, y = taxon)) +   geom_raster(aes(fill = estimate)) +   geom_point(     data = function(x) filter(x, p.value < 0.05),     shape = \"asterisk\"   ) +   geom_point(     data = function(x) filter(x, p.FDR < 0.05),     shape = \"circle\", size = 3   ) +   scale_y_discrete(limits = taxa_order) +   scale_fill_distiller(palette = \"BrBG\", limits = c(-0.45, 0.45)) +    theme_minimal() +   labs(     x = NULL, y = NULL, fill = \"Spearman's\\nRank\\nCorrelation\",     caption = paste(       \"Asterisk indicates p < 0.05, not FDR adjusted\",       \"Filled circle indicates FDR corrected p < 0.05\", sep = \"\\n\"   ))"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/heatmaps.html","id":"other-stuff","dir":"Articles > Web-only","previous_headings":"","what":"Other stuff","title":"microViz annotated heatmaps","text":"Complicated stuff demonstrated , necessarily useful.","code":""},{"path":"https://david-barnett.github.io/microViz/articles/web-only/heatmaps.html","id":"custom-breaks-and-seriation","dir":"Articles > Web-only","previous_headings":"Other stuff","what":"Custom breaks and seriation","title":"microViz annotated heatmaps","text":"Two approaches custom colour scale breaks. first way better, colour scale interpolated default 11 colours, instead 5. Transform data customise labels.  alternative way might helpful cases, maybe… demonstrates custom breaks can set heat_palette().","code":"psq %>%   tax_transform(\"compositional\", rank = \"Class\") %>%   tax_transform(\"log10\", zero_replace = \"halfmin\", chain = TRUE) %>%   comp_heatmap(     tax_anno = taxAnnotation(       Prev. = anno_tax_prev(bar_width = 0.3, size = grid::unit(1, \"cm\"))     ),     heatmap_legend_param = list(       labels = rev(c(\"100%\", \" 10%\", \"  1%\", \" 0.1%\", \"0.01%\"))     )   ) # seriation transform serTrans <- function(x) {   tax_transform(x, trans = \"log10\", zero_replace = \"halfmin\", chain = TRUE) }  psq %>%   tax_transform(\"compositional\", rank = \"Class\") %>%   comp_heatmap(     sample_ser_trans = serTrans, tax_ser_trans = serTrans,     colors = heat_palette(breaks = c(0.0001, 0.001, 0.01, 0.1, 1), rev = T),     tax_anno = taxAnnotation(       Prev. = anno_tax_prev(bar_width = 0.3, size = grid::unit(1, \"cm\"))     ),     heatmap_legend_param = list(at = c(0.0001, 0.001, 0.01, 0.1, 1), break_dist = 1)   )"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/heatmaps.html","id":"session-info","dir":"Articles > Web-only","previous_headings":"","what":"Session info","title":"microViz annotated heatmaps","text":"","code":"devtools::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.5.0 (2025-04-11) #>  os       Ubuntu 24.04.2 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  C.UTF-8 #>  ctype    C.UTF-8 #>  tz       UTC #>  date     2025-04-14 #>  pandoc   3.1.11 @ /opt/hostedtoolcache/pandoc/3.1.11/x64/ (via rmarkdown) #>  quarto   NA #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package          * version date (UTC) lib source #>  ade4               1.7-23  2025-02-14 [1] RSPM #>  ape                5.8-1   2024-12-16 [1] RSPM #>  backports          1.5.0   2024-05-23 [1] RSPM #>  Biobase            2.67.0  2024-10-29 [1] Bioconduc~ #>  BiocGenerics       0.53.6  2025-01-27 [1] Bioconduc~ #>  biomformat         1.35.0  2024-10-29 [1] Bioconduc~ #>  Biostrings         2.75.4  2025-02-21 [1] Bioconduc~ #>  broom              1.0.8   2025-03-28 [1] RSPM #>  bslib              0.9.0   2025-01-30 [1] RSPM #>  ca                 0.71.1  2020-01-24 [1] RSPM #>  cachem             1.1.0   2024-05-16 [1] RSPM #>  circlize           0.4.16  2024-02-20 [1] RSPM #>  cli                3.6.4   2025-02-13 [1] RSPM #>  clue               0.3-66  2024-11-13 [1] RSPM #>  cluster            2.1.8.1 2025-03-12 [3] CRAN (R 4.5.0) #>  codetools          0.2-20  2024-03-31 [3] CRAN (R 4.5.0) #>  colorspace         2.1-1   2024-07-26 [1] RSPM #>  ComplexHeatmap     2.23.1  2025-04-01 [1] Bioconduc~ #>  corncob            0.4.2   2025-03-29 [1] RSPM #>  crayon             1.5.3   2024-06-20 [1] RSPM #>  data.table         1.17.0  2025-02-22 [1] RSPM #>  desc               1.4.3   2023-12-10 [1] RSPM #>  devtools           2.4.5   2022-10-11 [1] RSPM #>  digest             0.6.37  2024-08-19 [1] RSPM #>  doParallel         1.0.17  2022-02-07 [1] RSPM #>  dplyr            * 1.1.4   2023-11-17 [1] RSPM #>  ellipsis           0.3.2   2021-04-29 [1] RSPM #>  evaluate           1.0.3   2025-01-10 [1] RSPM #>  farver             2.1.2   2024-05-13 [1] RSPM #>  fastmap            1.2.0   2024-05-15 [1] RSPM #>  foreach            1.5.2   2022-02-02 [1] RSPM #>  fs                 1.6.5   2024-10-30 [1] RSPM #>  generics           0.1.3   2022-07-05 [1] RSPM #>  GenomeInfoDb       1.43.4  2025-01-24 [1] Bioconduc~ #>  GenomeInfoDbData   1.2.14  2025-04-14 [1] Bioconductor #>  GetoptLong         1.0.5   2020-12-15 [1] RSPM #>  ggplot2          * 3.5.2   2025-04-09 [1] RSPM #>  GlobalOptions      0.1.2   2020-06-10 [1] RSPM #>  glue               1.8.0   2024-09-30 [1] RSPM #>  gtable             0.3.6   2024-10-25 [1] RSPM #>  htmltools          0.5.8.1 2024-04-04 [1] RSPM #>  htmlwidgets        1.6.4   2023-12-06 [1] RSPM #>  httpuv             1.6.15  2024-03-26 [1] RSPM #>  httr               1.4.7   2023-08-15 [1] RSPM #>  igraph             2.1.4   2025-01-23 [1] RSPM #>  IRanges            2.41.3  2025-02-12 [1] Bioconduc~ #>  iterators          1.0.14  2022-02-05 [1] RSPM #>  jquerylib          0.1.4   2021-04-26 [1] RSPM #>  jsonlite           2.0.0   2025-03-27 [1] RSPM #>  knitr              1.50    2025-03-16 [1] RSPM #>  labeling           0.4.3   2023-08-29 [1] RSPM #>  later              1.4.2   2025-04-08 [1] RSPM #>  lattice            0.22-6  2024-03-20 [3] CRAN (R 4.5.0) #>  lifecycle          1.0.4   2023-11-07 [1] RSPM #>  magrittr           2.0.3   2022-03-30 [1] RSPM #>  MASS               7.3-65  2025-02-28 [3] CRAN (R 4.5.0) #>  Matrix             1.7-3   2025-03-11 [3] CRAN (R 4.5.0) #>  matrixStats        1.5.0   2025-01-07 [1] RSPM #>  memoise            2.0.1   2021-11-26 [1] RSPM #>  mgcv               1.9-1   2023-12-21 [3] CRAN (R 4.5.0) #>  microbiome         1.29.0  2025-01-23 [1] Bioconduc~ #>  microViz         * 0.12.7  2025-04-14 [1] local #>  mime               0.13    2025-03-17 [1] RSPM #>  miniUI             0.1.1.1 2018-05-18 [1] RSPM #>  multtest           2.63.0  2024-10-29 [1] Bioconduc~ #>  munsell            0.5.1   2024-04-01 [1] RSPM #>  nlme               3.1-168 2025-03-31 [3] CRAN (R 4.5.0) #>  permute            0.9-7   2022-01-27 [1] RSPM #>  phyloseq         * 1.51.0  2025-01-23 [1] Bioconduc~ #>  pillar             1.10.2  2025-04-05 [1] RSPM #>  pkgbuild           1.4.7   2025-03-24 [1] RSPM #>  pkgconfig          2.0.3   2019-09-22 [1] RSPM #>  pkgdown            2.1.1   2024-09-17 [1] RSPM #>  pkgload            1.4.0   2024-06-28 [1] RSPM #>  plyr               1.8.9   2023-10-02 [1] RSPM #>  png                0.1-8   2022-11-29 [1] RSPM #>  profvis            0.4.0   2024-09-20 [1] RSPM #>  promises           1.3.2   2024-11-28 [1] RSPM #>  purrr              1.0.4   2025-02-05 [1] RSPM #>  R6                 2.6.1   2025-02-15 [1] RSPM #>  ragg               1.4.0   2025-04-10 [1] RSPM #>  RColorBrewer       1.1-3   2022-04-03 [1] RSPM #>  Rcpp               1.0.14  2025-01-12 [1] RSPM #>  registry           0.5-1   2019-03-05 [1] RSPM #>  remotes            2.5.0   2024-03-17 [1] RSPM #>  reshape2           1.4.4   2020-04-09 [1] RSPM #>  rhdf5              2.51.2  2025-01-08 [1] Bioconduc~ #>  rhdf5filters       1.19.2  2025-03-05 [1] Bioconduc~ #>  Rhdf5lib           1.29.2  2025-03-24 [1] Bioconduc~ #>  rjson              0.2.23  2024-09-16 [1] RSPM #>  rlang              1.1.5   2025-01-17 [1] RSPM #>  rmarkdown          2.29    2024-11-04 [1] RSPM #>  Rtsne              0.17    2023-12-07 [1] RSPM #>  S4Vectors          0.45.4  2025-02-11 [1] Bioconduc~ #>  sass               0.4.9   2024-03-15 [1] RSPM #>  scales             1.3.0   2023-11-28 [1] RSPM #>  seriation          1.5.7   2024-12-05 [1] RSPM #>  sessioninfo        1.2.3   2025-02-05 [1] RSPM #>  shape              1.4.6.1 2024-02-23 [1] RSPM #>  shiny              1.10.0  2024-12-14 [1] RSPM #>  stringi            1.8.7   2025-03-27 [1] RSPM #>  stringr            1.5.1   2023-11-14 [1] RSPM #>  survival           3.8-3   2024-12-17 [3] CRAN (R 4.5.0) #>  systemfonts        1.2.2   2025-04-04 [1] RSPM #>  textshaping        1.0.0   2025-01-20 [1] RSPM #>  tibble             3.2.1   2023-03-20 [1] RSPM #>  tidyr              1.3.1   2024-01-24 [1] RSPM #>  tidyselect         1.2.1   2024-03-11 [1] RSPM #>  TSP                1.2-4   2023-04-04 [1] RSPM #>  UCSC.utils         1.3.1   2025-01-15 [1] Bioconduc~ #>  urlchecker         1.0.1   2021-11-30 [1] RSPM #>  usethis            3.1.0   2024-11-26 [1] RSPM #>  vctrs              0.6.5   2023-12-01 [1] RSPM #>  vegan              2.6-10  2025-01-29 [1] RSPM #>  viridisLite        0.4.2   2023-05-02 [1] RSPM #>  withr              3.0.2   2024-10-28 [1] RSPM #>  xfun               0.52    2025-04-02 [1] RSPM #>  xtable             1.8-4   2019-04-21 [1] RSPM #>  XVector            0.47.2  2025-01-08 [1] Bioconduc~ #>  yaml               2.3.10  2024-07-26 [1] RSPM #>  #>  [1] /home/runner/work/_temp/Library #>  [2] /opt/R/4.5.0/lib/R/site-library #>  [3] /opt/R/4.5.0/lib/R/library #>  * ── Packages attached to the search path. #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/modelling-taxa.html","id":"warning-do-not-copy-taxatree_models-examples-from-versions-before-0-11-0","dir":"Articles > Web-only","previous_headings":"","what":"Warning: do not copy taxatree_models examples from versions before 0.11.0","title":"Statistical modelling of individual taxa","text":"documentation earlier versions microViz included incorrect example taxatree_models use. Specifically, accidentally demonstrated log transforming abundance data aggregation. Sincere apologies anyone followed incorrect procedure. Examples corrected microViz docs website version 0.11.0 later. Please reach questions issue. article give example statistical modelling abundances individual taxa, visual presentation results using microViz taxonomic association tree plots.","code":""},{"path":"https://david-barnett.github.io/microViz/articles/web-only/modelling-taxa.html","id":"setup","dir":"Articles > Web-only","previous_headings":"","what":"Setup","title":"Statistical modelling of individual taxa","text":"First ’ll get OTU abundance data inflammatory bowel disease patients controls corncob package. ’ll keep Ulcerative Colitis Healthy Control samples, simplify analyses example. ’ll also remove Species rank information, OTUs dataset assigned species. ’ll also use tax_fix fill gaps Genus unknown, family name whatever higher rank classification known. Let’s quick look sample data using skimr package. Data summary Variable type: factor Variable type: numeric Let’s make sample data variables easier use compare statistical modelling ahead. convert dichotomous categorical variables similar binary variables (values: 1 true, 0 false). also scale center numeric variable age.","code":"library(microViz) #> microViz version 0.12.7 - Copyright (C) 2021-2025 David Barnett #> ! Website: https://david-barnett.github.io/microViz #> ✔ Useful?  For citation details, run: `citation(\"microViz\")` #> ✖ Silence? `suppressPackageStartupMessages(library(microViz))` library(corncob) library(dplyr) #>  #> Attaching package: 'dplyr' #>  #> The following objects are masked from 'package:stats': #>  #>     filter, lag #>  #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2) data(\"ibd\") ibd #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 36349 taxa and 91 samples ] #> sample_data() Sample Data:       [ 91 samples by 15 sample variables ] #> tax_table()   Taxonomy Table:    [ 36349 taxa by 7 taxonomic ranks ] phylo <- ibd %>%   ps_filter(DiseaseState %in% c(\"UC\", \"nonIBD\")) %>%   tax_mutate(Species = NULL) %>%   tax_fix() phylo #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 29304 taxa and 67 samples ] #> sample_data() Sample Data:       [ 67 samples by 15 sample variables ] #> tax_table()   Taxonomy Table:    [ 29304 taxa by 6 taxonomic ranks ] phylo %>%   samdat_tbl() %>%   dplyr::mutate(across(where(is.character), as.factor)) %>%   skimr::skim() #> Warning: There was 1 warning in `dplyr::summarize()`. #> ℹ In argument: `dplyr::across(tidyselect::any_of(variable_names), #>   mangled_skimmers$funs)`. #> ℹ In group 0: . #> Caused by warning: #> ! There was 1 warning in `dplyr::summarize()`. #> ℹ In argument: `dplyr::across(tidyselect::any_of(variable_names), #>   mangled_skimmers$funs)`. #> Caused by warning in `sorted_count()`: #> ! Variable contains value(s) of \"\" that have been converted to \"empty\". phylo <- phylo %>%   ps_mutate(     UC = ifelse(DiseaseState == \"UC\", yes = 1, no = 0),     female = ifelse(gender == \"female\", yes = 1, no = 0),     antibiotics = ifelse(abx == \"abx\", yes = 1, no = 0),     steroids = ifelse(steroids == \"steroids\", yes = 1, no = 0),     age_scaled = scale(age, center = TRUE, scale = TRUE)   )"},{"path":[]},{"path":"https://david-barnett.github.io/microViz/articles/web-only/modelling-taxa.html","id":"tss-log2-linear-regression","dir":"Articles > Web-only","previous_headings":"Modelling one taxon at a time","what":"TSS log2 linear regression","title":"Statistical modelling of individual taxa","text":"start creating linear regression model one genus, Bacteroides. transform count data first making proportions tax_transform(\"compositional\"). replace zeros half minimum observed abundance proportion (taxon) log2 transformation. second transformation step passing trans = “log2” tax_model function. two-step transformation borrowed MaAsLin2 (except MaAsLin2 compositional transformation named “Total Sum Scaling (TSS)”). model suggests Parabacteroides abundances significantly lower Ulcerative Colitis patients controls, average.","code":"parabacteroides_lm <- phylo %>%   tax_fix() %>%   tax_transform(\"compositional\", rank = \"Genus\") %>%   tax_model(     type = \"lm\", rank = \"Genus\", taxa = \"Parabacteroides\",     trans = \"log2\", trans_args = list(zero_replace = \"halfmin\"),     variables = c(\"UC\", \"female\", \"antibiotics\", \"steroids\", \"age_scaled\"),     return_psx = FALSE   ) #> Modelling: Parabacteroides parabacteroides_lm$Parabacteroides #>  #> Call: #> Parabacteroides ~ UC + female + antibiotics + steroids + age_scaled #>  #> Coefficients: #> (Intercept)           UC       female  antibiotics     steroids   age_scaled   #>    -6.36997     -4.20062     -0.62692      0.07118     -0.95014      0.19781 summary(parabacteroides_lm$Parabacteroides) #>  #> Call: #> Parabacteroides ~ UC + female + antibiotics + steroids + age_scaled #>  #> Residuals: #>    Min     1Q Median     3Q    Max  #> -7.344 -2.111 -1.308  2.297  7.492  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -6.36997    0.95271  -6.686    8e-09 *** #> UC          -4.20062    1.22791  -3.421  0.00112 **  #> female      -0.62692    0.87225  -0.719  0.47505     #> antibiotics  0.07118    1.18629   0.060  0.95235     #> steroids    -0.95014    1.11976  -0.849  0.39946     #> age_scaled   0.19781    0.49236   0.402  0.68926     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 3.452 on 61 degrees of freedom #> Multiple R-squared:  0.3109, Adjusted R-squared:  0.2545  #> F-statistic: 5.505 on 5 and 61 DF,  p-value: 0.0003018"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/modelling-taxa.html","id":"plotting-tss-log2-data","dir":"Articles > Web-only","previous_headings":"Modelling one taxon at a time","what":"Plotting TSS log2 data","title":"Statistical modelling of individual taxa","text":"Let’s boxplot transformed data see Parabacteroides association looks like crude group difference.","code":"plot_data <- phylo %>%   tax_fix() %>%   tax_transform(\"compositional\", rank = \"Genus\") %>%   tax_transform(\"log2\", zero_replace = \"halfmin\", chain = TRUE) %>%   ps_get() %>%   ps_otu2samdat(\"Parabacteroides\") %>% # adds Parabacteroides as sample data!   samdat_tbl()  ggplot(plot_data, aes(x = DiseaseState, y = Parabacteroides)) +   geom_boxplot(width = 0.5, colour = \"grey35\") +   geom_jitter(width = 0.2, alpha = 0.5) +   scale_y_continuous(     breaks = log2(1 / 2^(0:13)),     labels = function(x) paste0(100 * round(2^x, digits = 5), \"%\"),     limits = c(log2(0.00005), log2(0.25))   ) +   theme_bw()"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/modelling-taxa.html","id":"beta-binomial-regression","dir":"Articles > Web-only","previous_headings":"Modelling one taxon at a time","what":"Beta binomial regression","title":"Statistical modelling of individual taxa","text":"can also use regression modelling functions take formula. example beta binomial modelling provided corncob package. approach models abundance dispersion, directly uses untransformed counts. default, microViz’s tax_model() use formula abundance dispersion modelling, can override setting phi.formula argument . See vignette(\"corncob-intro\", package = \"corncob\") info models.","code":"parabacteroides_bb <- phylo %>%   tax_fix() %>%   tax_model(     type = corncob::bbdml, rank = \"Genus\", taxa = \"Parabacteroides\",     variables = c(\"UC\", \"female\", \"antibiotics\", \"steroids\", \"age_scaled\"),     return_psx = FALSE   ) #> Modelling: Parabacteroides parabacteroides_bb$Parabacteroides #>  #> Call: #> Parabacteroides ~ UC + female + antibiotics + steroids + age_scaled #>  #>  #> Coefficients associated with abundance: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -3.22672    0.67443  -4.784 1.33e-05 *** #> UC          -1.99769    0.93236  -2.143   0.0366 *   #> female      -0.20320    0.65852  -0.309   0.7588     #> antibiotics -0.22137    1.56656  -0.141   0.8881     #> steroids     0.41015    1.47997   0.277   0.7827     #> age_scaled   0.04753    0.39951   0.119   0.9057     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #>  #> Coefficients associated with dispersion: #>             Estimate Std. Error t value Pr(>|t|)    #> (Intercept) -2.54699    0.85001  -2.996  0.00409 ** #> UC          -0.93739    1.21342  -0.773  0.44311    #> female      -0.12331    0.83238  -0.148  0.88277    #> antibiotics -0.16097    1.97520  -0.081  0.93534    #> steroids     1.57666    1.87989   0.839  0.40527    #> age_scaled  -0.02351    0.52912  -0.044  0.96472    #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #>  #> Log-likelihood: -211.25"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/modelling-taxa.html","id":"model-all-the-taxa","dir":"Articles > Web-only","previous_headings":"","what":"Model all the taxa!","title":"Statistical modelling of individual taxa","text":"Now fit similar model almost every taxon every rank. code taxatree_models quite similar tax_model. However, might need run tax_prepend_ranks ensure taxon rank always unique. example problem, Actinobacteria name Phylum Class! filter taxa? ’s less likely interested rare taxa, models rare taxon abundances likely unreliable. Reducing number taxa modelled also makes visualising results easier!","code":"lm_models <- phylo %>%   tax_fix() %>%   tax_prepend_ranks() %>%   # it makes sense to perform the compositional transformation BEFORE filtering   tax_transform(\"compositional\", rank = \"Genus\", keep_counts = TRUE) %>%   tax_filter(min_prevalence = 0.1, undetected = 0, use_counts = TRUE) %>%   taxatree_models(     type = lm,     trans = \"log2\", trans_args = list(zero_replace = \"halfmin\"),     ranks = NULL, # uses every rank available except the first     variables = c(\"UC\", \"female\", \"antibiotics\", \"steroids\", \"age_scaled\")   ) #> Proportional min_prevalence given: 0.1 --> min 7/67 samples. #> 2025-04-14 11:47:36.164267 - modelling at rank: Phylum #> 2025-04-14 11:47:36.321123 - modelling at rank: Class #> 2025-04-14 11:47:36.620646 - modelling at rank: Order #> 2025-04-14 11:47:36.915357 - modelling at rank: Family #> 2025-04-14 11:47:37.437252 - modelling at rank: Genus lm_models #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 68 taxa and 67 samples ] #> sample_data() Sample Data:       [ 67 samples by 19 sample variables ] #> tax_table()   Taxonomy Table:    [ 68 taxa by 6 taxonomic ranks ] #>  #> otu_get(counts = TRUE)        [ 68 taxa and 67 samples ] #>  #> psExtra info: #> tax_agg = \"Genus\" tax_trans = \"compositional\"  #>  #> taxatree_models list: #> Ranks: Phylum/Class/Order/Family/Genus"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/modelling-taxa.html","id":"getting-stats-from-the-models","dir":"Articles > Web-only","previous_headings":"Model all the taxa!","what":"Getting stats from the models","title":"Statistical modelling of individual taxa","text":"Next get data.frame containing regression coefficient estimates, test statistics corresponding p values regression models. function taxatree_models2stats() can type model broom::tidy() method, well beta binomial regression models calculated corncob package bbdml() function.","code":"lm_stats <- taxatree_models2stats(lm_models) lm_stats #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 68 taxa and 67 samples ] #> sample_data() Sample Data:       [ 67 samples by 19 sample variables ] #> tax_table()   Taxonomy Table:    [ 68 taxa by 6 taxonomic ranks ] #>  #> otu_get(counts = TRUE)        [ 68 taxa and 67 samples ] #>  #> psExtra info: #> tax_agg = \"Genus\" tax_trans = \"compositional\"  #>  #> taxatree_stats dataframe: #> 134 taxa at 5 ranks: Phylum, Class, Order, Family, Genus  #> 5 terms: UC, female, antibiotics, steroids, age_scaled lm_stats %>% taxatree_stats_get() #> # A tibble: 670 × 8 #>    term        taxon          rank  formula estimate std.error statistic p.value #>    <fct>       <chr>          <fct> <chr>      <dbl>     <dbl>     <dbl>   <dbl> #>  1 UC          P: Firmicutes  Phyl… `P: Fi…   0.0430     0.455    0.0945  0.925  #>  2 female      P: Firmicutes  Phyl… `P: Fi…  -0.297      0.324   -0.919   0.362  #>  3 antibiotics P: Firmicutes  Phyl… `P: Fi…  -0.793      0.440   -1.80    0.0763 #>  4 steroids    P: Firmicutes  Phyl… `P: Fi…  -0.747      0.415   -1.80    0.0771 #>  5 age_scaled  P: Firmicutes  Phyl… `P: Fi…   0.144      0.183    0.788   0.434  #>  6 UC          P: Bacteroide… Phyl… `P: Ba…  -2.58       1.63    -1.58    0.120  #>  7 female      P: Bacteroide… Phyl… `P: Ba…  -1.01       1.16    -0.870   0.388  #>  8 antibiotics P: Bacteroide… Phyl… `P: Ba…   1.52       1.58     0.962   0.340  #>  9 steroids    P: Bacteroide… Phyl… `P: Ba…  -1.67       1.49    -1.12    0.266  #> 10 age_scaled  P: Bacteroide… Phyl… `P: Ba…  -0.340      0.655   -0.519   0.605  #> # ℹ 660 more rows"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/modelling-taxa.html","id":"adjusting-p-values","dir":"Articles > Web-only","previous_headings":"Model all the taxa!","what":"Adjusting p values","title":"Statistical modelling of individual taxa","text":"Using taxatree_stats_p_adjust() function, can correct multiple testing / control false discovery rate family-wise error rate. Instead applying adjustment methods across 88 taxa models ranks, default behaviour control family-wise error rate per rank.","code":"lm_stats <- taxatree_stats_p_adjust(   data = lm_stats, method = \"BH\", grouping = \"rank\" ) # notice the new variable lm_stats %>% taxatree_stats_get() #> # A tibble: 670 × 9 #> # Groups:   rank [5] #>    term   taxon rank  formula estimate std.error statistic p.value p.adj.BH.rank #>    <fct>  <chr> <fct> <chr>      <dbl>     <dbl>     <dbl>   <dbl>         <dbl> #>  1 UC     P: F… Phyl… `P: Fi…   0.0430     0.455    0.0945  0.925          0.925 #>  2 female P: F… Phyl… `P: Fi…  -0.297      0.324   -0.919   0.362          0.569 #>  3 antib… P: F… Phyl… `P: Fi…  -0.793      0.440   -1.80    0.0763         0.386 #>  4 stero… P: F… Phyl… `P: Fi…  -0.747      0.415   -1.80    0.0771         0.386 #>  5 age_s… P: F… Phyl… `P: Fi…   0.144      0.183    0.788   0.434          0.584 #>  6 UC     P: B… Phyl… `P: Ba…  -2.58       1.63    -1.58    0.120          0.415 #>  7 female P: B… Phyl… `P: Ba…  -1.01       1.16    -0.870   0.388          0.569 #>  8 antib… P: B… Phyl… `P: Ba…   1.52       1.58     0.962   0.340          0.569 #>  9 stero… P: B… Phyl… `P: Ba…  -1.67       1.49    -1.12    0.266          0.569 #> 10 age_s… P: B… Phyl… `P: Ba…  -0.340      0.655   -0.519   0.605          0.715 #> # ℹ 660 more rows"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/modelling-taxa.html","id":"plot-all-the-taxatree_stats","dir":"Articles > Web-only","previous_headings":"","what":"Plot all the taxatree_stats!","title":"Statistical modelling of individual taxa","text":"taxatree_plots() allows plot statistics (e.g. point estimates significance) taxa models onto tree layout. taxon models organised rank, radiating central root node e.g. Phyla around center Genera outermost ring. taxatree_plots() returns list plots, can arrange one figure patchwork package example (/cowplot).","code":"lm_stats %>%   taxatree_plots(     node_size_range = c(1, 3), var_renamer = toupper   ) %>%   patchwork::wrap_plots(     ncol = 2, guides = \"collect\"   )"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/modelling-taxa.html","id":"taxatree-key","dir":"Articles > Web-only","previous_headings":"Plot all the taxatree_stats!","what":"Taxatree Key","title":"Statistical modelling of individual taxa","text":"know taxa nodes? can create labelled grey tree taxatree_plotkey. labels taxa based certain conditions.","code":"set.seed(123) # label position key <- taxatree_plotkey(   data = lm_stats,   taxon_renamer = function(x) stringr::str_remove(x, \"[PFG]: \"),   # 2 lines of conditions below, for filtering taxa to be labelled   rank == \"Phylum\" | rank == \"Genus\" & prevalence > 0.25,   !grepl(\"Kingdom\", taxon) ) +   # add a bit more space for the longer labels by expanding the x axis   scale_x_continuous(expand = expansion(mult = 0.2)) # all phyla are labelled, and all genera with a prevalence of over 0.2 # except for any taxa whose names (partly) match \"Kingdom\" # (i.e. an unclassified taxon) key"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/modelling-taxa.html","id":"key-trees","dir":"Articles > Web-only","previous_headings":"Plot all the taxatree_stats! > Taxatree Key","what":"Key + Trees","title":"Statistical modelling of individual taxa","text":"Let’s put key trees together one patchwork figure. Getting sizing right combined plots can tricky! Pay attention absolute height width plot output. gridExtra::grid.arrange() cowplot::plot_grid() alternatives can also try. cowplot::get_legend() can particularly useful.  save plot ggsave() like .","code":"trees <- lm_stats %>%   taxatree_plots(node_size_range = c(1, 2.25)) %>%   .[1:4] %>%   patchwork::wrap_plots(     ncol = 2, guides = \"collect\"   )  panel <- patchwork::wrap_plots(key, trees, nrow = 1, widths = 8:7) set.seed(111) panel set.seed(111) ggsave(\"test.png\", panel, width = 13, height = 5.5, dpi = 120, device = \"png\")"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/modelling-taxa.html","id":"alternative-label-styling","dir":"Articles > Web-only","previous_headings":"Plot all the taxatree_stats! > Taxatree Key","what":"Alternative label styling","title":"Statistical modelling of individual taxa","text":"can change default styling labels first suppressing automatic drawing labels .draw_label = FALSE taxatree_plotkey() adding custom-style labels taxatree_plot_labels(). draw yellow labels.","code":"taxatree_plotkey(   data = lm_stats, .draw_label = FALSE,   rank %in% c(\"Phylum\", \"Family\") & !grepl(\"Bacteria\", taxon),   prevalence > 0.2 | rank == \"Phylum\" ) %>%   taxatree_plot_labels(     taxon_renamer = function(x) stringr::str_remove(x, \"[PFGO]: \"),     # default fun is ggrepel::geom_text_repel     fun = ggrepel::geom_label_repel,     # arguments modifying label style     size = 2.5, alpha = 0.5, colour = \"black\", fill = \"gold1\",     label.size = 0.05, label.r = unit(0.05, \"lines\"),     label.padding = unit(0.15, \"lines\"), segment.size = 0.5,     # arguments affecting label positioning     box.padding = 0.05, x_nudge = 0.4, y_nudge = 0.05,     hjust = 0.5, seed = 123   )"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/modelling-taxa.html","id":"directly-labelling-taxa","dir":"Articles > Web-only","previous_headings":"Plot all the taxatree_stats!","what":"Directly labelling taxa","title":"Statistical modelling of individual taxa","text":"can directly label taxatree_plots , better taxa. must run taxatree_label() first create “label” indicator variable.","code":"lm_stats %>%   taxatree_label(     rank == \"Genus\", p.value < 0.05 | prevalence > 0.5, estimate > 0   ) %>%   taxatree_plots() %>%   .[[1]] %>% # show only the first plot   taxatree_plot_labels(     taxon_renamer = function(x) stringr::str_remove(x, \"G: \"),     fun = ggrepel::geom_label_repel, x_nudge = 0.7, hjust = 0.5, size = 2   )"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/modelling-taxa.html","id":"changing-color-palette","dir":"Articles > Web-only","previous_headings":"Plot all the taxatree_stats!","what":"Changing color palette","title":"Statistical modelling of individual taxa","text":"Choosing another color palette easy, just name diverging palette colorspace hcl diverging palettes. See options .  default, colour scale transformed taking square root absolute values. can change “identity” palette transformation. default range data used set symmetrical limits colour scale, plots list produced. can set alternative limits. data lie outside limits, values “squished” match max min limit value. finer control palette luminance range, can set custom values l1 l2, e.g. extremes bright dark. done default Green-Brown palette.  Palettes like “Berlin” go black midpoint probably make sense darker background!","code":"colorspace::hcl_palettes(type = \"diverging\", plot = TRUE, n = 11) lm_stats %>%   taxatree_label(     rank == \"Genus\", p.value < 0.05 | prevalence > 0.5, estimate > 0   ) %>%   taxatree_plots(     colour_lims = c(-5, 5), colour_trans = \"identity\",     palette = \"Blue-Red 3\", l2 = 90   ) %>%   .[[1]] %>% # show only the first plot   taxatree_plot_labels(     taxon_renamer = function(x) stringr::str_remove(x, \"G: \"),     fun = ggrepel::geom_label_repel, x_nudge = 0.7, hjust = 0.5, size = 2   ) lm_stats %>%   taxatree_label(     rank == \"Genus\", p.value < 0.05 | prevalence > 0.5, estimate > 0   ) %>%   taxatree_plots(     palette = \"Berlin\", colour_lims = c(-5, 5), size_guide = NULL   ) %>%   .[[1]] %>% # show only the first plot   taxatree_plot_labels(     taxon_renamer = function(x) stringr::str_remove(x, \"G: \"),     fun = ggrepel::geom_label_repel,     x_nudge = 0.7, xlim = c(-1.7, 1.5), hjust = 0.5, size = 2   ) +   theme(     text = element_text(colour = \"white\"),     plot.background = element_rect(fill = \"grey30\"),     plot.title = element_text(size = 20, colour = \"white\")   )"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/modelling-taxa.html","id":"sorting-taxa-nodes","dir":"Articles > Web-only","previous_headings":"Plot all the taxatree_stats!","what":"Sorting taxa nodes","title":"Statistical modelling of individual taxa","text":"like, can sort nodes sorting taxa ps_extra object.  can chain multiple tax_sort() calls together fine-tune order nodes tree preference.","code":"lm_stats %>%   tax_sort(by = \"prev\", at = \"Genus\") %>%   taxatree_plots() %>%   .[[1]] # show only the first plot lm_stats %>%   tax_sort(by = \"prev\", at = \"Family\") %>%   tax_sort(by = \"name\", at = \"Phylum\") %>%   tax_sort(by = \"rev\") %>%   taxatree_plots() %>%   .[[1]] # show only the first plot"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/modelling-taxa.html","id":"plotting-adjusted-p-values","dir":"Articles > Web-only","previous_headings":"Plot all the taxatree_stats!","what":"Plotting adjusted p values","title":"Statistical modelling of individual taxa","text":"Remember made adjusted p values earlier? Let’s plot instead. Just show ’s done, ’ll also change symbol used identify significant sites cross, ’ll also relax significance threshold 0.1. looks like disease state (ulcerative colitis) shows significant associations FDR correction.","code":"lm_stats %>%   taxatree_plots(     sig_stat = \"p.adj.BH.rank\", sig_threshold = 0.1,     sig_shape = \"cross\", sig_size = 1.5,     node_size_range = c(1, 3), var_renamer = toupper   ) %>%   .[1:4] %>% # keep only first 4 plots   patchwork::wrap_plots(     ncol = 2, guides = \"collect\"   )"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/modelling-taxa.html","id":"plotting-multiple-significance-markers","dir":"Articles > Web-only","previous_headings":"Plot all the taxatree_stats!","what":"Plotting multiple significance markers","title":"Statistical modelling of individual taxa","text":"can also plot multiple significance markers. must start strictest threshold. plot FDR corrected significance markers p.adj < 0.05 (thick white crosses) also unadjusted significance markers p < 0.05 (outlined white circles).","code":"lm_stats %>%   taxatree_plots(     sig_stat = c(\"p.adj.BH.rank\", \"p.value\"), sig_threshold = 0.05,     sig_shape = c(\"cross\", \"circle filled\"), sig_colour = \"white\",     sig_size = c(1.5, 1), sig_stroke = c(1, 0.25),     node_size_range = c(1, 3), var_renamer = toupper   ) %>%   .[1:4] %>% # keep only first 4 plots   patchwork::wrap_plots(     ncol = 2, guides = \"collect\"   )"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/modelling-taxa.html","id":"beta-binomial-regression-example","dir":"Articles > Web-only","previous_headings":"","what":"Beta-binomial regression example","title":"Statistical modelling of individual taxa","text":"corncob package provides beta-binomial regression models. See paper , helpful package vignette: vignette(\"corncob-intro\", package = \"corncob\"). filter taxa strictly (higher prevalence threshold) type modelling. need transform data, approach uses counts. extracting stats corncob beta-binomial models, need specify parameter estimate want, “mu” differential abundance, “phi” differential variability overdispersion.","code":"bb_models <- phylo %>%   tax_fix() %>%   tax_prepend_ranks() %>%   tax_filter(min_prevalence = 0.3) %>%   taxatree_models(     type = corncob::bbdml,     ranks = c(\"Phylum\", \"Class\", \"Order\", \"Family\"),     variables = c(\"UC\", \"female\", \"antibiotics\", \"steroids\", \"age_scaled\")   ) #> Proportional min_prevalence given: 0.3 --> min 21/67 samples. #> 2025-04-14 11:48:01.367578 - modelling at rank: Phylum #> 2025-04-14 11:48:01.483169 - modelling at rank: Class #> 2025-04-14 11:48:01.666254 - modelling at rank: Order #> 2025-04-14 11:48:01.851443 - modelling at rank: Family bb_models #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 105 taxa and 67 samples ] #> sample_data() Sample Data:       [ 67 samples by 19 sample variables ] #> tax_table()   Taxonomy Table:    [ 105 taxa by 6 taxonomic ranks ] #>  #>  #> taxatree_models list: #> Ranks: Phylum/Class/Order/Family bb_stats <- taxatree_models2stats(bb_models, param = \"mu\") bb_stats #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 105 taxa and 67 samples ] #> sample_data() Sample Data:       [ 67 samples by 19 sample variables ] #> tax_table()   Taxonomy Table:    [ 105 taxa by 6 taxonomic ranks ] #>  #>  #> taxatree_stats dataframe: #> 30 taxa at 4 ranks: Phylum, Class, Order, Family  #> 5 terms: UC, female, antibiotics, steroids, age_scaled bb_stats %>% taxatree_stats_get() #> # A tibble: 150 × 9 #>    term     taxon rank  formula parameter estimate std.error t.statistic p.value #>    <fct>    <chr> <fct> <chr>   <chr>        <dbl>     <dbl>       <dbl>   <dbl> #>  1 UC       P: F… Phyl… `P: Fi… mu         -0.375      0.434     -0.864    0.392 #>  2 female   P: F… Phyl… `P: Fi… mu          0.0227     0.309      0.0734   0.942 #>  3 antibio… P: F… Phyl… `P: Fi… mu         -0.781      0.478     -1.63     0.108 #>  4 steroids P: F… Phyl… `P: Fi… mu         -0.162      0.426     -0.380    0.705 #>  5 age_sca… P: F… Phyl… `P: Fi… mu          0.294      0.188      1.56     0.124 #>  6 UC       P: B… Phyl… `P: Ba… mu         -0.814      0.558     -1.46     0.150 #>  7 female   P: B… Phyl… `P: Ba… mu         -0.559      0.349     -1.60     0.115 #>  8 antibio… P: B… Phyl… `P: Ba… mu         -0.116      0.706     -0.164    0.871 #>  9 steroids P: B… Phyl… `P: Ba… mu         -0.130      0.656     -0.197    0.844 #> 10 age_sca… P: B… Phyl… `P: Ba… mu         -0.0967     0.264     -0.366    0.716 #> # ℹ 140 more rows bb_stats %>%   taxatree_plots(     node_size_range = c(1, 4), colour_trans = \"identity\"   ) %>%   # keep only first 4 plots   .[1:4] %>%   patchwork::wrap_plots(     ncol = 2, guides = \"collect\"   )"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/modelling-taxa.html","id":"alternative-layouts","dir":"Articles > Web-only","previous_headings":"Beta-binomial regression example","what":"Alternative layouts","title":"Statistical modelling of individual taxa","text":"need make circular tree plots don’t want !  Let’s add key layout label manually taxatree_plot_labels().  don’t use regular tree! Alternative layouts igraph package possible, Kamada Kawai spring algorithm (“kk”) Fruchterman Reingold force-directed algorithm (“fr”). must set layout_seed number layouts ensure always .","code":"alt_trees <- bb_stats %>%   taxatree_plots(     node_size_range = c(1, 4), circular = FALSE, colour_trans = \"identity\"   ) %>%   # keep only first 4 plots   .[1:4] %>%   patchwork::wrap_plots(     ncol = 2, guides = \"collect\"   ) & # & is used by patchwork to modify multiple ggplots (instead of +)   coord_flip() &   scale_y_reverse()  alt_trees alt_tree_key <- bb_stats %>%   taxatree_plotkey(circular = FALSE, .draw_label = FALSE, rank == \"Family\") %>%   taxatree_plot_labels(     circular = FALSE, hjust = 0.5, force = 0, nudge_y = 2, size = 3,     taxon_renamer = function(x) stringr::str_remove(x, \"[PFG]: \")   ) +   coord_flip() +   scale_y_reverse(expand = expansion(add = c(0.5, 1.5))) +   theme(plot.title = element_text(size = 14))  patchwork::wrap_plots(alt_tree_key, alt_trees, nrow = 2, heights = 1:2) bb_stats %>%   taxatree_plots(     node_size_range = c(1, 4),     colour_trans = \"identity\", layout = \"kk\", layout_seed = 321   ) %>%   # keep only first 4 plots   .[1:4] %>%   patchwork::wrap_plots(     ncol = 2, guides = \"collect\"   )"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/modelling-taxa.html","id":"session-info","dir":"Articles > Web-only","previous_headings":"","what":"Session info","title":"Statistical modelling of individual taxa","text":"","code":"devtools::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.5.0 (2025-04-11) #>  os       Ubuntu 24.04.2 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  C.UTF-8 #>  ctype    C.UTF-8 #>  tz       UTC #>  date     2025-04-14 #>  pandoc   3.1.11 @ /opt/hostedtoolcache/pandoc/3.1.11/x64/ (via rmarkdown) #>  quarto   NA #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package            * version       date (UTC) lib source #>  ade4                 1.7-23        2025-02-14 [1] RSPM #>  ape                  5.8-1         2024-12-16 [1] RSPM #>  backports            1.5.0         2024-05-23 [1] RSPM #>  base64enc            0.1-3         2015-07-28 [1] RSPM #>  Biobase              2.67.0        2024-10-29 [1] Bioconduc~ #>  BiocGenerics         0.53.6        2025-01-27 [1] Bioconduc~ #>  biomformat           1.35.0        2024-10-29 [1] Bioconduc~ #>  Biostrings           2.75.4        2025-02-21 [1] Bioconduc~ #>  broom                1.0.8         2025-03-28 [1] RSPM #>  bslib                0.9.0         2025-01-30 [1] RSPM #>  cachem               1.1.0         2024-05-16 [1] RSPM #>  checkmate            2.3.2         2024-07-29 [1] RSPM #>  cli                  3.6.4         2025-02-13 [1] RSPM #>  cluster              2.1.8.1       2025-03-12 [3] CRAN (R 4.5.0) #>  codetools            0.2-20        2024-03-31 [3] CRAN (R 4.5.0) #>  colorspace           2.1-1         2024-07-26 [1] RSPM #>  corncob            * 0.4.2         2025-03-29 [1] RSPM #>  crayon               1.5.3         2024-06-20 [1] RSPM #>  data.table           1.17.0        2025-02-22 [1] RSPM #>  desc                 1.4.3         2023-12-10 [1] RSPM #>  detectseparation     0.3           2022-08-26 [1] RSPM #>  devtools             2.4.5         2022-10-11 [1] RSPM #>  digest               0.6.37        2024-08-19 [1] RSPM #>  dplyr              * 1.1.4         2023-11-17 [1] RSPM #>  ellipsis             0.3.2         2021-04-29 [1] RSPM #>  evaluate             1.0.3         2025-01-10 [1] RSPM #>  farver               2.1.2         2024-05-13 [1] RSPM #>  fastmap              1.2.0         2024-05-15 [1] RSPM #>  foreach              1.5.2         2022-02-02 [1] RSPM #>  fs                   1.6.5         2024-10-30 [1] RSPM #>  generics             0.1.3         2022-07-05 [1] RSPM #>  GenomeInfoDb         1.43.4        2025-01-24 [1] Bioconduc~ #>  GenomeInfoDbData     1.2.14        2025-04-14 [1] Bioconductor #>  ggforce              0.4.2         2024-02-19 [1] RSPM #>  ggplot2            * 3.5.2         2025-04-09 [1] RSPM #>  ggraph               2.2.1         2024-03-07 [1] RSPM #>  ggrepel              0.9.6         2024-09-07 [1] RSPM #>  glue                 1.8.0         2024-09-30 [1] RSPM #>  graphlayouts         1.2.2         2025-01-23 [1] RSPM #>  gridExtra            2.3           2017-09-09 [1] RSPM #>  gtable               0.3.6         2024-10-25 [1] RSPM #>  htmltools            0.5.8.1       2024-04-04 [1] RSPM #>  htmlwidgets          1.6.4         2023-12-06 [1] RSPM #>  httpuv               1.6.15        2024-03-26 [1] RSPM #>  httr                 1.4.7         2023-08-15 [1] RSPM #>  igraph               2.1.4         2025-01-23 [1] RSPM #>  IRanges              2.41.3        2025-02-12 [1] Bioconduc~ #>  iterators            1.0.14        2022-02-05 [1] RSPM #>  jquerylib            0.1.4         2021-04-26 [1] RSPM #>  jsonlite             2.0.0         2025-03-27 [1] RSPM #>  knitr                1.50          2025-03-16 [1] RSPM #>  labeling             0.4.3         2023-08-29 [1] RSPM #>  later                1.4.2         2025-04-08 [1] RSPM #>  lattice              0.22-6        2024-03-20 [3] CRAN (R 4.5.0) #>  lifecycle            1.0.4         2023-11-07 [1] RSPM #>  lpSolveAPI           5.5.2.0-17.12 2024-07-19 [1] RSPM #>  magrittr             2.0.3         2022-03-30 [1] RSPM #>  MASS                 7.3-65        2025-02-28 [3] CRAN (R 4.5.0) #>  Matrix               1.7-3         2025-03-11 [3] CRAN (R 4.5.0) #>  memoise              2.0.1         2021-11-26 [1] RSPM #>  mgcv                 1.9-1         2023-12-21 [3] CRAN (R 4.5.0) #>  microbiome           1.29.0        2025-01-23 [1] Bioconduc~ #>  microViz           * 0.12.7        2025-04-14 [1] local #>  mime                 0.13          2025-03-17 [1] RSPM #>  miniUI               0.1.1.1       2018-05-18 [1] RSPM #>  multtest             2.63.0        2024-10-29 [1] Bioconduc~ #>  munsell              0.5.1         2024-04-01 [1] RSPM #>  nlme                 3.1-168       2025-03-31 [3] CRAN (R 4.5.0) #>  numDeriv             2016.8-1.1    2019-06-06 [1] RSPM #>  patchwork            1.3.0         2024-09-16 [1] RSPM #>  permute              0.9-7         2022-01-27 [1] RSPM #>  phyloseq             1.51.0        2025-01-23 [1] Bioconduc~ #>  pillar               1.10.2        2025-04-05 [1] RSPM #>  pkgbuild             1.4.7         2025-03-24 [1] RSPM #>  pkgconfig            2.0.3         2019-09-22 [1] RSPM #>  pkgdown              2.1.1         2024-09-17 [1] RSPM #>  pkgload              1.4.0         2024-06-28 [1] RSPM #>  plyr                 1.8.9         2023-10-02 [1] RSPM #>  polyclip             1.10-7        2024-07-23 [1] RSPM #>  profvis              0.4.0         2024-09-20 [1] RSPM #>  promises             1.3.2         2024-11-28 [1] RSPM #>  purrr                1.0.4         2025-02-05 [1] RSPM #>  R6                   2.6.1         2025-02-15 [1] RSPM #>  ragg                 1.4.0         2025-04-10 [1] RSPM #>  Rcpp                 1.0.14        2025-01-12 [1] RSPM #>  registry             0.5-1         2019-03-05 [1] RSPM #>  remotes              2.5.0         2024-03-17 [1] RSPM #>  repr                 1.1.7         2024-03-22 [1] RSPM #>  reshape2             1.4.4         2020-04-09 [1] RSPM #>  rhdf5                2.51.2        2025-01-08 [1] Bioconduc~ #>  rhdf5filters         1.19.2        2025-03-05 [1] Bioconduc~ #>  Rhdf5lib             1.29.2        2025-03-24 [1] Bioconduc~ #>  rlang                1.1.5         2025-01-17 [1] RSPM #>  rmarkdown            2.29          2024-11-04 [1] RSPM #>  ROI                  1.0-1         2023-04-20 [1] RSPM #>  ROI.plugin.lpsolve   1.0-2         2023-07-07 [1] RSPM #>  Rtsne                0.17          2023-12-07 [1] RSPM #>  S4Vectors            0.45.4        2025-02-11 [1] Bioconduc~ #>  sass                 0.4.9         2024-03-15 [1] RSPM #>  scales               1.3.0         2023-11-28 [1] RSPM #>  sessioninfo          1.2.3         2025-02-05 [1] RSPM #>  shiny                1.10.0        2024-12-14 [1] RSPM #>  skimr                2.1.5         2022-12-23 [1] RSPM #>  slam                 0.1-55        2024-11-13 [1] RSPM #>  stringi              1.8.7         2025-03-27 [1] RSPM #>  stringr              1.5.1         2023-11-14 [1] RSPM #>  survival             3.8-3         2024-12-17 [3] CRAN (R 4.5.0) #>  systemfonts          1.2.2         2025-04-04 [1] RSPM #>  textshaping          1.0.0         2025-01-20 [1] RSPM #>  tibble               3.2.1         2023-03-20 [1] RSPM #>  tidygraph            1.3.1         2024-01-30 [1] RSPM #>  tidyr                1.3.1         2024-01-24 [1] RSPM #>  tidyselect           1.2.1         2024-03-11 [1] RSPM #>  trust                0.1-8         2020-01-10 [1] RSPM #>  tweenr               2.0.3         2024-02-26 [1] RSPM #>  UCSC.utils           1.3.1         2025-01-15 [1] Bioconduc~ #>  urlchecker           1.0.1         2021-11-30 [1] RSPM #>  usethis              3.1.0         2024-11-26 [1] RSPM #>  utf8                 1.2.4         2023-10-22 [1] RSPM #>  vctrs                0.6.5         2023-12-01 [1] RSPM #>  vegan                2.6-10        2025-01-29 [1] RSPM #>  viridis              0.6.5         2024-01-29 [1] RSPM #>  viridisLite          0.4.2         2023-05-02 [1] RSPM #>  withr                3.0.2         2024-10-28 [1] RSPM #>  xfun                 0.52          2025-04-02 [1] RSPM #>  xtable               1.8-4         2019-04-21 [1] RSPM #>  XVector              0.47.2        2025-01-08 [1] Bioconduc~ #>  yaml                 2.3.10        2024-07-26 [1] RSPM #>  #>  [1] /home/runner/work/_temp/Library #>  [2] /opt/R/4.5.0/lib/R/site-library #>  [3] /opt/R/4.5.0/lib/R/library #>  * ── Packages attached to the search path. #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/ordination-interactive.html","id":"example","dir":"Articles > Web-only","previous_headings":"","what":"Example","title":"Interactive Ordination Plot","text":"Example data loaded corncob package. need valid phyloseq object, run tax_fix ensure tax_table doesn’t contain problematic names. gif animation shows result running ord_explore, animation starts immediately interactively selecting “Genus” level aggregation, “clr” transformation, “PCA” ordination method “Edit” menu.","code":"pseq <- microViz::ibd %>%   tax_fix() %>%   phyloseq_validate() ord_explore(pseq)"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/ordination-interactive.html","id":"another-old-example","dir":"Articles > Web-only","previous_headings":"","what":"Another (old) example","title":"Interactive Ordination Plot","text":"Get example dataset phyloseq package clean taxa just little. Create simple Bray-Curtis PCoA explore interactively. Start interactive Shiny app. Note gif animation shown outdated version microViz. recent versions ord_explore allow editing ordination shown, generating ord_plot code.","code":"data(\"enterotype\", package = \"phyloseq\") taxa_names(enterotype)[1] <- \"Unclassified\" # replace strange \"-1\" name ps <- tax_fix(enterotype) # remove NA taxa and similar #> Row named: Unclassified #> contains no non-unknown values, returning: #> 'Unclassified' for all replaced levels. #> Consider editing this tax_table entry manually. #> Row named: Bacteria #> contains no non-unknown values, returning: #> 'Bacteria' for all replaced levels. #> Consider editing this tax_table entry manually. ord1 <- ps %>%   tax_transform(\"identity\", rank = \"Genus\") %>%   dist_calc(\"bray\") %>% # bray curtis   ord_calc() # automagically picks PCoA #> Warning: otu_table of counts is NOT available! #> Available otu_table contains 50166 values that are not non-negative integers ord_explore(data = ord1, auto_caption = NA)"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/ordination-interactive.html","id":"session-info","dir":"Articles > Web-only","previous_headings":"","what":"Session info","title":"Interactive Ordination Plot","text":"","code":"devtools::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.5.0 (2025-04-11) #>  os       Ubuntu 24.04.2 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  C.UTF-8 #>  ctype    C.UTF-8 #>  tz       UTC #>  date     2025-04-14 #>  pandoc   3.1.11 @ /opt/hostedtoolcache/pandoc/3.1.11/x64/ (via rmarkdown) #>  quarto   NA #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package          * version date (UTC) lib source #>  ade4               1.7-23  2025-02-14 [1] RSPM #>  ape                5.8-1   2024-12-16 [1] RSPM #>  Biobase            2.67.0  2024-10-29 [1] Bioconduc~ #>  BiocGenerics       0.53.6  2025-01-27 [1] Bioconduc~ #>  biomformat         1.35.0  2024-10-29 [1] Bioconduc~ #>  Biostrings         2.75.4  2025-02-21 [1] Bioconduc~ #>  bslib              0.9.0   2025-01-30 [1] RSPM #>  cachem             1.1.0   2024-05-16 [1] RSPM #>  cli                3.6.4   2025-02-13 [1] RSPM #>  cluster            2.1.8.1 2025-03-12 [3] CRAN (R 4.5.0) #>  codetools          0.2-20  2024-03-31 [3] CRAN (R 4.5.0) #>  colorspace         2.1-1   2024-07-26 [1] RSPM #>  crayon             1.5.3   2024-06-20 [1] RSPM #>  data.table         1.17.0  2025-02-22 [1] RSPM #>  desc               1.4.3   2023-12-10 [1] RSPM #>  devtools           2.4.5   2022-10-11 [1] RSPM #>  digest             0.6.37  2024-08-19 [1] RSPM #>  dplyr              1.1.4   2023-11-17 [1] RSPM #>  ellipsis           0.3.2   2021-04-29 [1] RSPM #>  evaluate           1.0.3   2025-01-10 [1] RSPM #>  fastmap            1.2.0   2024-05-15 [1] RSPM #>  foreach            1.5.2   2022-02-02 [1] RSPM #>  fs                 1.6.5   2024-10-30 [1] RSPM #>  generics           0.1.3   2022-07-05 [1] RSPM #>  GenomeInfoDb       1.43.4  2025-01-24 [1] Bioconduc~ #>  GenomeInfoDbData   1.2.14  2025-04-14 [1] Bioconductor #>  ggplot2            3.5.2   2025-04-09 [1] RSPM #>  glue               1.8.0   2024-09-30 [1] RSPM #>  gtable             0.3.6   2024-10-25 [1] RSPM #>  htmltools          0.5.8.1 2024-04-04 [1] RSPM #>  htmlwidgets        1.6.4   2023-12-06 [1] RSPM #>  httpuv             1.6.15  2024-03-26 [1] RSPM #>  httr               1.4.7   2023-08-15 [1] RSPM #>  igraph             2.1.4   2025-01-23 [1] RSPM #>  IRanges            2.41.3  2025-02-12 [1] Bioconduc~ #>  iterators          1.0.14  2022-02-05 [1] RSPM #>  jquerylib          0.1.4   2021-04-26 [1] RSPM #>  jsonlite           2.0.0   2025-03-27 [1] RSPM #>  knitr              1.50    2025-03-16 [1] RSPM #>  later              1.4.2   2025-04-08 [1] RSPM #>  lattice            0.22-6  2024-03-20 [3] CRAN (R 4.5.0) #>  lifecycle          1.0.4   2023-11-07 [1] RSPM #>  magrittr           2.0.3   2022-03-30 [1] RSPM #>  MASS               7.3-65  2025-02-28 [3] CRAN (R 4.5.0) #>  Matrix             1.7-3   2025-03-11 [3] CRAN (R 4.5.0) #>  memoise            2.0.1   2021-11-26 [1] RSPM #>  mgcv               1.9-1   2023-12-21 [3] CRAN (R 4.5.0) #>  microbiome         1.29.0  2025-01-23 [1] Bioconduc~ #>  microViz         * 0.12.7  2025-04-14 [1] local #>  mime               0.13    2025-03-17 [1] RSPM #>  miniUI             0.1.1.1 2018-05-18 [1] RSPM #>  multtest           2.63.0  2024-10-29 [1] Bioconduc~ #>  munsell            0.5.1   2024-04-01 [1] RSPM #>  nlme               3.1-168 2025-03-31 [3] CRAN (R 4.5.0) #>  permute            0.9-7   2022-01-27 [1] RSPM #>  phyloseq         * 1.51.0  2025-01-23 [1] Bioconduc~ #>  pillar             1.10.2  2025-04-05 [1] RSPM #>  pkgbuild           1.4.7   2025-03-24 [1] RSPM #>  pkgconfig          2.0.3   2019-09-22 [1] RSPM #>  pkgdown            2.1.1   2024-09-17 [1] RSPM #>  pkgload            1.4.0   2024-06-28 [1] RSPM #>  plyr               1.8.9   2023-10-02 [1] RSPM #>  profvis            0.4.0   2024-09-20 [1] RSPM #>  promises           1.3.2   2024-11-28 [1] RSPM #>  purrr              1.0.4   2025-02-05 [1] RSPM #>  R6                 2.6.1   2025-02-15 [1] RSPM #>  ragg               1.4.0   2025-04-10 [1] RSPM #>  Rcpp               1.0.14  2025-01-12 [1] RSPM #>  remotes            2.5.0   2024-03-17 [1] RSPM #>  reshape2           1.4.4   2020-04-09 [1] RSPM #>  rhdf5              2.51.2  2025-01-08 [1] Bioconduc~ #>  rhdf5filters       1.19.2  2025-03-05 [1] Bioconduc~ #>  Rhdf5lib           1.29.2  2025-03-24 [1] Bioconduc~ #>  rlang              1.1.5   2025-01-17 [1] RSPM #>  rmarkdown          2.29    2024-11-04 [1] RSPM #>  Rtsne              0.17    2023-12-07 [1] RSPM #>  S4Vectors          0.45.4  2025-02-11 [1] Bioconduc~ #>  sass               0.4.9   2024-03-15 [1] RSPM #>  scales             1.3.0   2023-11-28 [1] RSPM #>  sessioninfo        1.2.3   2025-02-05 [1] RSPM #>  shiny              1.10.0  2024-12-14 [1] RSPM #>  stringi            1.8.7   2025-03-27 [1] RSPM #>  stringr            1.5.1   2023-11-14 [1] RSPM #>  survival           3.8-3   2024-12-17 [3] CRAN (R 4.5.0) #>  systemfonts        1.2.2   2025-04-04 [1] RSPM #>  textshaping        1.0.0   2025-01-20 [1] RSPM #>  tibble             3.2.1   2023-03-20 [1] RSPM #>  tidyr              1.3.1   2024-01-24 [1] RSPM #>  tidyselect         1.2.1   2024-03-11 [1] RSPM #>  UCSC.utils         1.3.1   2025-01-15 [1] Bioconduc~ #>  urlchecker         1.0.1   2021-11-30 [1] RSPM #>  usethis            3.1.0   2024-11-26 [1] RSPM #>  vctrs              0.6.5   2023-12-01 [1] RSPM #>  vegan              2.6-10  2025-01-29 [1] RSPM #>  withr              3.0.2   2024-10-28 [1] RSPM #>  xfun               0.52    2025-04-02 [1] RSPM #>  xtable             1.8-4   2019-04-21 [1] RSPM #>  XVector            0.47.2  2025-01-08 [1] Bioconduc~ #>  yaml               2.3.10  2024-07-26 [1] RSPM #>  #>  [1] /home/runner/work/_temp/Library #>  [2] /opt/R/4.5.0/lib/R/site-library #>  [3] /opt/R/4.5.0/lib/R/library #>  * ── Packages attached to the search path. #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/ordination.html","id":"intro","dir":"Articles > Web-only","previous_headings":"","what":"Intro","title":"Ordination plots","text":"article show create customise ordination plots, like PCA RDA, microViz. even quicker start ordinating phyloseq data, check ord_explore Shiny app, allows create ordination plots point click interface, generates ord_plot code copy. Return article understand creating customising ordination plotting script. use example data stool samples inflammatory bowel disease (IBD) study, borrowed great corncob package. See article working phyloseq objects want get started data, just learn manipulating phyloseq objects microViz. First fix uninformative tax_table entries check phyloseq object (see article fixing tax_table info).","code":"library(phyloseq) library(ggplot2) library(microViz) #> microViz version 0.12.7 - Copyright (C) 2021-2025 David Barnett #> ! Website: https://david-barnett.github.io/microViz #> ✔ Useful?  For citation details, run: `citation(\"microViz\")` #> ✖ Silence? `suppressPackageStartupMessages(library(microViz))` knitr::opts_chunk$set(fig.width = 7, fig.height = 6) ibd <- microViz::ibd ibd #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 36349 taxa and 91 samples ] #> sample_data() Sample Data:       [ 91 samples by 15 sample variables ] #> tax_table()   Taxonomy Table:    [ 36349 taxa by 7 taxonomic ranks ] ibd <- tax_fix(ibd) # try tax_fix_interactive if you have problems with your own data ibd <- phyloseq_validate(ibd, remove_undetected = TRUE)"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/ordination.html","id":"motivation","dir":"Articles > Web-only","previous_headings":"","what":"Motivation","title":"Ordination plots","text":"Ordination plots great way see clustering patterns microbiota (dis)similarity (many) samples. Ordinations like PCA PCoA show largest patterns variation data, constrained ordination techniques like RDA CCA can show microbial variation explained variables sample_data (interpret constrained ordinations care, ideally test statistical significance hypothesised associations using method like PERMANOVA, see dist_permanova()). Check GUide STatistical Analysis Microbial Ecology (GUSTA )website gentle theoretical introduction PCA, PCoA, RDA, CCA . Ordination plots can also paired barplots greater insight microbial compositions, e.g. see ord_plot_iris() ord_explore() interactive Shiny app.","code":""},{"path":"https://david-barnett.github.io/microViz/articles/web-only/ordination.html","id":"prepare-your-microbes","dir":"Articles > Web-only","previous_headings":"","what":"Prepare your microbes","title":"Ordination plots","text":"creating ordination plot, first need prepare microbiota variables. Decide taxonomic rank aggregate data, e.g. “Genus” Consider transforming microbial counts, e.g. using “clr” (centred log ratio) transformation, often recommended compositional data (like sequencing data) methods, PCoA, require matrix pairwise distances samples, can easily calculate dist_calc(). Normally transform data using distance-based method, useful record “identity” transformation anyway, make clear transformed data. dissimilarity measures, unweighted UniFrac, consider abundance taxon calculating dissimilarity, may (overly) sensitive differences rare/low-abundance taxa. might want filter rare taxa, tax_filter() using dist_calc(ps, dist = \"unifrac\"). Distances (implicitly) abundance weighted, including Generalised UniFrac, Bray-Curtis Aitchison distance, less sensitive rare taxa / filtering threshold choices.","code":"ibd %>%   tax_transform(trans = \"clr\", rank = \"Genus\") #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 178 taxa and 91 samples ] #> sample_data() Sample Data:       [ 91 samples by 15 sample variables ] #> tax_table()   Taxonomy Table:    [ 178 taxa by 6 taxonomic ranks ] #>  #> otu_get(counts = TRUE)        [ 178 taxa and 91 samples ] #>  #> psExtra info: #> tax_agg = \"Genus\" tax_trans = \"clr\" ibd %>%   tax_transform(trans = \"identity\", rank = \"Genus\") %>%   dist_calc(\"bray\") # bray curtis distance #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 178 taxa and 91 samples ] #> sample_data() Sample Data:       [ 91 samples by 15 sample variables ] #> tax_table()   Taxonomy Table:    [ 178 taxa by 6 taxonomic ranks ] #>  #> psExtra info: #> tax_agg = \"Genus\" tax_trans = \"identity\"  #>  #> bray distance matrix of size 91  #> 0.8294664 0.7156324 0.5111652 0.5492537 0.8991251 ..."},{"path":"https://david-barnett.github.io/microViz/articles/web-only/ordination.html","id":"psextra","dir":"Articles > Web-only","previous_headings":"Prepare your microbes","what":"psExtra","title":"Ordination plots","text":"Notice objects created class “psExtra”. S4 class object holds phyloseq object additional slots stuff created phyloseq object, distance matrix, well info transformation aggregation applied taxa. microViz uses automatically create plot captions, help collaborators remember made plot! can access phyloseq object, distance matrix parts psExtra object ps_get(), dist_get(), friends.","code":""},{"path":"https://david-barnett.github.io/microViz/articles/web-only/ordination.html","id":"pca","dir":"Articles > Web-only","previous_headings":"","what":"PCA - Principal Components Analysis","title":"Ordination plots","text":"Principal Components Analysis unconstrained method use distance matrix. PCA directly uses (transformed) microbial variables, need dist_calc(). ord_calc performs ordination (adding psExtra object) ord_plot() creates ggplot2 scatterplot (can customise like ggplot objects). point sample, samples appear closer together typically similar samples apart. colouring points IBD status can see microbiota people IBD often, always, highly distinct people without IBD.  One benefit using distance matrix, can plot taxa “loadings” onto PCA axes, using plot_taxa argument. microViz plots taxa loading vectors light grey, choose many vectors label, starting longest arrows (alternatively can name particular taxa label). relative length loading vector indicates contribution PCA axis shown, allows roughly estimate samples contain taxon e.g. samples left plot , typically contain Escherichia/Shigella samples right, taxon contributes heavily PC1 axis.  microViz also allows directly visualize sample compositions circular barplot “iris plot” (named looks kinda like eyeball) alongside PCA plot. samples iris plot automatically arranged rotational position around center/origin PCA plot.  created ordination plot quick accompaniment circular barchart, flexible create customise ordination plot iris plot separately, pair afterwards patchwork. See ord_plot_iris docs examples.","code":"ibd %>%   tax_transform(\"clr\", rank = \"Genus\") %>%   # when no distance matrix or constraints are supplied, PCA is the default/auto ordination method   ord_calc() %>%   ord_plot(color = \"ibd\", shape = \"DiseaseState\", size = 2) +   scale_colour_brewer(palette = \"Dark2\") ibd %>%   tax_transform(\"clr\", rank = \"Genus\") %>%   # when no distance matrix or constraints are supplied, PCA is the default/auto ordination method   ord_calc(method = \"PCA\") %>%   ord_plot(color = \"ibd\", shape = \"DiseaseState\", plot_taxa = 1:5, size = 2) +   scale_colour_brewer(palette = \"Dark2\") ibd %>%   tax_transform(\"clr\", rank = \"Genus\") %>%   # when no distance matrix or constraints are supplied, PCA is the default/auto ordination method   ord_calc() %>%   ord_plot_iris(tax_level = \"Genus\", ord_plot = \"above\", anno_colour = \"ibd\")"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/ordination.html","id":"pcoa","dir":"Articles > Web-only","previous_headings":"","what":"PCoA - Principal Co-ordinates Analysis","title":"Ordination plots","text":"Principal Co-ordinates Analysis also unconstrained method, require distance matrix. ecological context, distance (generally “dissimilarity”) measure indicates different pair (microbial) ecosystems . can calculated many ways.","code":""},{"path":"https://david-barnett.github.io/microViz/articles/web-only/ordination.html","id":"aitchison-distance","dir":"Articles > Web-only","previous_headings":"PCoA - Principal Co-ordinates Analysis","what":"Aitchison distance","title":"Ordination plots","text":"Euclidean distance similar distance humans familiar physical world. results PCA practically equivalent PCoA Euclidean distances. Aitchison distance dissimilarity measure calculated Euclidean distance observations (samples) performing centered log ratio (“clr”) transformation. Aitchison distance PCoA, , looks PCA made earlier. However, use plot_taxa, taxa loadings available PCA (related methods like RDA).  Note PCoA also known MDS, (metric) Multi-Dimensional Scaling, hence axes names.","code":"ibd %>%   tax_transform(\"identity\", rank = \"Genus\") %>% # don't transform!   dist_calc(\"aitchison\") %>%   ord_calc(\"PCoA\") %>%   ord_plot(color = \"ibd\", shape = \"DiseaseState\", size = 2) +   scale_colour_brewer(palette = \"Dark2\")"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/ordination.html","id":"ecological-dissimilarities","dir":"Articles > Web-only","previous_headings":"PCoA - Principal Co-ordinates Analysis","what":"Ecological dissimilarities","title":"Ordination plots","text":"years, ecologists invented numerous ways quantifying dissimilarity pairs ecosystems. One ubiquitous example Bray-Curtis dissimilarity measure, shown .  Beyond Bray-Curtis, microViz dist_calc() can also help calculate ecological distances listed phyloseq::distanceMethodList Jensen-Shannon Divergence, \"jsd\", Jaccard dissimilarity \"jaccard\". Beware want binary dissimilarity measure vegan::vegdist() (.e. using presence/absence info, noting caveats sensitivity low abundance taxa) need pass binary = TRUE, .","code":"ibd %>%   tax_transform(\"identity\", rank = \"Genus\") %>% # don't transform!   dist_calc(\"bray\") %>%   ord_calc(\"PCoA\") %>%   ord_plot(color = \"ibd\", shape = \"DiseaseState\", size = 2) +   scale_colour_brewer(palette = \"Dark2\") ibd %>%   tax_transform(\"identity\", rank = \"Genus\") %>%   dist_calc(dist = \"jaccard\", binary = TRUE) %>%   ord_calc(\"PCoA\") %>%   ord_plot(color = \"ibd\", shape = \"DiseaseState\", size = 2) +   scale_colour_brewer(palette = \"Dark2\")"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/ordination.html","id":"unifrac-distances","dir":"Articles > Web-only","previous_headings":"PCoA - Principal Co-ordinates Analysis","what":"UniFrac distances","title":"Ordination plots","text":"phylogenetic tree available, attached phyloseq object. can calculate dissimilarities UniFrac family methods, take account phylogenetic relatedness taxa / sequences samples calculating dissimilarity. Un-weighted UniFrac, dist_calc(dist = \"unifrac\"), consider relative abundance taxa, presence (detection) absence, can make (overly) sensitive rare taxa, sequencing artefacts, abundance filtering choices. Conversely, weighted UniFrac, \"wunifrac\", put (perhaps much) importance highly abundant taxa, determining dissimilarities. Generalised UniFrac, \"gunifrac\", finds balance two extremes, adjusting gunifrac_alpha argument dist_calc(), can tune balance liking (although 0.5 default fine!). Generalised UniFrac example using different, tiny, example dataset phyloseq package phylogenetic tree. aggregate taxa using phylogenetic distance measure, can probably register choice transform aggregate, .","code":"data(\"esophagus\", package = \"phyloseq\") esophagus %>%   phyloseq_validate(verbose = FALSE) %>%   tax_transform(\"identity\", rank = \"unique\") %>%   dist_calc(\"gunifrac\", gunifrac_alpha = 0.5) #> Registered S3 method overwritten by 'rmutil': #>   method         from #>   print.response httr #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 58 taxa and 3 samples ] #> sample_data() Sample Data:       [ 3 samples by 1 sample variables ] #> tax_table()   Taxonomy Table:    [ 58 taxa by 1 taxonomic ranks ] #> phy_tree()    Phylogenetic Tree: [ 58 tips and 57 internal nodes ] #>  #> psExtra info: #> tax_agg = \"unique\" tax_trans = \"identity\"  #>  #> gunifrac_0.5 distance matrix of size 3  #> 0.4404284 0.4332325 0.4969773 ..."},{"path":"https://david-barnett.github.io/microViz/articles/web-only/ordination.html","id":"further-dimensions","dir":"Articles > Web-only","previous_headings":"","what":"Further dimensions","title":"Ordination plots","text":"can show dimensions / axes ordination just first two, setting axes argument. can judge variation explained successive axis (scree plot) whether worthwhile information show, e.g. example , interesting also show 3rd axis, others.  Let us view 1st 3rd axes.","code":"ibd %>%   tax_transform(\"identity\", rank = \"Genus\") %>% # don't transform!   dist_calc(\"bray\") %>%   ord_calc(\"PCoA\") %>%   ord_get() %>%   phyloseq::plot_scree() + theme(axis.text.x = element_text(size = 6)) ibd %>%   tax_transform(\"identity\", rank = \"Genus\") %>% # don't transform!   dist_calc(\"bray\") %>%   ord_calc(\"PCoA\") %>%   ord_plot(axes = c(1, 3), color = \"ibd\", shape = \"DiseaseState\", size = 2) +   scale_colour_brewer(palette = \"Dark2\")"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/ordination.html","id":"univariable-distribution-side-panels","dir":"Articles > Web-only","previous_headings":"","what":"Univariable distribution side panels","title":"Ordination plots","text":"ordination figures (pretty much) just standard ggplot objects, integration ggplot extensions like ggside typically possible. couple examples using ggside package add univariable distribution plots PC, split groups main plot.","code":""},{"path":"https://david-barnett.github.io/microViz/articles/web-only/ordination.html","id":"side-panel-boxplots","dir":"Articles > Web-only","previous_headings":"Univariable distribution side panels","what":"Side panel boxplots","title":"Ordination plots","text":"","code":"ibd %>%   tax_transform(\"identity\", rank = \"Genus\") %>%   dist_calc(dist = \"aitchison\") %>%   ord_calc(\"PCoA\") %>%   ord_plot(color = \"ibd\", shape = \"DiseaseState\", size = 2) +   scale_colour_brewer(palette = \"Dark2\", aesthetics = c(\"fill\", \"colour\")) +   theme_bw() +   ggside::geom_xsideboxplot(aes(fill = ibd, y = ibd), orientation = \"y\") +   ggside::geom_ysideboxplot(aes(fill = ibd, x = ibd), orientation = \"x\") +   ggside::scale_xsidey_discrete(labels = NULL) +   ggside::scale_ysidex_discrete(labels = NULL) +   ggside::theme_ggside_void() #> Registered S3 method overwritten by 'ggside': #>   method from    #>   +.gg   ggplot2"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/ordination.html","id":"side-panel-density-plots","dir":"Articles > Web-only","previous_headings":"Univariable distribution side panels","what":"Side panel density plots","title":"Ordination plots","text":"","code":"ibd %>%   tax_transform(\"identity\", rank = \"Genus\") %>%   dist_calc(dist = \"aitchison\") %>%   ord_calc(\"PCoA\") %>%   ord_plot(color = \"ibd\", shape = \"DiseaseState\", size = 2) +   scale_colour_brewer(palette = \"Dark2\", aesthetics = c(\"fill\", \"colour\"), name = \"IBD\") +   theme_bw() +   ggside::geom_xsidedensity(aes(fill = ibd), alpha = 0.5, show.legend = FALSE) +   ggside::geom_ysidedensity(aes(fill = ibd), alpha = 0.5, show.legend = FALSE) +   ggside::theme_ggside_void()"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/ordination.html","id":"rda","dir":"Articles > Web-only","previous_headings":"","what":"RDA - Redundancy Analysis","title":"Ordination plots","text":"Redundancy analysis constrained ordination method. displays microbial variation can also explained selected constraint variables. Behind scenes, linear regression model created microbial abundance variable (using constraints explanatory variables) PCA performed using fitted values microbial abundances. Starting phyloseq object ibd code first creates couple binary (0/1) numeric variables use constraint variables. easy enough ps_mutate. aggregate transform taxa, like PCA skip dist_calc step.","code":"ibd %>%   ps_mutate(     IBD = as.numeric(ibd == \"ibd\"),     Female = as.numeric(gender == \"female\"),     Abx. = as.numeric(abx == \"abx\")   ) %>%   tax_transform(\"clr\", rank = \"Genus\") %>%   ord_calc(     constraints = c(\"IBD\", \"Female\", \"Abx.\"),     # method = \"RDA\", # Note: you can specify RDA explicitly, and it is good practice to do so, but microViz can guess automatically that you want an RDA here (helpful if you don't remember the name?)     scale_cc = FALSE # doesn't make a difference   ) %>%   ord_plot(     colour = \"DiseaseState\", size = 2, alpha = 0.5, shape = \"active\",     plot_taxa = 1:8   )"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/ordination.html","id":"customising-your-ordination-plot","dir":"Articles > Web-only","previous_headings":"","what":"Customising your ordination plot","title":"Ordination plots","text":"plot looks okay default, fairly easy tweak ord_plot get style just want . code comments explain part makes changes plot.","code":"# first we make a function that replaces any unwanted \"_\" in our taxa labels with spaces library(stringr) renamer <- function(x) str_replace(x, pattern = \"_\", replacement = \" \")  ibd %>%   ps_mutate(     IBD = as.numeric(ibd == \"ibd\"),     Female = as.numeric(gender == \"female\"),     Abx. = as.numeric(abx == \"abx\")   ) %>%   tax_transform(\"clr\", rank = \"Genus\") %>%   ord_calc(     constraints = c(\"IBD\", \"Female\", \"Abx.\"),     method = \"RDA\",     scale_cc = FALSE # doesn't make a difference   ) %>%   ord_plot(     colour = \"DiseaseState\", size = 2, alpha = 0.5, shape = \"active\",     auto_caption = NA, # remove the helpful automatic caption     plot_taxa = 1:8, taxon_renamer = renamer, # renamer is the function we made earlier     tax_vec_length = 5, # this value is a scalar multiplier for the biplot score vectors     tax_lab_length = 6, # this multiplier moves the labels, independently of the arrowheads     tax_lab_style = tax_lab_style(size = 1.8, alpha = 0.5), # create a list of options to tweak the taxa labels' default style     constraint_vec_length = 3, # this adjusts the length of the constraint arrows, and the labels track these lengths by default     constraint_vec_style = vec_constraint(1.5, alpha = 0.5), # this styles the constraint arrows     constraint_lab_style = constraint_lab_style(size = 3) # this styles the constraint labels   ) +   # the functions below are from ggplot2:   # You can pick a different colour scale, such as a color_brewer palette   scale_colour_brewer(palette = \"Set1\") +   # You can set any scale's values manually, such as the shapes used   scale_shape_manual(values = c(     active = \"circle\", mild = \"circle cross\",     inactive = \"circle open\", control = \"square open\"   )) +   # this is how you add a title and subtitle   ggtitle(     label = \"[Insert your exciting interpretations here?]\",     subtitle = \"RDA with clr-transformed genera: constraints in red, taxa in black\"   ) +   # and this is how you make your own caption   labs(caption = \"91 samples, 178 genera. Type 2 scaling.\") +   # this is one way to set the aspect ratio of the plot   coord_fixed(ratio = 1, clip = \"off\")"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/ordination.html","id":"custom-labels","dir":"Articles > Web-only","previous_headings":"Customising your ordination plot","what":"Custom labels","title":"Ordination plots","text":"tax_lab_style() helper function gives options customising look taxa loading labels, including, example, using rotated, bold italic text taxa names. constraint_lab_style() similar helper function customising constraint labels. rotating labels (text) ggtext package must installed.","code":"ibd %>%   ps_mutate(     IBD = as.numeric(ibd == \"ibd\"),     Female = as.numeric(gender == \"female\"),     Abx. = as.numeric(abx == \"abx\")   ) %>%   tax_transform(\"clr\", rank = \"Genus\") %>%   ord_calc(     constraints = c(\"IBD\", \"Female\", \"Abx.\"),     method = \"RDA\",     scale_cc = FALSE # doesn't make a difference   ) %>%   ord_plot(     colour = \"DiseaseState\", size = 2, alpha = 0.5, shape = \"active\",     auto_caption = NA,     plot_taxa = 1:8, taxon_renamer = renamer,     # with rotated labels, it is nicer to keep lab_length closer to vec_length     tax_vec_length = 4.5, tax_lab_length = 4.6,     tax_lab_style = tax_lab_style(       type = \"text\", max_angle = 90, fontface = \"bold.italic\"     ),     constraint_vec_style = vec_constraint(1.5, alpha = 0.5),     constraint_vec_length = 3, constraint_lab_length = 3.3,     constraint_lab_style = constraint_lab_style(       alpha = 0.8, size = 3, max_angle = 90, perpendicular = TRUE     )   ) +   # SETTING A FIXED RATIO IDENTICAL TO THE aspect_ratio ARGUMENT IN   # tax_lab_style() IS NECESSARY FOR THE ANGLES OF TEXT TO ALIGN WITH ARROWS!   coord_fixed(ratio = 1, clip = \"off\", xlim = c(-6, 6)) +   # The scales below are set the same as in the previous customisation:   scale_colour_brewer(palette = \"Set1\") +   scale_shape_manual(values = c(     active = \"circle\", mild = \"circle cross\",     inactive = \"circle open\", control = \"square open\"   ))"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/ordination.html","id":"partial-ordinations","dir":"Articles > Web-only","previous_headings":"","what":"Partial ordinations","title":"Ordination plots","text":"Tutorial coming soon, now see ord_plot() examples.","code":""},{"path":"https://david-barnett.github.io/microViz/articles/web-only/ordination.html","id":"session-info","dir":"Articles > Web-only","previous_headings":"","what":"Session info","title":"Ordination plots","text":"","code":"devtools::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.5.0 (2025-04-11) #>  os       Ubuntu 24.04.2 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  C.UTF-8 #>  ctype    C.UTF-8 #>  tz       UTC #>  date     2025-04-14 #>  pandoc   3.1.11 @ /opt/hostedtoolcache/pandoc/3.1.11/x64/ (via rmarkdown) #>  quarto   NA #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package          * version  date (UTC) lib source #>  ade4               1.7-23   2025-02-14 [1] RSPM #>  ape                5.8-1    2024-12-16 [1] RSPM #>  Biobase            2.67.0   2024-10-29 [1] Bioconduc~ #>  BiocGenerics       0.53.6   2025-01-27 [1] Bioconduc~ #>  biomformat         1.35.0   2024-10-29 [1] Bioconduc~ #>  Biostrings         2.75.4   2025-02-21 [1] Bioconduc~ #>  bslib              0.9.0    2025-01-30 [1] RSPM #>  cachem             1.1.0    2024-05-16 [1] RSPM #>  cli                3.6.4    2025-02-13 [1] RSPM #>  clue               0.3-66   2024-11-13 [1] RSPM #>  cluster            2.1.8.1  2025-03-12 [3] CRAN (R 4.5.0) #>  codetools          0.2-20   2024-03-31 [3] CRAN (R 4.5.0) #>  colorspace         2.1-1    2024-07-26 [1] RSPM #>  commonmark         1.9.5    2025-03-17 [1] RSPM #>  crayon             1.5.3    2024-06-20 [1] RSPM #>  data.table         1.17.0   2025-02-22 [1] RSPM #>  desc               1.4.3    2023-12-10 [1] RSPM #>  devtools           2.4.5    2022-10-11 [1] RSPM #>  digest             0.6.37   2024-08-19 [1] RSPM #>  dplyr              1.1.4    2023-11-17 [1] RSPM #>  ellipsis           0.3.2    2021-04-29 [1] RSPM #>  evaluate           1.0.3    2025-01-10 [1] RSPM #>  farver             2.1.2    2024-05-13 [1] RSPM #>  fastmap            1.2.0    2024-05-15 [1] RSPM #>  fBasics            4041.97  2024-08-19 [1] RSPM #>  foreach            1.5.2    2022-02-02 [1] RSPM #>  fs                 1.6.5    2024-10-30 [1] RSPM #>  generics           0.1.3    2022-07-05 [1] RSPM #>  GenomeInfoDb       1.43.4   2025-01-24 [1] Bioconduc~ #>  GenomeInfoDbData   1.2.14   2025-04-14 [1] Bioconductor #>  ggplot2          * 3.5.2    2025-04-09 [1] RSPM #>  ggrepel            0.9.6    2024-09-07 [1] RSPM #>  ggside             0.3.1    2024-03-01 [1] RSPM #>  ggtext             0.1.2    2022-09-16 [1] RSPM #>  glue               1.8.0    2024-09-30 [1] RSPM #>  gridtext           0.1.5    2022-09-16 [1] RSPM #>  gtable             0.3.6    2024-10-25 [1] RSPM #>  GUniFrac           1.8      2023-09-14 [1] RSPM #>  htmltools          0.5.8.1  2024-04-04 [1] RSPM #>  htmlwidgets        1.6.4    2023-12-06 [1] RSPM #>  httpuv             1.6.15   2024-03-26 [1] RSPM #>  httr               1.4.7    2023-08-15 [1] RSPM #>  igraph             2.1.4    2025-01-23 [1] RSPM #>  inline             0.3.21   2025-01-09 [1] RSPM #>  IRanges            2.41.3   2025-02-12 [1] Bioconduc~ #>  iterators          1.0.14   2022-02-05 [1] RSPM #>  jquerylib          0.1.4    2021-04-26 [1] RSPM #>  jsonlite           2.0.0    2025-03-27 [1] RSPM #>  knitr              1.50     2025-03-16 [1] RSPM #>  labeling           0.4.3    2023-08-29 [1] RSPM #>  later              1.4.2    2025-04-08 [1] RSPM #>  lattice            0.22-6   2024-03-20 [3] CRAN (R 4.5.0) #>  lifecycle          1.0.4    2023-11-07 [1] RSPM #>  litedown           0.7      2025-04-08 [1] RSPM #>  magrittr           2.0.3    2022-03-30 [1] RSPM #>  markdown           2.0      2025-03-23 [1] RSPM #>  MASS               7.3-65   2025-02-28 [3] CRAN (R 4.5.0) #>  Matrix             1.7-3    2025-03-11 [3] CRAN (R 4.5.0) #>  matrixStats        1.5.0    2025-01-07 [1] RSPM #>  memoise            2.0.1    2021-11-26 [1] RSPM #>  mgcv               1.9-1    2023-12-21 [3] CRAN (R 4.5.0) #>  microbiome         1.29.0   2025-01-23 [1] Bioconduc~ #>  microViz         * 0.12.7   2025-04-14 [1] local #>  mime               0.13     2025-03-17 [1] RSPM #>  miniUI             0.1.1.1  2018-05-18 [1] RSPM #>  modeest            2.4.0    2019-11-18 [1] RSPM #>  multtest           2.63.0   2024-10-29 [1] Bioconduc~ #>  munsell            0.5.1    2024-04-01 [1] RSPM #>  nlme               3.1-168  2025-03-31 [3] CRAN (R 4.5.0) #>  patchwork          1.3.0    2024-09-16 [1] RSPM #>  permute            0.9-7    2022-01-27 [1] RSPM #>  phyloseq         * 1.51.0   2025-01-23 [1] Bioconduc~ #>  pillar             1.10.2   2025-04-05 [1] RSPM #>  pkgbuild           1.4.7    2025-03-24 [1] RSPM #>  pkgconfig          2.0.3    2019-09-22 [1] RSPM #>  pkgdown            2.1.1    2024-09-17 [1] RSPM #>  pkgload            1.4.0    2024-06-28 [1] RSPM #>  plyr               1.8.9    2023-10-02 [1] RSPM #>  profvis            0.4.0    2024-09-20 [1] RSPM #>  promises           1.3.2    2024-11-28 [1] RSPM #>  purrr              1.0.4    2025-02-05 [1] RSPM #>  R6                 2.6.1    2025-02-15 [1] RSPM #>  ragg               1.4.0    2025-04-10 [1] RSPM #>  RColorBrewer       1.1-3    2022-04-03 [1] RSPM #>  Rcpp               1.0.14   2025-01-12 [1] RSPM #>  remotes            2.5.0    2024-03-17 [1] RSPM #>  reshape2           1.4.4    2020-04-09 [1] RSPM #>  rhdf5              2.51.2   2025-01-08 [1] Bioconduc~ #>  rhdf5filters       1.19.2   2025-03-05 [1] Bioconduc~ #>  Rhdf5lib           1.29.2   2025-03-24 [1] Bioconduc~ #>  rlang              1.1.5    2025-01-17 [1] RSPM #>  rmarkdown          2.29     2024-11-04 [1] RSPM #>  rmutil             1.1.10   2022-10-27 [1] RSPM #>  rpart              4.1.24   2025-01-07 [3] CRAN (R 4.5.0) #>  Rtsne              0.17     2023-12-07 [1] RSPM #>  S4Vectors          0.45.4   2025-02-11 [1] Bioconduc~ #>  sass               0.4.9    2024-03-15 [1] RSPM #>  scales             1.3.0    2023-11-28 [1] RSPM #>  sessioninfo        1.2.3    2025-02-05 [1] RSPM #>  shiny              1.10.0   2024-12-14 [1] RSPM #>  spatial            7.3-18   2025-01-01 [3] CRAN (R 4.5.0) #>  stable             1.1.6    2022-03-02 [1] RSPM #>  stabledist         0.7-2    2024-08-17 [1] RSPM #>  statip             0.2.3    2019-11-17 [1] RSPM #>  statmod            1.5.0    2023-01-06 [1] RSPM #>  stringi            1.8.7    2025-03-27 [1] RSPM #>  stringr          * 1.5.1    2023-11-14 [1] RSPM #>  survival           3.8-3    2024-12-17 [3] CRAN (R 4.5.0) #>  systemfonts        1.2.2    2025-04-04 [1] RSPM #>  textshaping        1.0.0    2025-01-20 [1] RSPM #>  tibble             3.2.1    2023-03-20 [1] RSPM #>  tidyr              1.3.1    2024-01-24 [1] RSPM #>  tidyselect         1.2.1    2024-03-11 [1] RSPM #>  timeDate           4041.110 2024-09-22 [1] RSPM #>  timeSeries         4041.111 2024-09-22 [1] RSPM #>  UCSC.utils         1.3.1    2025-01-15 [1] Bioconduc~ #>  urlchecker         1.0.1    2021-11-30 [1] RSPM #>  usethis            3.1.0    2024-11-26 [1] RSPM #>  vctrs              0.6.5    2023-12-01 [1] RSPM #>  vegan              2.6-10   2025-01-29 [1] RSPM #>  withr              3.0.2    2024-10-28 [1] RSPM #>  xfun               0.52     2025-04-02 [1] RSPM #>  xml2               1.3.8    2025-03-14 [1] RSPM #>  xtable             1.8-4    2019-04-21 [1] RSPM #>  XVector            0.47.2   2025-01-08 [1] Bioconduc~ #>  yaml               2.3.10   2024-07-26 [1] RSPM #>  #>  [1] /home/runner/work/_temp/Library #>  [2] /opt/R/4.5.0/lib/R/site-library #>  [3] /opt/R/4.5.0/lib/R/library #>  * ── Packages attached to the search path. #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/phyloseq.html","id":"intro","dir":"Articles > Web-only","previous_headings":"","what":"Intro","title":"Working with phyloseq objects","text":"tutorial show microViz makes working phyloseq objects easier.","code":"library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(phyloseq) library(microViz) #> microViz version 0.12.7 - Copyright (C) 2021-2025 David Barnett #> ! Website: https://david-barnett.github.io/microViz #> ✔ Useful?  For citation details, run: `citation(\"microViz\")` #> ✖ Silence? `suppressPackageStartupMessages(library(microViz))`"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/phyloseq.html","id":"getting-your-data-into-phyloseq","dir":"Articles > Web-only","previous_headings":"","what":"Getting your data into phyloseq","title":"Working with phyloseq objects","text":"phyloseq objects probably commonly used data format working microbiome data R. creator phyloseq, Paul J. McMurdie, explains structure phyloseq objects construct phyloseq website. biom format files can imported phyloseq import_biom function. biom files generated (can ) many processing tools including QIIME 1 / 2, MetaPhlAn, NG-Tax. mothur output also directly supported via phyloseq’s import_mothur function. DADA2 output can converted phyloseq according DADA2 handoff instructions Don’t worry much getting sample metadata biom file phyloseq object start, ps_join() makes easy add sample data later.","code":"# This tutorial will just use some example data # It is already available as a phyloseq object from the corncob package example_ps <- microViz::ibd example_ps #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 36349 taxa and 91 samples ] #> sample_data() Sample Data:       [ 91 samples by 15 sample variables ] #> tax_table()   Taxonomy Table:    [ 36349 taxa by 7 taxonomic ranks ]"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/phyloseq.html","id":"validating-your-phyloseq","dir":"Articles > Web-only","previous_headings":"Getting your data into phyloseq","what":"Validating your phyloseq","title":"Working with phyloseq objects","text":"phyloseq checks sample taxa names consistent across different slots phyloseq object. microViz provides phyloseq_validate() check fix possible problems phyloseq might cause problems later analyses. recommended run start analyses, fix problems identified.","code":"example_ps <- phyloseq_validate(example_ps, remove_undetected = TRUE) #> Short values detected in phyloseq tax_table (nchar<4) : #> Consider using tax_fix() to make taxa uniquely identifiable example_ps <- tax_fix(example_ps)"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/phyloseq.html","id":"microviz-and-phyloseq-overview","dir":"Articles > Web-only","previous_headings":"","what":"microViz and phyloseq overview","title":"Working with phyloseq objects","text":"valid phyloseq object, microViz provides several helpful functions manipulating object. names syntax functions familiar users dplyr, reading dplyr help pages may useful getting functions. Add data.frame metadata sample_data slot ps_join() Compute new sample_data variables ps_mutate() Subset reorder variables sample_data ps_select() Subset samples based sample_data variables ps_filter() Reorder samples (can useful examining sample data plotting) : ps_reorder() : manually set sample order ps_arrange() : order samples using sample_data variables ps_seriate() : order samples according microbiome similarity Remove duplicated/repeated samples ps_dedupe() Remove samples missing values sample_data ps_drop_incomplete() Check examples section function’s reference page extensive usage examples.","code":""},{"path":"https://david-barnett.github.io/microViz/articles/web-only/phyloseq.html","id":"example-sample-manipulation","dir":"Articles > Web-only","previous_headings":"","what":"Example sample manipulation","title":"Working with phyloseq objects","text":"Lets look sample data already example phyloseq. Maybe want select participants IBD (controls). can filtering samples based values sample data variable: ibd complicated filtering rules can applied. Let’s say want female IBD patients “mild” “severe” activity, least 13 years old. Let’s look sample data participants. also arrange samples grouped disease descending age order, select interesting variables show. can also sort sample microbiome similarity ps_seriate().  can also arrange samples abundance one microbes using ps_arrange() .target = \"otu_table\". Arranging taxon can done current taxonomic rank, aggregate Genus level first.","code":"# 91 samples, with 15 sample_data variables example_ps #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 36349 taxa and 91 samples ] #> sample_data() Sample Data:       [ 91 samples by 15 sample variables ] #> tax_table()   Taxonomy Table:    [ 36349 taxa by 7 taxonomic ranks ] # return sample data as a tibble for pretty printing samdat_tbl(example_ps) #> # A tibble: 91 × 16 #>    .sample_name sample gender   age DiseaseState steroids imsp  abx   mesalamine #>    <chr>        <chr>  <chr>  <int> <chr>        <chr>    <chr> <chr> <chr>      #>  1 099A         099-AX female    17 UC           steroids imsp  noabx nomes      #>  2 199A         199-AX female     5 nonIBD       nostero… noim… noabx nomes      #>  3 062B         062-BZ male      16 CD           steroids imsp  noabx nomes      #>  4 194A         194-AZ male      15 UC           steroids noim… noabx nomes      #>  5 166A         166-AX female    20 UC           nostero… noim… abx   nomes      #>  6 219A         219-AX female    18 UC           nostero… imsp  abx   nomes      #>  7 132A         132-AX female    12 CD           steroids imsp  noabx nomes      #>  8 026A         026-AX male      10 UC           steroids imsp  abx   nomes      #>  9 102A         102-AZ male       3 nonIBD       nostero… noim… noabx nomes      #> 10 140A         140-AX female     5 nonIBD       nostero… noim… noabx nomes      #> # ℹ 81 more rows #> # ℹ 7 more variables: ibd <chr>, activity <chr>, active <chr>, race <chr>, #> #   fhx <chr>, imspLEVEL <chr>, SampleType <chr> example_ps %>% ps_filter(ibd == \"ibd\") # it is essential to use `==` , not just one `=` #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 24490 taxa and 67 samples ] #> sample_data() Sample Data:       [ 67 samples by 15 sample variables ] #> tax_table()   Taxonomy Table:    [ 24490 taxa by 7 taxonomic ranks ] # notice that taxa that no longer appear in the remaining 67 samples have been removed! partial_ps <- example_ps %>%   ps_filter(     gender == \"female\",     activity %in% c(\"mild\", \"severe\"),     age >= 13   ) partial_ps #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 2600 taxa and 9 samples ] #> sample_data() Sample Data:       [ 9 samples by 15 sample variables ] #> tax_table()   Taxonomy Table:    [ 2600 taxa by 7 taxonomic ranks ] partial_ps %>%   ps_arrange(DiseaseState, desc(age)) %>%   ps_select(DiseaseState, age, matches(\"activ\"), abx) %>% # selection order is respected   samdat_tbl() # this adds the .sample_name variable #> # A tibble: 9 × 6 #>   .sample_name DiseaseState   age activity active abx   #>   <chr>        <chr>        <int> <chr>    <chr>  <chr> #> 1 195A         CD              13 mild     active noabx #> 2 164A         UC              21 severe   active abx   #> 3 166A         UC              20 severe   active abx   #> 4 038A         UC              19 mild     active noabx #> 5 114C         UC              19 mild     active noabx #> 6 099A         UC              17 severe   active noabx #> 7 009A         UC              15 severe   active noabx #> 8 120D         UC              14 mild     active noabx #> 9 186A         UC              14 severe   active abx partial_ps %>%   tax_agg(\"Genus\") %>%   ps_seriate(dist = \"bray\", method = \"OLO_ward\") %>% # these are the defaults   comp_barplot(tax_level = \"Genus\", sample_order = \"asis\", n_taxa = 10) #> Registered S3 method overwritten by 'seriation': #>   method         from  #>   reorder.hclust vegan # note that comp_barplot with sample_order = \"bray\" will run # this ps_seriate call internally, so you don't have to! # Arranging by decreasing Bacteroides abundance partial_ps %>%   tax_agg(\"Genus\") %>%   ps_arrange(desc(Bacteroides), .target = \"otu_table\") %>%   otu_get() %>% # get the otu table   .[, 1:6] # show only a subset of the otu_table #> OTU Table:          [6 taxa and 9 samples] #>                      taxa are columns #>      Prevotella Clostridium_XlVa Hallella Veillonella Bacteroides Blautia #> 009A       4480              462        4         250        1542       0 #> 195A          0               40        0           1         514       5 #> 166A        549                7        0          17         170      27 #> 099A          0               60        0           0         132      48 #> 186A          0                7        0           0          69      38 #> 038A          0                0        0         192           0       0 #> 114C          0               44        0           6           0     236 #> 120D          0                0        0           0           0       0 #> 164A          0                0        0           0           0       0  # Plot samples' compositions in this order partial_ps %>%   tax_agg(\"Genus\") %>%   ps_arrange(desc(Bacteroides), .target = \"otu_table\") %>%   comp_barplot(tax_level = \"Genus\", sample_order = \"asis\", n_taxa = 10) # Notice this is sorted by bacteroides counts # (this doesn't quite match relative abundance % due to sequencing depth variation)"},{"path":[]},{"path":"https://david-barnett.github.io/microViz/articles/web-only/phyloseq.html","id":"ps_filter-vs--phyloseqsubset_samples","dir":"Articles > Web-only","previous_headings":"Other notes:","what":"ps_filter() vs. phyloseq::subset_samples()","title":"Working with phyloseq objects","text":"well filtering samples, ps_filter() might also modify otu_table tax_table phyloseq object (unlike phyloseq::subset_samples(), never ). ? remove many samples dataset, often phyloseq object left taxa never occur remaining samples (.e. total counts zero). ps_filter() removes absent taxa default. don’t want , can set .keep_all_taxa argument TRUE ps_filter.","code":""},{"path":"https://david-barnett.github.io/microViz/articles/web-only/phyloseq.html","id":"technical-log","dir":"Articles > Web-only","previous_headings":"","what":"Technical log","title":"Working with phyloseq objects","text":"","code":"devtools::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.5.0 (2025-04-11) #>  os       Ubuntu 24.04.2 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  C.UTF-8 #>  ctype    C.UTF-8 #>  tz       UTC #>  date     2025-04-14 #>  pandoc   3.1.11 @ /opt/hostedtoolcache/pandoc/3.1.11/x64/ (via rmarkdown) #>  quarto   NA #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package          * version date (UTC) lib source #>  ade4               1.7-23  2025-02-14 [1] RSPM #>  ape                5.8-1   2024-12-16 [1] RSPM #>  Biobase            2.67.0  2024-10-29 [1] Bioconduc~ #>  BiocGenerics       0.53.6  2025-01-27 [1] Bioconduc~ #>  biomformat         1.35.0  2024-10-29 [1] Bioconduc~ #>  Biostrings         2.75.4  2025-02-21 [1] Bioconduc~ #>  bslib              0.9.0   2025-01-30 [1] RSPM #>  ca                 0.71.1  2020-01-24 [1] RSPM #>  cachem             1.1.0   2024-05-16 [1] RSPM #>  cli                3.6.4   2025-02-13 [1] RSPM #>  cluster            2.1.8.1 2025-03-12 [3] CRAN (R 4.5.0) #>  codetools          0.2-20  2024-03-31 [3] CRAN (R 4.5.0) #>  colorspace         2.1-1   2024-07-26 [1] RSPM #>  crayon             1.5.3   2024-06-20 [1] RSPM #>  data.table         1.17.0  2025-02-22 [1] RSPM #>  desc               1.4.3   2023-12-10 [1] RSPM #>  devtools           2.4.5   2022-10-11 [1] RSPM #>  digest             0.6.37  2024-08-19 [1] RSPM #>  dplyr            * 1.1.4   2023-11-17 [1] RSPM #>  ellipsis           0.3.2   2021-04-29 [1] RSPM #>  evaluate           1.0.3   2025-01-10 [1] RSPM #>  farver             2.1.2   2024-05-13 [1] RSPM #>  fastmap            1.2.0   2024-05-15 [1] RSPM #>  foreach            1.5.2   2022-02-02 [1] RSPM #>  fs                 1.6.5   2024-10-30 [1] RSPM #>  generics           0.1.3   2022-07-05 [1] RSPM #>  GenomeInfoDb       1.43.4  2025-01-24 [1] Bioconduc~ #>  GenomeInfoDbData   1.2.14  2025-04-14 [1] Bioconductor #>  ggplot2            3.5.2   2025-04-09 [1] RSPM #>  glue               1.8.0   2024-09-30 [1] RSPM #>  gtable             0.3.6   2024-10-25 [1] RSPM #>  htmltools          0.5.8.1 2024-04-04 [1] RSPM #>  htmlwidgets        1.6.4   2023-12-06 [1] RSPM #>  httpuv             1.6.15  2024-03-26 [1] RSPM #>  httr               1.4.7   2023-08-15 [1] RSPM #>  igraph             2.1.4   2025-01-23 [1] RSPM #>  IRanges            2.41.3  2025-02-12 [1] Bioconduc~ #>  iterators          1.0.14  2022-02-05 [1] RSPM #>  jquerylib          0.1.4   2021-04-26 [1] RSPM #>  jsonlite           2.0.0   2025-03-27 [1] RSPM #>  knitr              1.50    2025-03-16 [1] RSPM #>  labeling           0.4.3   2023-08-29 [1] RSPM #>  later              1.4.2   2025-04-08 [1] RSPM #>  lattice            0.22-6  2024-03-20 [3] CRAN (R 4.5.0) #>  lifecycle          1.0.4   2023-11-07 [1] RSPM #>  magrittr           2.0.3   2022-03-30 [1] RSPM #>  MASS               7.3-65  2025-02-28 [3] CRAN (R 4.5.0) #>  Matrix             1.7-3   2025-03-11 [3] CRAN (R 4.5.0) #>  memoise            2.0.1   2021-11-26 [1] RSPM #>  mgcv               1.9-1   2023-12-21 [3] CRAN (R 4.5.0) #>  microbiome         1.29.0  2025-01-23 [1] Bioconduc~ #>  microViz         * 0.12.7  2025-04-14 [1] local #>  mime               0.13    2025-03-17 [1] RSPM #>  miniUI             0.1.1.1 2018-05-18 [1] RSPM #>  multtest           2.63.0  2024-10-29 [1] Bioconduc~ #>  munsell            0.5.1   2024-04-01 [1] RSPM #>  nlme               3.1-168 2025-03-31 [3] CRAN (R 4.5.0) #>  permute            0.9-7   2022-01-27 [1] RSPM #>  phyloseq         * 1.51.0  2025-01-23 [1] Bioconduc~ #>  pillar             1.10.2  2025-04-05 [1] RSPM #>  pkgbuild           1.4.7   2025-03-24 [1] RSPM #>  pkgconfig          2.0.3   2019-09-22 [1] RSPM #>  pkgdown            2.1.1   2024-09-17 [1] RSPM #>  pkgload            1.4.0   2024-06-28 [1] RSPM #>  plyr               1.8.9   2023-10-02 [1] RSPM #>  profvis            0.4.0   2024-09-20 [1] RSPM #>  promises           1.3.2   2024-11-28 [1] RSPM #>  purrr              1.0.4   2025-02-05 [1] RSPM #>  R6                 2.6.1   2025-02-15 [1] RSPM #>  ragg               1.4.0   2025-04-10 [1] RSPM #>  Rcpp               1.0.14  2025-01-12 [1] RSPM #>  registry           0.5-1   2019-03-05 [1] RSPM #>  remotes            2.5.0   2024-03-17 [1] RSPM #>  reshape2           1.4.4   2020-04-09 [1] RSPM #>  rhdf5              2.51.2  2025-01-08 [1] Bioconduc~ #>  rhdf5filters       1.19.2  2025-03-05 [1] Bioconduc~ #>  Rhdf5lib           1.29.2  2025-03-24 [1] Bioconduc~ #>  rlang              1.1.5   2025-01-17 [1] RSPM #>  rmarkdown          2.29    2024-11-04 [1] RSPM #>  Rtsne              0.17    2023-12-07 [1] RSPM #>  S4Vectors          0.45.4  2025-02-11 [1] Bioconduc~ #>  sass               0.4.9   2024-03-15 [1] RSPM #>  scales             1.3.0   2023-11-28 [1] RSPM #>  seriation          1.5.7   2024-12-05 [1] RSPM #>  sessioninfo        1.2.3   2025-02-05 [1] RSPM #>  shiny              1.10.0  2024-12-14 [1] RSPM #>  stringi            1.8.7   2025-03-27 [1] RSPM #>  stringr            1.5.1   2023-11-14 [1] RSPM #>  survival           3.8-3   2024-12-17 [3] CRAN (R 4.5.0) #>  systemfonts        1.2.2   2025-04-04 [1] RSPM #>  textshaping        1.0.0   2025-01-20 [1] RSPM #>  tibble             3.2.1   2023-03-20 [1] RSPM #>  tidyr              1.3.1   2024-01-24 [1] RSPM #>  tidyselect         1.2.1   2024-03-11 [1] RSPM #>  TSP                1.2-4   2023-04-04 [1] RSPM #>  UCSC.utils         1.3.1   2025-01-15 [1] Bioconduc~ #>  urlchecker         1.0.1   2021-11-30 [1] RSPM #>  usethis            3.1.0   2024-11-26 [1] RSPM #>  utf8               1.2.4   2023-10-22 [1] RSPM #>  vctrs              0.6.5   2023-12-01 [1] RSPM #>  vegan              2.6-10  2025-01-29 [1] RSPM #>  withr              3.0.2   2024-10-28 [1] RSPM #>  xfun               0.52    2025-04-02 [1] RSPM #>  xtable             1.8-4   2019-04-21 [1] RSPM #>  XVector            0.47.2  2025-01-08 [1] Bioconduc~ #>  yaml               2.3.10  2024-07-26 [1] RSPM #>  #>  [1] /home/runner/work/_temp/Library #>  [2] /opt/R/4.5.0/lib/R/site-library #>  [3] /opt/R/4.5.0/lib/R/library #>  * ── Packages attached to the search path. #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/tax-fixing.html","id":"quick-start-tldr","dir":"Articles > Web-only","previous_headings":"","what":"Quick start / TLDR","title":"Fixing your tax_table","text":"Use tax_fix() phyloseq data default arguments repair tax_table problems (missing uninformative values). still encounter errors using e.g. tax_agg, try using Shiny app tax_fix_interactive() help generate tax_fix code fix particular tax_table problems.","code":"library(phyloseq) suppressPackageStartupMessages(library(microViz))"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/tax-fixing.html","id":"intro","dir":"Articles > Web-only","previous_headings":"","what":"Intro","title":"Fixing your tax_table","text":"article explain common problems can occur phyloseq tax_table, might cause problems e.g. tax_agg. can fix problems help tax_fix tax_fix_interactive.","code":""},{"path":"https://david-barnett.github.io/microViz/articles/web-only/tax-fixing.html","id":"fixing-problems","dir":"Articles > Web-only","previous_headings":"","what":"Fixing problems","title":"Fixing your tax_table","text":"Let’s look example data corncob package: Species rank appears blank many entries. problem may well encounter data: unique sequences OTUs often annotated lower taxonomic ranks. try aggregate Genus Family rank level, discover blank values ranks prevent taxonomic aggregation. , example, looks like OTU.43 OTU.54 share (empty) Genus name, ““, despite different higher rank, Family. run tax_fix first, fix problems default settings, allowing taxa aggregated successfully (rank). still errors using tax_agg tax_fix, carefully read error accompanying messages. Often can copy suggested tax_fix code tax_agg error. generally also look around tax_table uninformative values, using tax_fix_interactive.","code":"pseq <- microViz::ibd pseq #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 36349 taxa and 91 samples ] #> sample_data() Sample Data:       [ 91 samples by 15 sample variables ] #> tax_table()   Taxonomy Table:    [ 36349 taxa by 7 taxonomic ranks ] tax_table(pseq)[40:54, 4:7] # highest 3 ranks not shown, to save space #> Taxonomy Table:     [15 taxa by 4 taxonomic ranks]: #>        Order               Family               Genus                  Species #> OTU.40 \"Enterobacteriales\" \"Enterobacteriaceae\" \"Escherichia/Shigella\" \"\"      #> OTU.41 \"Coriobacteriales\"  \"Coriobacteriaceae\"  \"Gordonibacter\"        \"\"      #> OTU.42 \"Clostridiales\"     \"Ruminococcaceae\"    \"Faecalibacterium\"     \"\"      #> OTU.43 \"Clostridiales\"     \"Ruminococcaceae\"    \"\"                     \"\"      #> OTU.44 \"Bacteroidales\"     \"Prevotellaceae\"     \"Prevotella\"           \"\"      #> OTU.45 \"Bacteroidales\"     \"Bacteroidaceae\"     \"Bacteroides\"          \"\"      #> OTU.46 \"Enterobacteriales\" \"Enterobacteriaceae\" \"Klebsiella\"           \"\"      #> OTU.47 \"Bacteroidales\"     \"Prevotellaceae\"     \"Prevotella\"           \"\"      #> OTU.48 \"Clostridiales\"     \"Lachnospiraceae\"    \"Blautia\"              \"\"      #> OTU.49 \"Clostridiales\"     \"Ruminococcaceae\"    \"Faecalibacterium\"     \"\"      #> OTU.50 \"Enterobacteriales\" \"Enterobacteriaceae\" \"Escherichia/Shigella\" \"\"      #> OTU.51 \"Bacteroidales\"     \"Prevotellaceae\"     \"Prevotella\"           \"\"      #> OTU.52 \"Clostridiales\"     \"Lachnospiraceae\"    \"Clostridium_XlVa\"     \"\"      #> OTU.53 \"Bacteroidales\"     \"Prevotellaceae\"     \"Prevotella\"           \"\"      #> OTU.54 \"Clostridiales\"     \"Lachnospiraceae\"    \"\"                     \"\" # tax_agg(pseq, rank = \"Family\") # this fails, and sends (helpful) messages about taxa problems pseq %>%   tax_fix() %>%   tax_agg(rank = \"Family\") #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 59 taxa and 91 samples ] #> sample_data() Sample Data:       [ 91 samples by 15 sample variables ] #> tax_table()   Taxonomy Table:    [ 59 taxa by 5 taxonomic ranks ] #>  #> psExtra info: #> tax_agg = \"Family\""},{"path":"https://david-barnett.github.io/microViz/articles/web-only/tax-fixing.html","id":"what-does-tax_fix-do","dir":"Articles > Web-only","previous_headings":"Fixing problems","what":"What does tax_fix do?","title":"Fixing your tax_table","text":"tax_fix searches ranks phyloseq object tax_table : short values, like “g__”, ““,” “, etc. (fewer characters min_length) common, longer uninformative values like “unknown” (see full list ?tax_fix) NAs tax_fix replaces values next higher taxonomic rank, e.g. “unknown” Family within Order Clostridiales renamed “Clostridiales Order”, seen .","code":"pseq %>%   tax_fix(min_length = 4) %>%   tax_agg(\"Family\") %>%   # ps_get() %>% # needed in older versions of microViz (< 0.10.0)   tax_table() %>%   .[1:8, 3:5] # removes the first 2 ranks and shows only first 8 rows for nice printing #> Taxonomy Table:     [8 taxa by 3 taxonomic ranks]: #>                       Class           Order             Family                  #> Ruminococcaceae       \"Clostridia\"    \"Clostridiales\"   \"Ruminococcaceae\"       #> Bacteroidaceae        \"Bacteroidia\"   \"Bacteroidales\"   \"Bacteroidaceae\"        #> Prevotellaceae        \"Bacteroidia\"   \"Bacteroidales\"   \"Prevotellaceae\"        #> Lachnospiraceae       \"Clostridia\"    \"Clostridiales\"   \"Lachnospiraceae\"       #> Veillonellaceae       \"Negativicutes\" \"Selenomonadales\" \"Veillonellaceae\"       #> Clostridiales Order   \"Clostridia\"    \"Clostridiales\"   \"Clostridiales Order\"   #> Peptostreptococcaceae \"Clostridia\"    \"Clostridiales\"   \"Peptostreptococcaceae\" #> Porphyromonadaceae    \"Bacteroidia\"   \"Bacteroidales\"   \"Porphyromonadaceae\""},{"path":"https://david-barnett.github.io/microViz/articles/web-only/tax-fixing.html","id":"interactive-solutions","dir":"Articles > Web-only","previous_headings":"Fixing problems","what":"Interactive solutions","title":"Fixing your tax_table","text":"can use tax_fix_interactive() explore data’s tax_table visually, interactively find fix problematic entries. can copy automagically personalised tax_fix code tax_fix_interactive’s output, paste script. screen capture video tax_fix action, using artificially mangled example data (see details ?tax_fix_interactive()).","code":"tax_fix_interactive(example_data)"},{"path":"https://david-barnett.github.io/microViz/articles/web-only/tax-fixing.html","id":"other-possible-problems","dir":"Articles > Web-only","previous_headings":"Fixing problems","what":"Other possible problems","title":"Fixing your tax_table","text":"Completely unclassified taxa (aka taxa values tax_table row either short listed unknowns argument) replaced ranks unique row name default (alternatively generic name “unclassified [highest rank]”, useful want aggregate unclassified sequences together tax_agg()) Unclassified taxa also short / unknown row names, e.g. unclassified taxon called “-1” example “enterotype” dataset phyloseq. something like happens data, rename taxa manually, (e.g. taxa_names(enterotype)[1] <- \"unclassified taxon\" give completely different names tax_name(). Taxa tax_table entry repeated across multiple ranks: problem functions like taxatree_plots(), need distinct entries rank build tree structure plotting. might happen tax_fix data problem 1. list, data e.g. microarray methods like HITchip. solution use tax_prepend_ranks() (tax_fix) add first character rank tax_table entries (also need set tax_fix argument suffix_rank = “current”). Informative duplicated tax_table entries: e.g. don’t want delete/replace genus name completely, shared two families thus blocking tax_agg. solution rename (one ) values manually make distinct. tax_table(yourPhyloseq)[\"targetTaxonName\", \"targetRank\"] <- \"newBetterGenusName\" Really long taxa_names(): e.g. DNA sequences names. See tax_name() easy way rename taxa.","code":""},{"path":"https://david-barnett.github.io/microViz/articles/web-only/tax-fixing.html","id":"abundance-filtering-as-a-solution","dir":"Articles > Web-only","previous_headings":"","what":"Abundance filtering as a solution","title":"Fixing your tax_table","text":"Sequences unclassified fairly high ranks e.g. Class often low abundance (possibly represent sequencing errors/chimeras), using data environment typically well represented reference databases. struggling unclassified taxa, consider can just remove first using tax_filter() (perhaps using fairly relaxed filtering criteria like min_prevalence 2 samples, min_total_abundance 1000 reads, keeping tax_level argument NA, aggregation attempted filtering).","code":""},{"path":"https://david-barnett.github.io/microViz/articles/web-only/tax-fixing.html","id":"alternatives","dir":"Articles > Web-only","previous_headings":"","what":"Alternatives","title":"Fixing your tax_table","text":"microbiome::aggregate_taxa() also solves tax_table problems, e.g. multiple distinct genera converge species name like “” “s__”, make unique taxa names pasting together rank names. However can produce long names, need manually shortened use plots. Plus, doesn’t replace names like “s__” occur . Moreover, creating ordination plots microViz, tax_agg() record aggregation level provenance tracking automated plot captioning.","code":""},{"path":"https://david-barnett.github.io/microViz/articles/web-only/tax-fixing.html","id":"session-info","dir":"Articles > Web-only","previous_headings":"","what":"Session info","title":"Fixing your tax_table","text":"","code":"devtools::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.5.0 (2025-04-11) #>  os       Ubuntu 24.04.2 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  C.UTF-8 #>  ctype    C.UTF-8 #>  tz       UTC #>  date     2025-04-14 #>  pandoc   3.1.11 @ /opt/hostedtoolcache/pandoc/3.1.11/x64/ (via rmarkdown) #>  quarto   NA #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package          * version date (UTC) lib source #>  ade4               1.7-23  2025-02-14 [1] RSPM #>  ape                5.8-1   2024-12-16 [1] RSPM #>  Biobase            2.67.0  2024-10-29 [1] Bioconduc~ #>  BiocGenerics       0.53.6  2025-01-27 [1] Bioconduc~ #>  biomformat         1.35.0  2024-10-29 [1] Bioconduc~ #>  Biostrings         2.75.4  2025-02-21 [1] Bioconduc~ #>  bslib              0.9.0   2025-01-30 [1] RSPM #>  cachem             1.1.0   2024-05-16 [1] RSPM #>  cli                3.6.4   2025-02-13 [1] RSPM #>  cluster            2.1.8.1 2025-03-12 [3] CRAN (R 4.5.0) #>  codetools          0.2-20  2024-03-31 [3] CRAN (R 4.5.0) #>  colorspace         2.1-1   2024-07-26 [1] RSPM #>  crayon             1.5.3   2024-06-20 [1] RSPM #>  data.table         1.17.0  2025-02-22 [1] RSPM #>  desc               1.4.3   2023-12-10 [1] RSPM #>  devtools           2.4.5   2022-10-11 [1] RSPM #>  digest             0.6.37  2024-08-19 [1] RSPM #>  dplyr              1.1.4   2023-11-17 [1] RSPM #>  ellipsis           0.3.2   2021-04-29 [1] RSPM #>  evaluate           1.0.3   2025-01-10 [1] RSPM #>  fastmap            1.2.0   2024-05-15 [1] RSPM #>  foreach            1.5.2   2022-02-02 [1] RSPM #>  fs                 1.6.5   2024-10-30 [1] RSPM #>  generics           0.1.3   2022-07-05 [1] RSPM #>  GenomeInfoDb       1.43.4  2025-01-24 [1] Bioconduc~ #>  GenomeInfoDbData   1.2.14  2025-04-14 [1] Bioconductor #>  ggplot2            3.5.2   2025-04-09 [1] RSPM #>  glue               1.8.0   2024-09-30 [1] RSPM #>  gtable             0.3.6   2024-10-25 [1] RSPM #>  htmltools          0.5.8.1 2024-04-04 [1] RSPM #>  htmlwidgets        1.6.4   2023-12-06 [1] RSPM #>  httpuv             1.6.15  2024-03-26 [1] RSPM #>  httr               1.4.7   2023-08-15 [1] RSPM #>  igraph             2.1.4   2025-01-23 [1] RSPM #>  IRanges            2.41.3  2025-02-12 [1] Bioconduc~ #>  iterators          1.0.14  2022-02-05 [1] RSPM #>  jquerylib          0.1.4   2021-04-26 [1] RSPM #>  jsonlite           2.0.0   2025-03-27 [1] RSPM #>  knitr              1.50    2025-03-16 [1] RSPM #>  later              1.4.2   2025-04-08 [1] RSPM #>  lattice            0.22-6  2024-03-20 [3] CRAN (R 4.5.0) #>  lifecycle          1.0.4   2023-11-07 [1] RSPM #>  magrittr           2.0.3   2022-03-30 [1] RSPM #>  MASS               7.3-65  2025-02-28 [3] CRAN (R 4.5.0) #>  Matrix             1.7-3   2025-03-11 [3] CRAN (R 4.5.0) #>  memoise            2.0.1   2021-11-26 [1] RSPM #>  mgcv               1.9-1   2023-12-21 [3] CRAN (R 4.5.0) #>  microViz         * 0.12.7  2025-04-14 [1] local #>  mime               0.13    2025-03-17 [1] RSPM #>  miniUI             0.1.1.1 2018-05-18 [1] RSPM #>  multtest           2.63.0  2024-10-29 [1] Bioconduc~ #>  munsell            0.5.1   2024-04-01 [1] RSPM #>  nlme               3.1-168 2025-03-31 [3] CRAN (R 4.5.0) #>  permute            0.9-7   2022-01-27 [1] RSPM #>  phyloseq         * 1.51.0  2025-01-23 [1] Bioconduc~ #>  pillar             1.10.2  2025-04-05 [1] RSPM #>  pkgbuild           1.4.7   2025-03-24 [1] RSPM #>  pkgconfig          2.0.3   2019-09-22 [1] RSPM #>  pkgdown            2.1.1   2024-09-17 [1] RSPM #>  pkgload            1.4.0   2024-06-28 [1] RSPM #>  plyr               1.8.9   2023-10-02 [1] RSPM #>  profvis            0.4.0   2024-09-20 [1] RSPM #>  promises           1.3.2   2024-11-28 [1] RSPM #>  purrr              1.0.4   2025-02-05 [1] RSPM #>  R6                 2.6.1   2025-02-15 [1] RSPM #>  ragg               1.4.0   2025-04-10 [1] RSPM #>  Rcpp               1.0.14  2025-01-12 [1] RSPM #>  remotes            2.5.0   2024-03-17 [1] RSPM #>  reshape2           1.4.4   2020-04-09 [1] RSPM #>  rhdf5              2.51.2  2025-01-08 [1] Bioconduc~ #>  rhdf5filters       1.19.2  2025-03-05 [1] Bioconduc~ #>  Rhdf5lib           1.29.2  2025-03-24 [1] Bioconduc~ #>  rlang              1.1.5   2025-01-17 [1] RSPM #>  rmarkdown          2.29    2024-11-04 [1] RSPM #>  S4Vectors          0.45.4  2025-02-11 [1] Bioconduc~ #>  sass               0.4.9   2024-03-15 [1] RSPM #>  scales             1.3.0   2023-11-28 [1] RSPM #>  sessioninfo        1.2.3   2025-02-05 [1] RSPM #>  shiny              1.10.0  2024-12-14 [1] RSPM #>  stringi            1.8.7   2025-03-27 [1] RSPM #>  stringr            1.5.1   2023-11-14 [1] RSPM #>  survival           3.8-3   2024-12-17 [3] CRAN (R 4.5.0) #>  systemfonts        1.2.2   2025-04-04 [1] RSPM #>  textshaping        1.0.0   2025-01-20 [1] RSPM #>  tibble             3.2.1   2023-03-20 [1] RSPM #>  tidyselect         1.2.1   2024-03-11 [1] RSPM #>  UCSC.utils         1.3.1   2025-01-15 [1] Bioconduc~ #>  urlchecker         1.0.1   2021-11-30 [1] RSPM #>  usethis            3.1.0   2024-11-26 [1] RSPM #>  vctrs              0.6.5   2023-12-01 [1] RSPM #>  vegan              2.6-10  2025-01-29 [1] RSPM #>  withr              3.0.2   2024-10-28 [1] RSPM #>  xfun               0.52    2025-04-02 [1] RSPM #>  xtable             1.8-4   2019-04-21 [1] RSPM #>  XVector            0.47.2  2025-01-08 [1] Bioconduc~ #>  yaml               2.3.10  2024-07-26 [1] RSPM #>  #>  [1] /home/runner/work/_temp/Library #>  [2] /opt/R/4.5.0/lib/R/site-library #>  [3] /opt/R/4.5.0/lib/R/library #>  * ── Packages attached to the search path. #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":[]},{"path":"https://david-barnett.github.io/microViz/articles/web-only/videos.html","id":"minute-introdemo","dir":"Articles > Web-only","previous_headings":"","what":"10 minute intro/demo","title":"Videos","text":"demo shows use microViz get started easy exploration data Shiny app creating interactive reproducible ordination plots. demo made Microbiome Data Congress 2021 BioSB congress 2021.","code":""},{"path":"https://david-barnett.github.io/microViz/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Barnett. Author, maintainer.","code":""},{"path":"https://david-barnett.github.io/microViz/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Barnett et al., (2021). microViz: R package microbiome data visualization statistics. Journal Open Source Software, 6(63), 3201, https://doi.org/10.21105/joss.03201","code":"@Article{,   doi = {10.21105/joss.03201},   url = {https://doi.org/10.21105/joss.03201},   year = {2021},   publisher = {The Open Journal},   volume = {6},   number = {63},   pages = {3201},   author = {David J.M. Barnett and Ilja C.W. Arts and John Penders},   title = {microViz: an R package for microbiome data visualization and statistics},   journal = {Journal of Open Source Software}, }"},{"path":[]},{"path":"https://david-barnett.github.io/microViz/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Microbiome Data Analysis and Visualization","text":"📦 microViz R package analysis visualization microbiome sequencing data. 🔨 microViz functions intended beginner-friendly flexible. 🔬 microViz extends complements popular microbial ecology packages, including phyloseq, vegan, & microbiome.","code":""},{"path":"https://david-barnett.github.io/microViz/index.html","id":"learn-more","dir":"","previous_headings":"","what":"Learn more","title":"Microbiome Data Analysis and Visualization","text":"📎 website best place documentation examples: https://david-barnett.github.io/microViz/ ReadMe shows example analyses Getting Started guide shows example analyses gives advice using microViz data Reference page lists functions links help pages examples News page describes important changes new microViz package versions Articles pages give tutorials examples Working phyloseq objects Fixing taxa table tax_fix Creating ordination plots (e.g. PCA PCoA) Interactive ordination plots ord_explore Visualising taxonomic compositions comp_barplot Heatmaps microbiome composition correlation Modelling plotting individual taxon associations taxatrees Post GitHub discussions questions/requests","code":""},{"path":"https://david-barnett.github.io/microViz/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Microbiome Data Analysis and Visualization","text":"microViz (yet) available CRAN. can install microViz R Universe, GitHub. recommend first install Bioconductor dependencies using code .","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) install.packages(\"BiocManager\") BiocManager::install(c(\"phyloseq\", \"microbiome\", \"ComplexHeatmap\"), update = FALSE)"},{"path":"https://david-barnett.github.io/microViz/index.html","id":"installation-of-microviz-from-r-universe","dir":"","previous_headings":"Installation","what":"Installation of microViz from R Universe","title":"Microbiome Data Analysis and Visualization","text":"also recommend install following suggested CRAN packages.","code":"install.packages(   \"microViz\",   repos = c(davidbarnett = \"https://david-barnett.r-universe.dev\", getOption(\"repos\")) ) install.packages(\"ggtext\") # for rotated labels on ord_plot()  install.packages(\"ggraph\") # for taxatree_plots() install.packages(\"DT\") # for tax_fix_interactive() install.packages(\"corncob\") # for beta binomial models in tax_model()"},{"path":"https://david-barnett.github.io/microViz/index.html","id":"installation-of-microviz-from-github","dir":"","previous_headings":"Installation","what":"Installation of microViz from GitHub","title":"Microbiome Data Analysis and Visualization","text":"","code":"# Installing from GitHub requires the remotes package install.packages(\"remotes\") # Windows users will also need to have RTools installed! http://jtleek.com/modules/01_DataScientistToolbox/02_10_rtools/  # To install the latest version: remotes::install_github(\"david-barnett/microViz\")  # To install a specific \"release\" version of this package, e.g. an old version  remotes::install_github(\"david-barnett/microViz@0.12.0\")"},{"path":"https://david-barnett.github.io/microViz/index.html","id":"installation-notes","dir":"","previous_headings":"Installation","what":"Installation notes","title":"Microbiome Data Analysis and Visualization","text":"🍎 macOS users - might need install xquartz make heatmaps work (homebrew, run following command mac’s Terminal: brew install --cask xquartz 📦 highly recommend using renv managing R package installations across multiple projects. 🐳 Docker users image main branch installed available : https://hub.docker.com/r/barnettdavid/microviz-rocker-verse 📅 microViz tested work R version 4.* Windows, MacOS, Ubuntu 20. R version 3.6.* probably work, don’t fully test .","code":""},{"path":"https://david-barnett.github.io/microViz/index.html","id":"interactive-ordination-exploration","dir":"","previous_headings":"","what":"Interactive ordination exploration","title":"Microbiome Data Analysis and Visualization","text":"microViz provides Shiny app easy way start exploring microbiome data: need phyloseq object.","code":"library(microViz) #> microViz version 0.12.7 - Copyright (C) 2021-2025 David Barnett #> ! Website: https://david-barnett.github.io/microViz #> ✔ Useful?  For citation details, run: `citation(\"microViz\")` #> ✖ Silence? `suppressPackageStartupMessages(library(microViz))` # example data from corncob package pseq <- microViz::ibd %>%   tax_fix() %>%   phyloseq_validate() ord_explore(pseq) # gif generated with microViz version 0.7.4 (plays at 1.75x speed)"},{"path":"https://david-barnett.github.io/microViz/index.html","id":"example-analyses-on-hitchip-data","dir":"","previous_headings":"","what":"Example analyses (on HITChip data)","title":"Microbiome Data Analysis and Visualization","text":"","code":"library(phyloseq) library(dplyr) library(ggplot2) # get some example data data(\"dietswap\", package = \"microbiome\")  # create a couple of numerical variables to use as constraints or conditions dietswap <- dietswap %>%   ps_mutate(     weight = recode(bmi_group, obese = 3, overweight = 2, lean = 1),     female = if_else(sex == \"female\", true = 1, false = 0),     african = if_else(nationality == \"AFR\", true = 1, false = 0)   ) # add a couple of missing values to show how microViz handles missing data sample_data(dietswap)$african[c(3, 4)] <- NA"},{"path":"https://david-barnett.github.io/microViz/index.html","id":"looking-at-your-data","dir":"","previous_headings":"Example analyses (on HITChip data)","what":"Looking at your data","title":"Microbiome Data Analysis and Visualization","text":"quite samples phyloseq object, like visualize compositions. Perhaps example data differ participant nationality?","code":"dietswap %>%   comp_barplot(     tax_level = \"Genus\", n_taxa = 15, other_name = \"Other\",     taxon_renamer = function(x) stringr::str_remove(x, \" [ae]t rel.\"),     palette = distinct_palette(n = 15, add = \"grey90\"),     merge_other = FALSE, bar_outline_colour = \"darkgrey\"   ) +   coord_flip() +   facet_wrap(\"nationality\", nrow = 1, scales = \"free\") +   labs(x = NULL, y = NULL) +   theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) #> Registered S3 method overwritten by 'seriation': #>   method         from  #>   reorder.hclust vegan htmp <- dietswap %>%   ps_mutate(nationality = as.character(nationality)) %>%   tax_transform(\"log2\", add = 1, chain = TRUE) %>%   comp_heatmap(     taxa = tax_top(dietswap, n = 30), grid_col = NA, name = \"Log2p\",     taxon_renamer = function(x) stringr::str_remove(x, \" [ae]t rel.\"),     colors = heat_palette(palette = viridis::turbo(11)),     row_names_side = \"left\", row_dend_side = \"right\", sample_side = \"bottom\",     sample_anno = sampleAnnotation(       Nationality = anno_sample_cat(         var = \"nationality\", col = c(AAM = \"grey35\", AFR = \"grey85\"),         box_col = NA, legend_title = \"Nationality\", size = grid::unit(4, \"mm\")       )     )   )  ComplexHeatmap::draw(   object = htmp, annotation_legend_list = attr(htmp, \"AnnoLegends\"),   merge_legends = TRUE )"},{"path":"https://david-barnett.github.io/microViz/index.html","id":"example-ordination-plot-workflow","dir":"","previous_headings":"Example analyses (on HITChip data)","what":"Example ordination plot workflow","title":"Microbiome Data Analysis and Visualization","text":"Ordination methods can also help visualize overall microbial ecosystem composition differs markedly groups, e.g. BMI. one option example: Aggregate taxa bacterial families (example) - use tax_agg() Transform microbial data centered-log-ratio transformation - use tax_transform() Perform PCA clr-transformed features (equivalent Aitchison distance PCoA) - use ord_calc() Plot first 2 axes PCA ordination, colouring samples group adding taxon loading arrows visualize taxa generally differ across samples - use ord_plot() Customise theme ggplot like /add features like ellipses annotations","code":"# perform ordination unconstrained_aitchison_pca <- dietswap %>%   tax_agg(\"Family\") %>%   tax_transform(\"clr\") %>%   ord_calc() # ord_calc will automatically infer you want a \"PCA\" here # specify explicitly with method = \"PCA\", or you can pick another method  # create plot pca_plot <- unconstrained_aitchison_pca %>%   ord_plot(     plot_taxa = 1:6, colour = \"bmi_group\", size = 1.5,     tax_vec_length = 0.325,     tax_lab_style = tax_lab_style(max_angle = 90, aspect_ratio = 1),     auto_caption = 8   )  # customise plot customised_plot <- pca_plot +   stat_ellipse(aes(linetype = bmi_group, colour = bmi_group), linewidth = 0.3) + # linewidth not size, since ggplot 3.4.0   scale_colour_brewer(palette = \"Set1\") +   theme(legend.position = \"bottom\") +   coord_fixed(ratio = 1, clip = \"off\") # makes rotated labels align correctly  # show plot customised_plot"},{"path":"https://david-barnett.github.io/microViz/index.html","id":"permanova","dir":"","previous_headings":"Example analyses (on HITChip data)","what":"PERMANOVA","title":"Microbiome Data Analysis and Visualization","text":"visualised ordinated data plot . can see perform PERMANOVA test significance BMI’s association overall microbial composition. example uses Family-level Aitchison distance correspond plot .","code":"# calculate distances aitchison_dists <- dietswap %>%   tax_transform(\"identity\", rank = \"Family\") %>%   dist_calc(\"aitchison\")  # the more permutations you request, the longer it takes # but also the more stable and precise your p-values become aitchison_perm <- aitchison_dists %>%   dist_permanova(     seed = 1234, # for set.seed to ensure reproducibility of random process     n_processes = 1, n_perms = 99, # you should use at least 999!     variables = \"bmi_group\"   ) #> 2025-04-14 13:04:09.320441 - Starting PERMANOVA with 99 perms with 1 processes #> 2025-04-14 13:04:09.380158 - Finished PERMANOVA  # view the permanova results perm_get(aitchison_perm) %>% as.data.frame() #>            Df SumOfSqs         R2        F Pr(>F) #> bmi_group   2  109.170 0.04104336 4.686602   0.01 #> Residual  219 2550.700 0.95895664       NA     NA #> Total     221 2659.869 1.00000000       NA     NA  # view the info stored about the distance calculation info_get(aitchison_perm) #> psExtra info: #> tax_agg = \"Family\" tax_trans = \"identity\" dist_method = \"aitchison\""},{"path":"https://david-barnett.github.io/microViz/index.html","id":"constrained-partial-ordination","dir":"","previous_headings":"Example analyses (on HITChip data)","what":"Constrained partial ordination","title":"Microbiome Data Analysis and Visualization","text":"visualise effect (numeric/logical) variables permanova directly using ord_plot function constraints (conditions). ’ll visualise effect nationality bodyweight sample composition, first removing effect sex.","code":"perm2 <- aitchison_dists %>%   dist_permanova(variables = c(\"weight\", \"african\", \"sex\"), seed = 321) #> Dropping samples with missings: 2 #> 2025-04-14 13:04:09.398024 - Starting PERMANOVA with 999 perms with 1 processes #> 2025-04-14 13:04:11.194814 - Finished PERMANOVA perm2 %>%   ord_calc(constraints = c(\"weight\", \"african\"), conditions = \"female\") %>%   ord_plot(     colour = \"nationality\", size = 2.5, alpha = 0.35,     auto_caption = 7,     constraint_vec_length = 1,     constraint_vec_style = vec_constraint(1.5, colour = \"grey15\"),     constraint_lab_style = constraint_lab_style(       max_angle = 90, size = 3, aspect_ratio = 0.8, colour = \"black\"     )   ) +   stat_ellipse(aes(colour = nationality), linewidth = 0.2) +    scale_color_brewer(palette = \"Set1\", guide = guide_legend(position = \"inside\")) +   coord_fixed(ratio = 0.8, clip = \"off\", xlim = c(-4, 4)) +   theme(legend.position.inside = c(0.9, 0.1), legend.background = element_rect()) #>  #> Centering (mean) and scaling (sd) the constraints and/or conditions: #>  weight #>  african #>  female"},{"path":"https://david-barnett.github.io/microViz/index.html","id":"correlation-heatmaps","dir":"","previous_headings":"Example analyses (on HITChip data)","what":"Correlation Heatmaps","title":"Microbiome Data Analysis and Visualization","text":"microViz heatmaps powered ComplexHeatmap annotated taxa prevalence /abundance.","code":"# set up the data with numerical variables and filter to top taxa psq <- dietswap %>%   ps_mutate(     weight = recode(bmi_group, obese = 3, overweight = 2, lean = 1),     female = if_else(sex == \"female\", true = 1, false = 0),     african = if_else(nationality == \"AFR\", true = 1, false = 0)   ) %>%   tax_filter(     tax_level = \"Genus\", min_prevalence = 1 / 10, min_sample_abundance = 1 / 10   ) %>%   tax_transform(\"identity\", rank = \"Genus\") #> Proportional min_prevalence given: 0.1 --> min 23/222 samples.  # randomly select 30 taxa from the 50 most abundant taxa (just for an example) set.seed(123) taxa <- sample(tax_top(psq, n = 50), size = 30) # actually draw the heatmap cor_heatmap(   data = psq, taxa = taxa,   taxon_renamer = function(x) stringr::str_remove(x, \" [ae]t rel.\"),   tax_anno = taxAnnotation(     Prev. = anno_tax_prev(undetected = 50),     Log2 = anno_tax_box(undetected = 50, trans = \"log2\", zero_replace = 1)   ) )"},{"path":"https://david-barnett.github.io/microViz/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Microbiome Data Analysis and Visualization","text":"😇 find part microViz useful work, please consider citing JOSS article: Barnett et al., (2021). microViz: R package microbiome data visualization statistics. Journal Open Source Software, 6(63), 3201, https://doi.org/10.21105/joss.03201","code":""},{"path":"https://david-barnett.github.io/microViz/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Microbiome Data Analysis and Visualization","text":"Bug reports, questions, suggestions new features, contributions welcome. Feel free create GitHub Issue write Discussions page. project released Contributor Code Conduct participating project agree abide terms.","code":""},{"path":"https://david-barnett.github.io/microViz/index.html","id":"session-info","dir":"","previous_headings":"","what":"Session info","title":"Microbiome Data Analysis and Visualization","text":"","code":"sessionInfo() #> R version 4.5.0 (2025-04-11) #> Platform: aarch64-apple-darwin20 #> Running under: macOS Sequoia 15.3.2 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/lib/libRblas.0.dylib  #> LAPACK: /Library/Frameworks/R.framework/Versions/4.5-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.1 #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> time zone: Europe/Amsterdam #> tzcode source: internal #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] ggplot2_3.5.2   dplyr_1.1.4     phyloseq_1.51.0 microViz_0.12.7 #> [5] testthat_3.2.3  devtools_2.4.5  usethis_3.1.0   #>  #> loaded via a namespace (and not attached): #>   [1] RColorBrewer_1.1-3      rstudioapi_0.17.1       jsonlite_2.0.0          #>   [4] shape_1.4.6.1           magrittr_2.0.3          farver_2.1.2            #>   [7] rmarkdown_2.29          GlobalOptions_0.1.2     fs_1.6.6                #>  [10] vctrs_0.6.5             multtest_2.63.0         memoise_2.0.1           #>  [13] Cairo_1.6-2             htmltools_0.5.8.1       curl_6.2.2              #>  [16] Rhdf5lib_1.29.2         rhdf5_2.51.2            htmlwidgets_1.6.4       #>  [19] plyr_1.8.9              cachem_1.1.0            commonmark_1.9.5        #>  [22] igraph_2.1.4            mime_0.13               lifecycle_1.0.4         #>  [25] iterators_1.0.14        pkgconfig_2.0.3         Matrix_1.7-3            #>  [28] R6_2.6.1                fastmap_1.2.0           clue_0.3-66             #>  [31] GenomeInfoDbData_1.2.14 shiny_1.10.0            digest_0.6.37           #>  [34] selectr_0.4-2           colorspace_2.1-1        S4Vectors_0.45.4        #>  [37] ps_1.9.1                pkgload_1.4.0           seriation_1.5.7         #>  [40] vegan_2.6-10            labeling_0.4.3          httr_1.4.7              #>  [43] mgcv_1.9-1              compiler_4.5.0          remotes_2.5.0           #>  [46] withr_3.0.2             doParallel_1.0.17       viridis_0.6.5           #>  [49] pkgbuild_1.4.7          MASS_7.3-65             sessioninfo_1.2.3       #>  [52] rjson_0.2.23            biomformat_1.35.0       permute_0.9-7           #>  [55] tools_4.5.0             chromote_0.5.0          ape_5.8-1               #>  [58] httpuv_1.6.15           glue_1.8.0              nlme_3.1-168            #>  [61] rhdf5filters_1.19.2     promises_1.3.2          gridtext_0.1.5          #>  [64] grid_4.5.0              Rtsne_0.17              cluster_2.1.8.1         #>  [67] reshape2_1.4.4          ade4_1.7-23             generics_0.1.3          #>  [70] gtable_0.3.6            microbiome_1.29.0       ca_0.71.1               #>  [73] tidyr_1.3.1             websocket_1.4.4         data.table_1.17.0       #>  [76] xml2_1.3.8              XVector_0.47.2          BiocGenerics_0.53.6     #>  [79] markdown_2.0            foreach_1.5.2           pillar_1.10.2           #>  [82] stringr_1.5.1           later_1.4.2             circlize_0.4.16         #>  [85] splines_4.5.0           ggtext_0.1.2            lattice_0.22-6          #>  [88] survival_3.8-3          tidyselect_1.2.1        registry_0.5-1          #>  [91] ComplexHeatmap_2.23.1   Biostrings_2.75.4       miniUI_0.1.1.1          #>  [94] knitr_1.50              gridExtra_2.3           litedown_0.7            #>  [97] IRanges_2.41.3          stats4_4.5.0            xfun_0.52               #> [100] Biobase_2.67.0          brio_1.1.5              matrixStats_1.5.0       #> [103] stringi_1.8.7           UCSC.utils_1.3.1        yaml_2.3.10             #> [106] evaluate_1.0.3          codetools_0.2-20        tibble_3.2.1            #> [109] cli_3.6.4               xtable_1.8-4            munsell_0.5.1           #> [112] processx_3.8.6          Rcpp_1.0.14             GenomeInfoDb_1.43.4     #> [115] png_0.1-8               parallel_4.5.0          ellipsis_0.3.2          #> [118] profvis_0.4.0           urlchecker_1.0.1        viridisLite_0.4.2       #> [121] scales_1.3.0            purrr_1.0.4             crayon_1.5.3            #> [124] GetoptLong_1.0.5        rlang_1.1.6             TSP_1.2-4               #> [127] rvest_1.0.4"},{"path":"https://david-barnett.github.io/microViz/reference/Ordination-labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Create list for ord_plot() *_lab_style arguments — Ordination-labels","title":"Create list for ord_plot() *_lab_style arguments — Ordination-labels","text":"Customise taxa constraint labels ordination plots. Choose 'text' 'label' type, rotate /justify text/labels set aesthetic appearances using tax_lab_style() constraint_lab_style().","code":""},{"path":"https://david-barnett.github.io/microViz/reference/Ordination-labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create list for ord_plot() *_lab_style arguments — Ordination-labels","text":"","code":"tax_lab_style(   type = \"label\",   max_angle = 0,   perpendicular = FALSE,   aspect_ratio = 1,   justify = \"auto\",   size = 2,   alpha = 1,   colour = \"black\",   ... )  constraint_lab_style(   type = \"label\",   max_angle = 0,   perpendicular = FALSE,   aspect_ratio = 1,   justify = \"auto\",   size = 2.5,   alpha = 1,   colour = \"brown\",   ... )"},{"path":"https://david-barnett.github.io/microViz/reference/Ordination-labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create list for ord_plot() *_lab_style arguments — Ordination-labels","text":"type 'label', 'text' 'richtext' ('richtext' also used 'label' type rotated, max_angle > 0) max_angle maximum angle rotation allow match vector angle (requires ggtext package rotate \"label\" type) perpendicular TRUE, sets rotated labels perpendicular desired angle, parallel aspect_ratio aspect ratio plot (y/x) must also used coord_fixed() ratio argument (must set rotated labels used, ensure match arrow angles) justify \"center\", \"side\", \"auto\"? text/label align arrows text center text sides (uses hjust, 'auto', picks based whether max_angle greater 0) size fixed size text label alpha fixed alpha text label colour fixed colour text label ... named arguments passed geom_text, geom_label geom_richtext","code":""},{"path":"https://david-barnett.github.io/microViz/reference/Ordination-labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create list for ord_plot() *_lab_style arguments — Ordination-labels","text":"named list","code":""},{"path":"https://david-barnett.github.io/microViz/reference/Ordination-labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create list for ord_plot() *_lab_style arguments — Ordination-labels","text":"","code":"# These examples show styling of taxa labels with tax_lab_style(). # The same options are available for constraint labels in constrained # ordinations. constraint_lab_style() just has different default settings.  library(ggplot2)  # get example inflammatory bowel disease stool dataset from corncob package data(\"ibd\", package = \"microViz\")  # filter out rare taxa and clean up names etc ibd <- ibd %>%   tax_filter(min_prevalence = 3) %>%   tax_fix() %>%   phyloseq_validate()  # calculate a centered-log-ratio transformed PCA ordination ibd_ord <- ibd %>%   tax_transform(\"clr\", rank = \"Genus\") %>%   ord_calc(\"PCA\")  # basic plot with default label style ibd_ord %>% ord_plot(color = \"ibd\", plot_taxa = 1:10)   # Rotating labels: requires the ggtext package # # A fixed coordinate ratio must be set to ensure label rotation # matches the vectors. It is also helpful to set the vector and label length # multipliers manually for a good look. Rotated labels are justified to the # 'sides' automatically by tax_lab_style() with justify = 'auto' ibd_ord %>%   ord_plot(     color = \"ibd\", plot_taxa = 1:7,     tax_vec_length = 1.3, tax_lab_length = 1.3,     tax_lab_style = tax_lab_style(max_angle = 90)   ) +   coord_fixed(ratio = 1, clip = \"off\", xlim = c(-3.5, 3.5))   # You can use text instead of labels # - a bold fontface helps text to stand out # - see ?ggplot2::geom_text for all settings available ibd_ord %>%   ord_plot(     color = \"ibd\", plot_taxa = 1:7,     tax_vec_length = 1.3, tax_lab_length = 1.4,     tax_lab_style = tax_lab_style(       type = \"text\", max_angle = 90, size = 2.5, fontface = \"bold.italic\"     )   ) +   coord_fixed(ratio = 1, clip = \"off\", xlim = c(-3.5, 3.5))   # With text you can prevent overlaps with check_overlap = TRUE ibd_ord %>%   ord_plot(     color = \"ibd\", plot_taxa = 1:12,     tax_vec_length = 1.3, tax_lab_length = 1.4,     tax_lab_style = tax_lab_style(       type = \"text\", max_angle = 90, size = 3, fontface = \"bold.italic\",       check_overlap = TRUE     )   ) +   coord_fixed(ratio = 1, clip = \"off\", xlim = c(-3.5, 3.5))   # With labels, you can reduce the padding and line weight to free space # but check_overlap is not available # see ?ggtext::geom_richtext for more possibilities ibd_ord %>%   ord_plot(     color = \"ibd\", plot_taxa = 1:7,     tax_vec_length = 1.3, tax_lab_length = 1.35,     tax_lab_style = tax_lab_style(       max_angle = 90, fontface = \"italic\", size = 2.5, fill = \"grey95\",       label.size = 0.1, # width outline       label.padding = unit(0.1, \"lines\"),       label.r = unit(0, \"lines\") # reduces rounding of corners to radius 0     )   ) +   coord_fixed(ratio = 1, clip = \"off\", xlim = c(-3.5, 3.5))   # Perpendicular angled labels/text are possible ibd_ord %>%   ord_plot(     color = \"ibd\", plot_taxa = 1:12,     tax_lab_style = tax_lab_style(       type = \"text\", max_angle = 90, perpendicular = TRUE, size = 3,       check_overlap = TRUE     )   ) +   coord_fixed(ratio = 1, clip = \"off\", xlim = c(-3.5, 3.5))    # You can limit and/or attenuate the angle of rotation by: #  - setting a lower max_angle #  - decreasing the aspect_ratio in the tax_lab_style call ibd_ord %>%   ord_plot(     shape = \"circle\", color = \"ibd\", plot_taxa = 1:7,     tax_vec_length = 1.3, tax_lab_length = 1.3,     tax_lab_style = tax_lab_style(       max_angle = 10, size = 2, label.size = 0.1,       label.padding = unit(0.1, \"lines\"), label.r = unit(0, \"lines\")     )   ) +   coord_fixed(ratio = 1, clip = \"off\", xlim = c(-3.5, 3.5))   ibd_ord %>%   ord_plot(     shape = \"circle\", color = \"ibd\", plot_taxa = 1:7,     tax_vec_length = 1.3, tax_lab_length = 1.3,     tax_lab_style = tax_lab_style(       max_angle = 90, size = 2, label.size = 0.1, aspect_ratio = 0.5,       label.padding = unit(0.1, \"lines\"), label.r = unit(0, \"lines\")     )   ) +   coord_fixed(ratio = 1, clip = \"off\", xlim = c(-3.5, 3.5))   # another example with some extras # ibd_ord %>%   ord_plot(     shape = \"circle filled\", fill = \"ibd\",     plot_taxa = 1:10,     taxon_renamer = function(x) stringr::str_replace_all(x, \"_\", \" \"),     tax_vec_length = 2, tax_lab_length = 2.1,     tax_lab_style = tax_lab_style(       type = \"text\", max_angle = 90, size = 2.5,       fontface = \"bold.italic\", check_overlap = TRUE     )   ) +   coord_fixed(1, clip = \"off\", xlim = c(-5, 5)) +   theme(legend.position = c(0.8, 0.2), legend.background = element_rect()) +   stat_chull(mapping = aes(colour = ibd, fill = ibd), alpha = 0.1) #> Warning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2 #> 3.5.0. #> ℹ Please use the `legend.position.inside` argument of `theme()` instead."},{"path":"https://david-barnett.github.io/microViz/reference/add_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Add paths connecting points on a ggplot scatterplot — add_paths","title":"Add paths connecting points on a ggplot scatterplot — add_paths","text":"Useful tracing select individuals time ordination plot. Samples phyloseq must arranged order timepoint path connections drawn correct order! can arrange samples timepoint order ps_arrange.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/add_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add paths connecting points on a ggplot scatterplot — add_paths","text":"","code":"add_paths(   ggplot,   id_var,   id_values,   mapping = NULL,   arrow = grid::arrow(length = grid::unit(2, units = \"mm\")),   ... )"},{"path":"https://david-barnett.github.io/microViz/reference/add_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add paths connecting points on a ggplot scatterplot — add_paths","text":"ggplot ggplot scatterplot output ord_plot id_var name variable used identify grouping points id_values values id_var variable used identify groups points draw mapping ggplot aesthetics created aes(), e.g. aes(colour = ?) - group already set id_var internally! arrow arrowhead add path, NULL none ... additional arguments passed geom_path","code":""},{"path":"https://david-barnett.github.io/microViz/reference/add_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add paths connecting points on a ggplot scatterplot — add_paths","text":"ggplot added layer geom_path","code":""},{"path":"https://david-barnett.github.io/microViz/reference/add_paths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add paths connecting points on a ggplot scatterplot — add_paths","text":"","code":"library(ggplot2) data(\"dietswap\", package = \"microbiome\")  # arrange by timepoint first (or whatever your own time variable is) dietswap %>%   ps_arrange(timepoint) %>%   tax_fix() %>%   tax_transform(\"clr\", rank = \"Genus\") %>%   ord_calc(method = \"PCA\") %>%   ord_plot(colour = \"timepoint\", alpha = 0.5, size = 2) %>%   add_paths(     id_var = \"subject\", id_values = c(\"azl\", \"byn\"),     mapping = aes(colour = timepoint), linewidth = 1.5     # size = 1.5 # size instead of linewidth in older ggplot2 versions   )   # paths do NOT connect points in the correct order without arranging first dietswap %>%   tax_fix() %>%   tax_transform(\"clr\", rank = \"Genus\") %>%   ord_calc(method = \"PCA\") %>%   ord_plot(colour = \"timepoint\", alpha = 0.5) %>%   add_paths(     id_var = \"subject\", id_values = c(\"azl\", \"byn\"),     mapping = aes(colour = timepoint), linewidth = 1.5     # size = 1.5 # size instead of linewidth in older ggplot2 versions   ) +   ggtitle(\"WRONG PATH ORDER\", \"use ps_arrange first!\")"},{"path":"https://david-barnett.github.io/microViz/reference/adjacent_side.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple heatmap helper to get a default adjacent side for another annotation — adjacent_side","title":"Simple heatmap helper to get a default adjacent side for another annotation — adjacent_side","text":"Simple heatmap helper get default adjacent side another annotation","code":""},{"path":"https://david-barnett.github.io/microViz/reference/adjacent_side.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple heatmap helper to get a default adjacent side for another annotation — adjacent_side","text":"","code":"adjacent_side(side = c(\"top\", \"right\", \"bottom\", \"left\"))"},{"path":"https://david-barnett.github.io/microViz/reference/adjacent_side.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple heatmap helper to get a default adjacent side for another annotation — adjacent_side","text":"side one \"top\", \"right\", \"bottom\", \"left\"","code":""},{"path":"https://david-barnett.github.io/microViz/reference/adjacent_side.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple heatmap helper to get a default adjacent side for another annotation — adjacent_side","text":"character","code":""},{"path":"https://david-barnett.github.io/microViz/reference/adjacent_side.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple heatmap helper to get a default adjacent side for another annotation — adjacent_side","text":"","code":"adjacent_side(\"top\") #> [1] \"right\""},{"path":"https://david-barnett.github.io/microViz/reference/anno_cat.html","id":null,"dir":"Reference","previous_headings":"","what":"Create colored rectangle annotations for categorical data — anno_cat","title":"Create colored rectangle annotations for categorical data — anno_cat","text":"Similar anno_simple individual boxes!","code":""},{"path":"https://david-barnett.github.io/microViz/reference/anno_cat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create colored rectangle annotations for categorical data — anno_cat","text":"","code":"anno_cat(   x,   which,   renamer = identity,   col = distinct_palette(),   width = NULL,   height = NULL,   box_col = \"white\",   box_lwd = 0.5,   border_col = NA,   border_lwd = 1,   legend = TRUE,   legend_title = \"\" )"},{"path":"https://david-barnett.github.io/microViz/reference/anno_cat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create colored rectangle annotations for categorical data — anno_cat","text":"x data vector, treated categorical Whether column annotation row annotation? renamer function renaming variable values legend col colors vector, least long unique(x), optionally named x levels width grid unit object NULL height grid unit object NULL box_col colour boxes around individual cells box_lwd line width boxes around individual cells border_col colour border around cells border_lwd line width border around cells legend generate legend annotation (attached attribute heatmap, automatically included plot) legend_title title legend, drawn","code":""},{"path":"https://david-barnett.github.io/microViz/reference/anno_cat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create colored rectangle annotations for categorical data — anno_cat","text":"AnnotationFunction","code":""},{"path":"https://david-barnett.github.io/microViz/reference/anno_cat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create colored rectangle annotations for categorical data — anno_cat","text":"","code":"library(ComplexHeatmap) #> Loading required package: grid #> ======================================== #> ComplexHeatmap version 2.23.1 #> Bioconductor page: http://bioconductor.org/packages/ComplexHeatmap/ #> Github page: https://github.com/jokergoo/ComplexHeatmap #> Documentation: http://jokergoo.github.io/ComplexHeatmap-reference #>  #> If you use it in published research, please cite either one: #> - Gu, Z. Complex Heatmap Visualization. iMeta 2022. #> - Gu, Z. Complex heatmaps reveal patterns and correlations in multidimensional  #>     genomic data. Bioinformatics 2016. #>  #>  #> The new InteractiveComplexHeatmap package can directly export static  #> complex heatmaps into an interactive Shiny app with zero effort. Have a try! #>  #> This message can be suppressed by: #>   suppressPackageStartupMessages(library(ComplexHeatmap)) #> ======================================== # draw the annotation without a heatmap, you will never normally do this! vp <- viewport(width = 0.75, height = 0.75)  grid::grid.newpage() pushViewport(vp) cats <- letters[1:4] draw(anno_cat(cats, which = \"row\"))   grid::grid.newpage() pushViewport(vp) draw(   anno_cat(     x = cats, col = structure(names = cats, 1:4), which = \"column\",     box_col = \"black\", box_lwd = 5   ) )   # developer note # # list of annotations can be split and ordered (adding NULL makes a list) # https://jokergoo.github.io/ComplexHeatmap-reference/book/a-list-of-heatmaps.html # (section #4.8 concatenate-only-the-annotations) grid::grid.newpage() pushViewport(vp)  annoList <- rowAnnotation(   hi = anno_cat(cats, which = \"row\", border_col = \"black\") ) +   NULL draw(object = annoList, row_split = c(1, 1:3), row_order = 4:1) pushViewport(viewport(x = 0.6)) draw(anno_cat(cats, \"row\", legend_title = \"abcd\") %>% attr(\"Legend\"))"},{"path":"https://david-barnett.github.io/microViz/reference/anno_cat_legend.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience function for generating a legend for anno_cat annotations. — anno_cat_legend","title":"Convenience function for generating a legend for anno_cat annotations. — anno_cat_legend","text":"Convenience function generating legend anno_cat annotations.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/anno_cat_legend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience function for generating a legend for anno_cat annotations. — anno_cat_legend","text":"","code":"anno_cat_legend(col, x = NULL, renamer = identity, title = \"\", ...)"},{"path":"https://david-barnett.github.io/microViz/reference/anno_cat_legend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience function for generating a legend for anno_cat annotations. — anno_cat_legend","text":"col vector colors, named levels data (e.g. x) named x optional: vector data pair unnamed col check named col renamer function applied generate labels: names(col) levels x title title legend ... Arguments passed ComplexHeatmap::Legend labels Labels corresponding . specified, values taken labels. nrow legend represented grids, nrow controls number rows grids grids arranged multiple rows. ncol Similar nrow, ncol controls number columns grids grids arranged multiple columns. Note time one nrow ncol can specified. by_row legend grids arranged rows columns? grid_height height legend grid. can also control height continuous legend horizontal. grid_width width legend grid. can also control width continuous legend vertical. gap legend grids put multiple rows columns, controls gap neighbouring rows columns, measured unit object. labels_gp Graphic parameters labels. labels_rot Text rotation labels. used horizontal continuous legend. border Color legend grid borders. also works ticks continuous legend. type Type legends. value can one grid, points, lines boxplot. direction Direction legend, vertical horizontal? title_position Position title relative legend. topleft, topcenter, leftcenter-rot lefttop-rot vertical legend leftcenter, lefttop  horizontal legend. title_gap Gap title legend body.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/anno_cat_legend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenience function for generating a legend for anno_cat annotations. — anno_cat_legend","text":"ComplexHeatmap Legend class object","code":""},{"path":"https://david-barnett.github.io/microViz/reference/anno_cat_legend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convenience function for generating a legend for anno_cat annotations. — anno_cat_legend","text":"","code":"grid::grid.newpage() ComplexHeatmap::draw(   anno_cat_legend(     col = c(\"ibd\" = \"blue\", \"nonibd\" = \"grey90\"),     renamer = toupper, title = \"Hi there, I'm a title\"   ) )"},{"path":"https://david-barnett.github.io/microViz/reference/anno_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to specify simple comp_heatmap annotation for other sample data — anno_sample","title":"Helper to specify simple comp_heatmap annotation for other sample data — anno_sample","text":"Use argument sampleAnnotation(), used comp_heatmap() sample_anno argument. creates vector, sampleAnnotation() interprets simple annotation, set colours legend parameters simple annotation arguments sampleAnnotation.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/anno_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to specify simple comp_heatmap annotation for other sample data — anno_sample","text":"","code":"anno_sample(var, fun = identity, data = NULL, samples = NULL)"},{"path":"https://david-barnett.github.io/microViz/reference/anno_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to specify simple comp_heatmap annotation for other sample data — anno_sample","text":"var name variable use annotation data fun function transform variable var data OPTIONAL phyloseq psExtra, set override use data heatmap samples OPTIONAL selection vector sample names, set providing data argument override default","code":""},{"path":"https://david-barnett.github.io/microViz/reference/anno_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to specify simple comp_heatmap annotation for other sample data — anno_sample","text":"vector values","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/anno_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper to specify simple comp_heatmap annotation for other sample data — anno_sample","text":"","code":"# see `?sampleAnnotation()`"},{"path":"https://david-barnett.github.io/microViz/reference/anno_sample_cat.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to specify comp_heatmap annotation for categorical sample data — anno_sample_cat","title":"Helper to specify comp_heatmap annotation for categorical sample data — anno_sample_cat","text":"Use argument sampleAnnotation(), used comp_heatmap() sample_anno argument.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/anno_sample_cat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to specify comp_heatmap annotation for categorical sample data — anno_sample_cat","text":"","code":"anno_sample_cat(   var,   col = distinct_palette(),   renamer = identity,   size = grid::unit(5, \"mm\"),   legend = TRUE,   legend_title = \"\",   box_col = \"white\",   box_lwd = 0.5,   border_col = NA,   border_lwd = 1,   data = NULL,   samples = NULL,   which = NULL,   ... )"},{"path":"https://david-barnett.github.io/microViz/reference/anno_sample_cat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to specify comp_heatmap annotation for categorical sample data — anno_sample_cat","text":"var name variable use annotation data col colors vector, least long unique(x), optionally named x levels renamer function rename levels variable var size width height grid unit object legend generate legend annotation (attached attribute heatmap, automatically included plot) legend_title title legend, drawn box_col colour boxes around individual cells box_lwd line width boxes around individual cells border_col colour border around cells border_lwd line width border around cells data OPTIONAL phyloseq psExtra, set override use data heatmap samples OPTIONAL selection vector sample names, set providing data argument override default OPTIONAL indicating 'column' 'row' annotation, set providing data argument override default ... Arguments passed anno_cat x data vector, treated categorical width grid unit object NULL height grid unit object NULL","code":""},{"path":"https://david-barnett.github.io/microViz/reference/anno_sample_cat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to specify comp_heatmap annotation for categorical sample data — anno_sample_cat","text":"vector values","code":""},{"path":"https://david-barnett.github.io/microViz/reference/anno_sample_cat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper to specify comp_heatmap annotation for categorical sample data — anno_sample_cat","text":"","code":"library(\"ComplexHeatmap\") data(\"ibd\", package = \"microViz\") psq <- ibd samples <- phyloseq::sample_names(psq)  # makes a function that takes data, taxa and which (at minimum) fun <- anno_sample_cat(var = \"ibd\")  # manually specify the prevalence barplot function by giving it data etc. heatmapAnnoFunction <- fun(data = psq, which = \"row\", samples = samples)  # draw the barplot without a heatmap, you will never normally do this! vp <- viewport(width = 0.75, height = 0.75)  grid::grid.newpage() pushViewport(vp) draw(heatmapAnnoFunction) # A legend is attached by default to anno_cat() output, let's plot that. pushViewport(viewport(x = 0.75)) draw(attr(heatmapAnnoFunction, \"Legend\"))   # change some options and specify the data up front grid::grid.newpage() pushViewport(vp) anno_sample_cat(   data = psq, var = \"DiseaseState\", samples = samples, which = \"column\",   size = grid::unit(5, \"cm\"), col = distinct_palette(pal = \"kelly\") ) %>%   draw()"},{"path":"https://david-barnett.github.io/microViz/reference/anno_tax_box.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to specify heatmap annotation for showing taxa abundance on boxplot — anno_tax_box","title":"Helper to specify heatmap annotation for showing taxa abundance on boxplot — anno_tax_box","text":"Use argument taxAnnotation(), used cor_heatmap comp_heatmap tax_anno argument.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/anno_tax_box.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to specify heatmap annotation for showing taxa abundance on boxplot — anno_tax_box","text":"","code":"anno_tax_box(   undetected = 0,   only_detected = TRUE,   trans = \"compositional\",   zero_replace = 0,   use_counts = TRUE,   size = grid::unit(30, \"mm\"),   border = TRUE,   gp = grid::gpar(fill = \"#CCCCCC\"),   ylim = NULL,   extend = 0.05,   outline = TRUE,   box_width = 0.6,   pch = 1,   pointsize = grid::unit(0.5, \"mm\"),   axis = TRUE,   ...,   data = NULL,   taxa = NULL,   which = NULL )"},{"path":"https://david-barnett.github.io/microViz/reference/anno_tax_box.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to specify heatmap annotation for showing taxa abundance on boxplot — anno_tax_box","text":"undetected value taxa classed detected/present sample only_detected plot values samples taxon abundance > undetected trans name transformation suitable tax_transform, function calling tax_transform, /tax_scale, (function must take phyloseq psExtra, return one) zero_replace zero_replace value tax_transform, ignored trans function use_counts try retrieve counts data object? size width height grid unit object border Wether draw borders annotation region? gp Graphic parameters boxes. length graphic parameters one number observations. ylim Data ranges. extend extension side ylim. value percent value corresponding ylim[2] - ylim[1]. outline Whether draw outline boxplots? box_width Relative width boxes. value smaller one. pch Point style. pointsize size outlier points, grid::unit() object axis Whether add axis? ... Arguments passed ComplexHeatmap::anno_boxplot axis_param parameters controlling axis. See default_axis_param possible settings default parameters. data OPTIONAL phyloseq psExtra, set override use data heatmap taxa OPTIONAL selection vector taxa (names, numbers logical), set providing data argument override default OPTIONAL indicating 'column' 'row' annotation, set providing data argument override default","code":""},{"path":"https://david-barnett.github.io/microViz/reference/anno_tax_box.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to specify heatmap annotation for showing taxa abundance on boxplot — anno_tax_box","text":"function ComplexHeatmap AnnotationFunction object","code":""},{"path":"https://david-barnett.github.io/microViz/reference/anno_tax_box.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper to specify heatmap annotation for showing taxa abundance on boxplot — anno_tax_box","text":"","code":"library(\"ComplexHeatmap\") data(\"ibd\", package = \"microViz\") psq <- tax_filter(ibd, min_prevalence = 5) psq <- tax_mutate(psq, Species = NULL) psq <- tax_fix(psq) psq <- tax_agg(psq, rank = \"Family\") taxa <- tax_top(psq, n = 15, rank = \"Family\") # makes a function that takes data, taxa and which (at minimum) fun <- anno_tax_box() # manually specify the prevalence barplot function by giving it data etc. heatmapAnnoFunction <- fun(data = psq, which = \"column\", taxa = taxa) # draw the barplot without a heatmap, you will never normally do this! vp <- viewport(width = 0.75, height = 0.75) grid.newpage() pushViewport(vp) draw(heatmapAnnoFunction)   # let's change some style options and specify the data up front grid::grid.newpage() pushViewport(vp) draw(anno_tax_box(   data = psq, taxa = taxa, which = \"row\", pointsize = grid::unit(1, \"mm\"),   gp = grid::gpar(fill = \"red\"), border = FALSE, box_width = 0.2 ))   # clear drawings grid::grid.newpage()"},{"path":"https://david-barnett.github.io/microViz/reference/anno_tax_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to specify heatmap annotation for showing taxa abundance density plot — anno_tax_density","title":"Helper to specify heatmap annotation for showing taxa abundance density plot — anno_tax_density","text":"Use argument taxAnnotation(), used cor_heatmap comp_heatmap tax_anno argument.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/anno_tax_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to specify heatmap annotation for showing taxa abundance density plot — anno_tax_density","text":"","code":"anno_tax_density(   undetected = 0,   only_detected = TRUE,   trans = \"log10p\",   zero_replace = 0,   use_counts = TRUE,   size = grid::unit(30, \"mm\"),   type = c(\"lines\", \"violin\", \"heatmap\"),   xlim = NULL,   heatmap_colors = c(\"white\", \"forestgreen\"),   joyplot_scale = 1.5,   border = TRUE,   gp = grid::gpar(fill = \"lightgrey\"),   axis = TRUE,   ...,   data = NULL,   taxa = NULL,   which = NULL )"},{"path":"https://david-barnett.github.io/microViz/reference/anno_tax_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to specify heatmap annotation for showing taxa abundance density plot — anno_tax_density","text":"undetected value taxa classed detected/present sample only_detected plot values samples taxon abundance > undetected trans name transformation suitable tax_transform, function calling tax_transform, /tax_scale, (function must take phyloseq psExtra, return one) zero_replace zero_replace value tax_transform, ignored trans function use_counts try retrieve counts data object? size width height grid unit object type Type graphics represent density distribution. \"lines\" normal density plot; \"violine\" violin plot \"heatmap\" heatmap visualization density distribution. xlim Range x-axis. heatmap_colors vector colors interpolating density values. joyplot_scale Relative height density distribution. value higher 1 increases height density distribution plot represented -called \"joyplot\". border Wether draw borders annotation region? gp Graphic parameters boxes. length graphic parameters one number observations. axis Whether add axis? ... Arguments passed ComplexHeatmap::anno_density axis_param parameters controlling axis. See default_axis_param possible settings default parameters. data OPTIONAL phyloseq psExtra, set override use data heatmap taxa OPTIONAL selection vector taxa (names, numbers logical), set providing data argument override default OPTIONAL indicating 'column' 'row' annotation, set providing data argument override default","code":""},{"path":"https://david-barnett.github.io/microViz/reference/anno_tax_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to specify heatmap annotation for showing taxa abundance density plot — anno_tax_density","text":"function ComplexHeatmap AnnotationFunction object","code":""},{"path":"https://david-barnett.github.io/microViz/reference/anno_tax_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper to specify heatmap annotation for showing taxa abundance density plot — anno_tax_density","text":"","code":"library(\"ComplexHeatmap\") data(\"ibd\", package = \"microViz\") psq <- tax_filter(ibd, min_prevalence = 5) psq <- tax_mutate(psq, Species = NULL) psq <- tax_fix(psq) psq <- tax_agg(psq, rank = \"Family\") taxa <- tax_top(psq, n = 15, rank = \"Family\") # makes a function that takes data, taxa and which (at minimum) fun <- anno_tax_density() # manually specify the density plot function by giving it data etc. heatmapAnnoFunction <- fun(data = psq, which = \"column\", taxa = taxa)  # draw the density plot without a heatmap, you will never normally do this! vp <- viewport(width = 0.75, height = 0.75) grid.newpage() pushViewport(vp) draw(heatmapAnnoFunction)   # let's change some style options and specify the data up front grid.newpage() pushViewport(vp) draw(anno_tax_density(   data = psq, taxa = taxa, which = \"row\",   gp = grid::gpar(fill = \"red\"), border = FALSE ))   # heatmap type, with alternative transformation and axis_param grid.newpage() pushViewport(vp) draw(anno_tax_density(   data = psq, taxa = taxa, which = \"row\", type = \"heatmap\",   trans = \"log2\", zero_replace = \"halfmin\", axis_param = list(labels_rot = 0) ))   grid.newpage()"},{"path":"https://david-barnett.github.io/microViz/reference/anno_tax_prev.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to specify heatmap annotation for showing taxa prevalence as barplot — anno_tax_prev","title":"Helper to specify heatmap annotation for showing taxa prevalence as barplot — anno_tax_prev","text":"Use argument taxAnnotation(), used cor_heatmap comp_heatmap tax_anno argument.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/anno_tax_prev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to specify heatmap annotation for showing taxa prevalence as barplot — anno_tax_prev","text":"","code":"anno_tax_prev(   undetected = 0,   use_counts = TRUE,   size = grid::unit(20, \"mm\"),   baseline = 0,   border = TRUE,   bar_width = 0.6,   gp = grid::gpar(fill = \"#CCCCCC\"),   ylim = NULL,   extend = 0.05,   axis = TRUE,   ...,   data = NULL,   taxa = NULL,   which = NULL )"},{"path":"https://david-barnett.github.io/microViz/reference/anno_tax_prev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to specify heatmap annotation for showing taxa prevalence as barplot — anno_tax_prev","text":"undetected value taxa classed detected/present sample use_counts try retrieve counts data object? size width height grid unit object baseline baseline bars. value \"min\" \"max\", numeric value. enforced zero stacked barplots. border Wether draw borders annotation region? bar_width Relative width bars. value smaller one. gp Graphic parameters bars. length graphic parameter can 1, length x x vector, number columns x x matrix. ylim Data ranges. default range(x) x vector, range(rowSums(x)) x matrix. extend extension side ylim. value percent value corresponding ylim[2] - ylim[1]. axis Whether add axis? ... Arguments passed ComplexHeatmap::anno_barplot axis_param parameters controlling axis. See default_axis_param possible settings default parameters. data OPTIONAL phyloseq psExtra, set override use data heatmap taxa OPTIONAL selection vector taxa (names, numbers logical), set providing data argument override default OPTIONAL indicating 'column' 'row' annotation, set providing data argument override default","code":""},{"path":"https://david-barnett.github.io/microViz/reference/anno_tax_prev.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to specify heatmap annotation for showing taxa prevalence as barplot — anno_tax_prev","text":"function ComplexHeatmap AnnotationFunction object","code":""},{"path":"https://david-barnett.github.io/microViz/reference/anno_tax_prev.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper to specify heatmap annotation for showing taxa prevalence as barplot — anno_tax_prev","text":"","code":"library(\"ComplexHeatmap\") data(\"ibd\", package = \"microViz\") psq <- tax_filter(ibd, min_prevalence = 5) psq <- tax_mutate(psq, Species = NULL) psq <- tax_fix(psq) psq <- tax_agg(psq, rank = \"Family\") taxa <- tax_top(psq, n = 15, rank = \"Family\")  # makes a function that takes data, taxa and which (at minimum) fun <- anno_tax_prev()  # manually specify the prevalence barplot function by giving it data etc. heatmapAnnoFunction <- fun(data = psq, which = \"row\", taxa = taxa)  # draw the barplot without a heatmap, you will never normally do this! vp <- viewport(width = 0.75, height = 0.75)  grid::grid.newpage() pushViewport(vp) draw(heatmapAnnoFunction)   # let's change some style options and specify the data up front grid::grid.newpage() pushViewport(vp) anno_tax_prev(   data = psq, taxa = taxa, which = \"column\",   gp = grid::gpar(fill = \"red\", lwd = 3, alpha = 0.5),   border = FALSE, bar_width = 1 ) %>%   draw()   # clear drawings grid::grid.newpage()"},{"path":"https://david-barnett.github.io/microViz/reference/anno_var_box.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to specify heatmap annotation for variable distribution boxplots — anno_var_box","title":"Helper to specify heatmap annotation for variable distribution boxplots — anno_var_box","text":"Use argument varAnnotation(), used cor_heatmap var_anno() argument.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/anno_var_box.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to specify heatmap annotation for variable distribution boxplots — anno_var_box","text":"","code":"anno_var_box(   fun = identity,   size = grid::unit(30, \"mm\"),   border = TRUE,   gp = grid::gpar(fill = \"#CCCCCC\"),   ylim = NULL,   extend = 0.05,   outline = TRUE,   box_width = 0.6,   pch = 1,   pointsize = grid::unit(0.5, \"mm\"),   axis = TRUE,   ...,   data = NULL,   vars = NULL,   which = NULL )"},{"path":"https://david-barnett.github.io/microViz/reference/anno_var_box.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to specify heatmap annotation for variable distribution boxplots — anno_var_box","text":"fun function applied variables, apply() size width height grid unit object border Wether draw borders annotation region? gp Graphic parameters boxes. length graphic parameters one number observations. ylim Data ranges. extend extension side ylim. value percent value corresponding ylim[2] - ylim[1]. outline Whether draw outline boxplots? box_width Relative width boxes. value smaller one. pch Point style. pointsize size outlier points, grid::unit() object axis Whether add axis? ... Arguments passed ComplexHeatmap::anno_boxplot axis_param parameters controlling axis. See default_axis_param possible settings default parameters. data OPTIONAL phyloseq psExtra, set override use data heatmap vars OPTIONAL selection vector variable names, set providing data argument override default OPTIONAL indicating 'column' 'row' annotation, set providing data argument override default","code":""},{"path":"https://david-barnett.github.io/microViz/reference/anno_var_box.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to specify heatmap annotation for variable distribution boxplots — anno_var_box","text":"function ComplexHeatmap AnnotationFunction object","code":""},{"path":"https://david-barnett.github.io/microViz/reference/anno_var_box.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper to specify heatmap annotation for variable distribution boxplots — anno_var_box","text":"","code":"library(ComplexHeatmap) set.seed(123) fakeData <- as.data.frame.matrix(matrix(rnorm(500, 10, 3), ncol = 10)) names(fakeData) <- paste0(\"var_\", 1:10)  # draw the boxplot without a heatmap, you will never normally do this! vp <- viewport(width = 0.75, height = 0.75) grid.newpage() pushViewport(vp) draw(   anno_var_box(data = fakeData, vars = names(fakeData), which = \"column\") )   grid.newpage() pushViewport(vp) draw(   anno_var_box(     data = fakeData, fun = function(x) log(x + 1),     vars = rev(names(fakeData)),     which = \"row\"   ) )"},{"path":"https://david-barnett.github.io/microViz/reference/anno_var_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to specify heatmap annotation for variable distribution density plot — anno_var_density","title":"Helper to specify heatmap annotation for variable distribution density plot — anno_var_density","text":"Use argument varAnnotation(), used cor_heatmap var_anno argument.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/anno_var_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to specify heatmap annotation for variable distribution density plot — anno_var_density","text":"","code":"anno_var_density(   fun = identity,   size = grid::unit(30, \"mm\"),   type = c(\"lines\", \"violin\", \"heatmap\"),   xlim = NULL,   heatmap_colors = c(\"white\", \"forestgreen\"),   joyplot_scale = 1.5,   border = TRUE,   gp = grid::gpar(fill = \"lightgrey\"),   axis = TRUE,   ...,   data = NULL,   vars = NULL,   which = NULL )"},{"path":"https://david-barnett.github.io/microViz/reference/anno_var_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to specify heatmap annotation for variable distribution density plot — anno_var_density","text":"fun function applied variables, apply() size width height grid unit object type Type graphics represent density distribution. \"lines\" normal density plot; \"violine\" violin plot \"heatmap\" heatmap visualization density distribution. xlim Range x-axis. heatmap_colors vector colors interpolating density values. joyplot_scale Relative height density distribution. value higher 1 increases height density distribution plot represented -called \"joyplot\". border Wether draw borders annotation region? gp Graphic parameters boxes. length graphic parameters one number observations. axis Whether add axis? ... Arguments passed ComplexHeatmap::anno_density axis_param parameters controlling axis. See default_axis_param possible settings default parameters. data OPTIONAL phyloseq psExtra, set override use data heatmap vars OPTIONAL selection vector variable names, set providing data argument override default OPTIONAL indicating 'column' 'row' annotation, set providing data argument override default","code":""},{"path":"https://david-barnett.github.io/microViz/reference/anno_var_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to specify heatmap annotation for variable distribution density plot — anno_var_density","text":"function ComplexHeatmap AnnotationFunction object","code":""},{"path":"https://david-barnett.github.io/microViz/reference/anno_var_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper to specify heatmap annotation for variable distribution density plot — anno_var_density","text":"","code":"library(ComplexHeatmap) set.seed(123) fakeData <- as.data.frame.matrix(matrix(rnorm(500, 10, 3), ncol = 10)) names(fakeData) <- paste0(\"var_\", 1:10)  # draw the plots without a heatmap, you will never normally do this! vp <- viewport(width = 0.75, height = 0.75) grid.newpage() pushViewport(vp) draw(   anno_var_density(data = fakeData, vars = names(fakeData), which = \"row\") )   grid.newpage() pushViewport(vp) draw(   anno_var_density(     data = fakeData, fun = function(x) log(x + 1),     vars = rev(names(fakeData)), type = \"heatmap\",     which = \"column\"   ) )"},{"path":"https://david-barnett.github.io/microViz/reference/anno_var_hist.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to specify heatmap annotation for variable distribution histograms — anno_var_hist","title":"Helper to specify heatmap annotation for variable distribution histograms — anno_var_hist","text":"Use argument varAnnotation(), used cor_heatmap var_anno argument.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/anno_var_hist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to specify heatmap annotation for variable distribution histograms — anno_var_hist","text":"","code":"anno_var_hist(   fun = identity,   size = grid::unit(30, \"mm\"),   n_breaks = 11,   border = FALSE,   gp = grid::gpar(fill = \"#CCCCCC\"),   axis = TRUE,   ...,   data = NULL,   vars = NULL,   which = NULL )"},{"path":"https://david-barnett.github.io/microViz/reference/anno_var_hist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to specify heatmap annotation for variable distribution histograms — anno_var_hist","text":"fun function applied variables, apply() size width height grid unit object n_breaks number breaks border Wether draw borders annotation region? gp Graphic parameters boxes. length graphic parameters one number observations. axis Whether add axis? ... Arguments passed ComplexHeatmap::anno_density axis_param parameters controlling axis. See default_axis_param possible settings default parameters. data OPTIONAL phyloseq psExtra, set override use data heatmap vars OPTIONAL selection vector variable names, set providing data argument override default OPTIONAL indicating 'column' 'row' annotation, set providing data argument override default","code":""},{"path":"https://david-barnett.github.io/microViz/reference/anno_var_hist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to specify heatmap annotation for variable distribution histograms — anno_var_hist","text":"function ComplexHeatmap AnnotationFunction object","code":""},{"path":"https://david-barnett.github.io/microViz/reference/anno_var_hist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper to specify heatmap annotation for variable distribution histograms — anno_var_hist","text":"","code":"library(ComplexHeatmap) set.seed(123) fakeData <- as.data.frame.matrix(matrix(rnorm(500, 10, 3), ncol = 10)) names(fakeData) <- paste0(\"var_\", 1:10)  # draw the histograms without a heatmap, you will never normally do this! vp <- viewport(width = 0.75, height = 0.75) grid.newpage() pushViewport(vp) draw(   anno_var_hist(data = fakeData, vars = names(fakeData), which = \"row\") )   grid.newpage() pushViewport(vp) draw(   anno_var_hist(     data = fakeData, fun = sqrt,     vars = rev(names(fakeData)), n_breaks = 5,     which = \"column\", gp = grid::gpar(fill = 2:6, lwd = c(0.9, 2.5))   ) )"},{"path":"https://david-barnett.github.io/microViz/reference/check_otutable_is_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal helper for ps_counts — check_otutable_is_counts","title":"Internal helper for ps_counts — check_otutable_is_counts","text":"Internal helper ps_counts","code":""},{"path":"https://david-barnett.github.io/microViz/reference/check_otutable_is_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal helper for ps_counts — check_otutable_is_counts","text":"","code":"check_otutable_is_counts(otu, warn)"},{"path":"https://david-barnett.github.io/microViz/reference/check_otutable_is_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal helper for ps_counts — check_otutable_is_counts","text":"otu phyloseq otu_table object. warn boolean \"error\" string control warning error behavior.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/comp_barplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot (grouped and ordered) compositional barplots — comp_barplot","title":"Plot (grouped and ordered) compositional barplots — comp_barplot","text":"Stacked barplots showing composition phyloseq samples specified number coloured taxa. Normally phyloseq object contain counts data, default comp_barplot() performs \"compositional\" taxa transformation , requires count input sample_order methods!","code":""},{"path":"https://david-barnett.github.io/microViz/reference/comp_barplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot (grouped and ordered) compositional barplots — comp_barplot","text":"","code":"comp_barplot(   ps,   tax_level,   n_taxa = 8,   tax_order = sum,   merge_other = TRUE,   taxon_renamer = function(x) identity(x),   sample_order = \"bray\",   order_with_all_taxa = FALSE,   label = \"SAMPLE\",   group_by = NA,   facet_by = NA,   bar_width = 1,   bar_outline_colour = \"grey5\",   bar_outline_width = 0.1,   palette = distinct_palette(n_taxa),   tax_transform_for_ordering = \"identity\",   tax_transform_for_plot = \"compositional\",   seriate_method = \"OLO_ward\",   keep_all_vars = TRUE,   interactive = FALSE,   max_taxa = 10000,   other_name = \"Other\",   x = \"SAMPLE\",   counts_warn = TRUE,   ... )"},{"path":"https://david-barnett.github.io/microViz/reference/comp_barplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot (grouped and ordered) compositional barplots — comp_barplot","text":"ps phyloseq object tax_level taxonomic aggregation level (rank_names(ps)) n_taxa many taxa show distinct colours (others grouped \"\") tax_order order taxa within bars, either function tax_sort (e.g. sum), vector () taxa names tax_level set order manually merge_other FALSE, taxa coloured/filled \"\" remain distinct, can bar outlines drawn around taxon_renamer function takes taxon names returns modified names legend sample_order vector sample names; distance measure dist_calc require phylogenetic tree; \"asis\" current order returned phyloseq::sample_names(ps) order_with_all_taxa TRUE, always use taxa (just top n_taxa) calculate distances needed sample ordering label name variable use labelling samples, \"SAMPLE\" sample names group_by splits dataset variable (must categorical) resulting list plots, one level group_by variable. facet_by facets plots variable (must categorical). group_by also set faceting occur separately plot group. bar_width default 1 avoids random gapping otherwise seen many samples (set less 1 introduce gaps samples) bar_outline_colour line colour separating taxa samples (use NA outlines) bar_outline_width width line separating taxa samples (outlines set bar_outline_colour = NA) palette palette taxa fill colours tax_transform_for_ordering transformation taxa values used ordering samples similarity tax_transform_for_plot default \"compositional\" draws proportions total counts per sample, reasonably use another transformation, e.g. \"identity\", truly quantitative microbiome profiling data seriate_method name ordering method suitable distance matrices (see ?seriation::seriate) keep_all_vars FALSE may speed internal melting ps_melt large phyloseq objects TRUE required post-hoc plot customisation interactive creates plot suitable use ggiraph max_taxa maximum distinct taxa groups show (really useful limiting complexity interactive plots e.g. within ord_explore) other_name name taxa N x name variable use x aesthetic: probably makes sense change also using facets (check one sample represented per bar!) counts_warn warning issued counts unavailable? TRUE, FALSE, \"error\" (passed ps_get) ... extra arguments passed facet_wrap() (facet_by NA)","code":""},{"path":"https://david-barnett.github.io/microViz/reference/comp_barplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot (grouped and ordered) compositional barplots — comp_barplot","text":"ggplot list harmonised ggplots","code":""},{"path":"https://david-barnett.github.io/microViz/reference/comp_barplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot (grouped and ordered) compositional barplots — comp_barplot","text":"sample_order: Either specify list sample names order manually, bars/samples can/sorted similarity, according specified distance measure (default 'bray'-curtis), seriate_method specifies seriation/ordering algorithm (default Ward hierarchical clustering optimal leaf ordering, see seriation::list_seriation_methods()) group_by: can group samples distinct plots levels variable phyloseq object. list ggplots produced can arranged flexibly patchwork package functions. want group several variables can create interaction variable interaction(var1, var2) phyloseq sample_data using comp_barplot. facet_by can allow faceting plot(s) grouping variable. Using approach less flexible using group_by means arrange list plots like group_by argument. Using facet_by equivalent adding call facet_wrap(facets = facet_by, scales = \"free\") plot(s). Calling facet_wrap() flexible option can add arguments like number rows etc. However must use keep_all_vars = TRUE add faceting manually. bar_width: gaps bars, unless want (decrease width argument add gaps bars). bar_outline_colour: Bar outlines default \"grey5\" almost black outlines. Use NA want outlines. merge_other: controls whether bar outlines can drawn around individual (lower abundance) taxa grouped \"\" category. want see diversity taxa \"\" use merge_taxa = FALSE, use TRUE prefer cleaner merged look palette: Default colouring consistent across multiple plots created group_by argument, defaults scheme retains colouring abundant taxa irrespective n_taxa","code":""},{"path":"https://david-barnett.github.io/microViz/reference/comp_barplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot (grouped and ordered) compositional barplots — comp_barplot","text":"","code":"library(ggplot2) data(dietswap, package = \"microbiome\")  # illustrative simple customised example dietswap %>%   ps_filter(timepoint == 1) %>%   comp_barplot(     tax_level = \"Family\", n_taxa = 8,     bar_outline_colour = NA,     sample_order = \"bray\",     bar_width = 0.7,     taxon_renamer = toupper   ) + coord_flip() #> Registered S3 method overwritten by 'seriation': #>   method         from  #>   reorder.hclust vegan   # change colour palette with the distinct_palette() function # remember to set the number of colours to the same as n_taxa argument! dietswap %>%   ps_filter(timepoint == 1) %>%   comp_barplot(     tax_level = \"Family\", n_taxa = 8,     bar_outline_colour = NA,     sample_order = \"bray\",     bar_width = 0.7,     palette = distinct_palette(8, pal = \"kelly\"),     taxon_renamer = toupper   ) + coord_flip()   # Order samples by the value of one of more sample_data variables. # Use ps_arrange and set sample_order = \"default\" in comp_barplot. # ps_mutate is also used here to create an informative variable for axis labelling dietswap %>%   ps_mutate(subject_timepoint = interaction(subject, timepoint)) %>%   ps_filter(nationality == \"AAM\", group == \"DI\", sex == \"female\") %>%   ps_arrange(desc(subject), desc(timepoint)) %>%   comp_barplot(     tax_level = \"Genus\", n_taxa = 12,     sample_order = \"default\",     bar_width = 0.7,     bar_outline_colour = \"black\",     order_with_all_taxa = TRUE,     label = \"subject_timepoint\"   ) + coord_flip()   # Order taxa differently: # By default, taxa are ordered by total sum across all samples # You can set a different function for calculating the order, e.g. median dietswap %>%   ps_filter(timepoint == 1) %>%   comp_barplot(tax_level = \"Genus\", tax_order = median) +   coord_flip()   # Or you can set the taxa order up front, with tax_sort() and use it as is dietswap %>%   ps_filter(timepoint == 1) %>%   tax_sort(at = \"Genus\", by = sum) %>%   comp_barplot(tax_level = \"Genus\", tax_order = \"asis\") +   coord_flip()   # how many taxa are in those light grey \"other\" bars? # set merge_other to find out (& remember to set a bar_outline_colour) dietswap %>%   ps_filter(timepoint == 1) %>%   comp_barplot(     tax_level = \"Genus\", n_taxa = 12, merge_other = FALSE, bar_outline_colour = \"grey50\",   ) +   coord_flip()    # Often to compare groups, average compositions are presented p1 <- phyloseq::merge_samples(dietswap, group = \"group\") %>%   comp_barplot(     tax_level = \"Genus\", n_taxa = 12,     sample_order = c(\"ED\", \"HE\", \"DI\"),     bar_width = 0.8   ) +   coord_flip() + labs(x = NULL, y = NULL) #> Warning: NAs introduced by coercion p1   # However that \"group-averaging\" approach hides a lot of within-group variation p2 <- comp_barplot(dietswap,   tax_level = \"Genus\", n_taxa = 12, group_by = \"group\",   sample_order = \"euclidean\", bar_outline_colour = NA ) %>%   patchwork::wrap_plots(nrow = 3, guides = \"collect\") &   coord_flip() & labs(x = NULL, y = NULL) &   theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) p2   # Only from p2 you can see that the apparently higher average relative abundance # of Oscillospira in group DI is probably driven largely by a subgroup # of DI samples with relatively high Oscillospira.  # make a list of 2 harmonised composition plots (grouped by sex) p <- comp_barplot(dietswap,   n_taxa = 15, tax_level = \"Genus\",   bar_outline_colour = \"black\", merge_other = TRUE,   sample_order = \"aitchison\", group_by = \"sex\" )  # plot them side by side with patchwork package patch <- patchwork::wrap_plots(p, ncol = 2, guides = \"collect\") patch & coord_flip() # make bars in all plots horizontal (note: use & instead of +)   # beautifying tweak # # modify one plot in place (flip the order of the samples in the 2nd plot) # notice that the scaling is for the x-axis # (that's because coord_flip is used afterwards when displaying the plots patch[[2]] <- patch[[2]] + scale_x_discrete(limits = rev) #> Scale for x is already present. #> Adding another scale for x, which will replace the existing scale. # Explainer: rev() function takes current limits and reverses them. # You could also pass a completely arbitrary order, naming all samples  # you can theme all plots with the & operator patch & coord_flip() &   theme(axis.text.y = element_text(size = 5), legend.text = element_text(size = 6))  # See https://patchwork.data-imaginist.com/index.html"},{"path":"https://david-barnett.github.io/microViz/reference/comp_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw heatmap of microbiome composition across samples — comp_heatmap","title":"Draw heatmap of microbiome composition across samples — comp_heatmap","text":"Heatmap made ComplexHeatmap::Heatmap(), optional annotation taxa prevalence/abundance, /sample data. Transform data tax_transform() prior plotting (/scale tax_scale()). See heatmaps vignette examples use. Plotting \"compositional\" data can give idea dominant taxa sample. Plotting form log clr transformed (scaled) microbial features can highlight patterns. data ordered via selected seriation methods distances either transformed data (default) original count data (transformation). cell numbers printed can transformed independently colour scheme, affect ordering.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/comp_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw heatmap of microbiome composition across samples — comp_heatmap","text":"","code":"comp_heatmap(   data,   taxa = NA,   taxa_side = \"right\",   tax_anno = NULL,   taxon_renamer = identity,   samples = NA,   sample_side = adjacent_side(taxa_side),   sample_anno = NULL,   sample_names_show = FALSE,   colors = heat_palette(palette = \"Rocket\", rev = TRUE),   numbers = NULL,   sample_seriation = \"OLO_ward\",   sample_ser_dist = \"euclidean\",   sample_ser_counts = !sample_ser_dist %in% c(\"euclidean\", \"maximum\", \"manhattan\",     \"canberra\", \"binary\"),   sample_ser_trans = NULL,   tax_seriation = \"OLO_ward\",   tax_ser_dist = \"euclidean\",   tax_ser_counts = FALSE,   tax_ser_trans = NULL,   numbers_trans = NULL,   numbers_zero_replace = 0,   numbers_use_counts = TRUE,   grid_col = \"white\",   grid_lwd = 0.5,   name = \"Abd.\",   anno_tax = NULL,   ... )"},{"path":"https://david-barnett.github.io/microViz/reference/comp_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw heatmap of microbiome composition across samples — comp_heatmap","text":"data phyloseq phyloseq extra taxa list taxa include, NA taxa_side \"top\"/\"right\"/\"bottom\"/\"left\": controls heatmap orientation annotations specified tax_anno placed tax_anno NULL annotation function taxa: taxAnnotation() output. taxon_renamer function rename taxa plotting samples list samples include plot sample_side side show sample annotation , must adjacent taxa_side sample_anno NULL annotation function samples: sampleAnnotation() output. sample_names_show show sample names? (can control side rotation names ComplexHeatmap::Heatmap arguments) colors output heat_palette() set heatmap fill color scheme numbers output heat_numbers() draw numbers heatmap cells sample_seriation name method used order samples (seriation::seriate) sample_ser_dist name distance use sample_seriation method (needed) sample_ser_counts insist using count data sample seriation? sample_ser_trans function transformation data used sample seriation (call tax_transform()) tax_seriation name method used order taxa (seriation::seriate) tax_ser_dist name distance use tax_seriation method (needed) tax_ser_counts insist using count data taxa seriation? tax_ser_trans function transformation data used taxa seriation (call tax_transform()) numbers_trans name tax_transform transformation, function transformation data used drawing numbers cells numbers_zero_replace zero replacement method used named transformation given number_trans numbers_use_counts insist using count data number drawing? (TRUE, numbers_trans transformation applied count data) grid_col colour gridlines, NA none grid_lwd width gridlines name used legend title (colourbar) anno_tax DEPRECATED: optional annotation taxa distributions: tax_anno() list output, pre-made ComplexHeatmap HeatmapAnnotation ... Arguments passed ComplexHeatmap::Heatmap row_dend_side row dendrogram put left right heatmap? row_dend_width Width row dendrogram, unit object. show_row_dend Whether show row dendrogram? row_dend_gp Graphic parameters dendrogram segments. users already provide dendrogram object edges rendered, argument ignored. show_row_names Whether show row names. row_names_gp Graphic parameters row names. row_names_rot Rotation row names. row_names_centered row names put centered?","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/comp_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw heatmap of microbiome composition across samples — comp_heatmap","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union data(\"dietswap\", package = \"microbiome\") # create a couple of numerical variables to use psq <- dietswap %>%   ps_mutate(     weight = recode(bmi_group, obese = 3, overweight = 2, lean = 1),     female = if_else(sex == \"female\", true = 1, false = 0),     african = if_else(nationality == \"AFR\", true = 1, false = 0)   ) psq <- tax_filter(psq, min_prevalence = 1 / 10, min_sample_abundance = 1 / 10) #> Proportional min_prevalence given: 0.1 --> min 23/222 samples. psq <- tax_agg(psq, \"Genus\")  # randomly select 20 taxa from the 40 top taxa, and 40 random samples  set.seed(123) taxa <- sample(tax_top(psq, n = 40), size = 20) samples <- sample(1:122, size = 40)  comp_heatmap(data = psq, taxa = taxa, samples = samples)   # transforming taxon abundances #  # NOTE: if you plan on transforming taxa (e.g. to compositional data or clr) # but only want to plot a subset of the taxa (e.g. most abundant) # you should NOT subset the original phyloseq before transformation! # Instead, choose the subset of taxa plotted with:  # Note 2, choose a symmetrical palette for clr-transformed data psq %>%   tax_transform(\"clr\", zero_replace = \"halfmin\") %>%   comp_heatmap(     taxa = taxa, samples = samples, colors = heat_palette(sym = TRUE)   )   # Almost all the taxa have high values (>> 0) because they are a highly # abundant subset taken after clr transformation was calculated on all taxa  # See how just taking the first 30 taxa from the dataset gives more balance psq %>%   tax_transform(\"clr\", zero_replace = \"halfmin\") %>%   comp_heatmap(     taxa = 1:30, samples = samples, colors = heat_palette(sym = TRUE)   )   # annotating taxa #  # Notes: # - Unlike cor_heatmap, taxa are not annotated by default # - Detection threshold set to 50 as HITchip example data seems to have background noise  comp_heatmap(   data = psq, taxa = taxa, samples = samples,   tax_anno = taxAnnotation(Prev = anno_tax_prev(undetected = 50)) )   # annotating samples #  htmp <- psq %>%   tax_transform(\"clr\", zero_replace = \"halfmin\") %>%   comp_heatmap(     taxa = taxa, samples = samples, colors = heat_palette(sym = TRUE),     sample_anno = sampleAnnotation(       Nation. = anno_sample_cat(\"nationality\", legend_title = \"Nation.\")     )   ) #> Warning: coercing non-character anno_cat annotation data to character htmp   # legends from `anno_sample_cat()` are stored as an attribute of the Heatmap ComplexHeatmap::draw(   object = htmp,   annotation_legend_list = attr(htmp, \"AnnoLegends\"), merge_legends = TRUE )"},{"path":"https://david-barnett.github.io/microViz/reference/cor_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Microbe-to-sample-data correlation heatmap — cor_heatmap","title":"Microbe-to-sample-data correlation heatmap — cor_heatmap","text":"Plot correlations (transformed) microbial abundances (selected) numeric-like sample_data variables phyloseq object. Lots customisation options available listed arguments, can pass argument ComplexHeatmap::Heatmap() .","code":""},{"path":"https://david-barnett.github.io/microViz/reference/cor_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Microbe-to-sample-data correlation heatmap — cor_heatmap","text":"","code":"cor_heatmap(   data,   taxa = NA,   tax_anno = taxAnnotation(Prev. = anno_tax_prev(), Abun. = anno_tax_box()),   taxon_renamer = identity,   vars = NA,   var_anno = NULL,   cor = c(\"pearson\", \"kendall\", \"spearman\"),   cor_use = \"everything\",   colors = heat_palette(palette = \"Blue-Red 2\", sym = TRUE),   numbers = heat_numbers(decimals = 1, col = \"black\", fontface = \"plain\"),   taxa_side = \"right\",   vars_side = adjacent_side(taxa_side),   seriation_method = \"OLO_ward\",   seriation_dist = \"euclidean\",   seriation_method_col = seriation_method,   seriation_dist_col = seriation_dist,   var_fun = \"identity\",   grid_col = \"white\",   grid_lwd = 0.5,   anno_tax = NULL,   anno_vars = NULL,   ... )"},{"path":"https://david-barnett.github.io/microViz/reference/cor_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Microbe-to-sample-data correlation heatmap — cor_heatmap","text":"data phyloseq phyloseq extra taxa list taxa include, NA tax_anno NULL annotation function taxa: taxAnnotation() output. taxon_renamer function rename taxa plotting vars selection variable names sample_data var_anno NULL annotation function variables: varAnnotation() output. cor correlation coefficient. pearson/kendall/spearman, can abbreviated (used legend title) cor_use passed cor(use = cor_use) colors output heat_palette() set heatmap fill color scheme numbers output heat_numbers() draw numbers heatmap cells taxa_side \"top\"/\"right\"/\"bottom\"/\"left\": controls heatmap orientation annotations specified tax_anno placed vars_side side place variable annotations specified var_anno, must adjacent side taxa_side seriation_method method order rows (seriation::seriate) seriation_dist distance use seriation_method (needed) seriation_method_col method order columns (seriation::seriate) seriation_dist_col distance use seriation_method_col (needed) var_fun function (name ) applied columns matrix vars correlating (used variable annotations) grid_col colour gridlines, NA none grid_lwd width gridlines anno_tax DEPRECATED: optional annotation taxa distributions: tax_anno() list output, pre-made ComplexHeatmap HeatmapAnnotation anno_vars DEPRECATED: use var_anno argument instead. Optional annotation variable distributions: var_anno() list output, pre-made ComplexHeatmap HeatmapAnnotation ... Arguments passed ComplexHeatmap::Heatmap row_dend_width Width row dendrogram, unit object. show_row_dend Whether show row dendrogram? row_dend_gp Graphic parameters dendrogram segments. users already provide dendrogram object edges rendered, argument ignored. show_row_names Whether show row names. row_names_gp Graphic parameters row names. row_names_rot Rotation row names. row_names_centered row names put centered? show_heatmap_legend Whether show heatmap legend?","code":""},{"path":"https://david-barnett.github.io/microViz/reference/cor_heatmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Microbe-to-sample-data correlation heatmap — cor_heatmap","text":"Using data.frame data argument also possible, case (selected) numeric-like variables correlated , arguments relating taxa ignored.","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/cor_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Microbe-to-sample-data correlation heatmap — cor_heatmap","text":"","code":"library(dplyr) data(\"dietswap\", package = \"microbiome\")  # create a couple of numerical variables to use psq <- dietswap %>%   ps_mutate(     weight = recode(bmi_group, obese = 3, overweight = 2, lean = 1),     female = if_else(sex == \"female\", true = 1, false = 0),     african = if_else(nationality == \"AFR\", true = 1, false = 0)   ) psq <- tax_filter(psq, min_prevalence = 1 / 10, min_sample_abundance = 1 / 10) #> Proportional min_prevalence given: 0.1 --> min 23/222 samples. psq <- tax_agg(psq, \"Genus\")  # randomly select 20 taxa from the 50 most abundant taxa set.seed(123) taxa <- sample(tax_top(psq, n = 50), size = 20)  # NOTE: detection threshold set to 50 as HITchip example data seems to have background noise ud <- 50  # make simple correlation heatmap with all numeric-like variables cor_heatmap(   data = psq, taxa = taxa,   tax_anno = taxAnnotation(     Prv. = anno_tax_prev(undetected = ud),     Abd. = anno_tax_box(undetected = ud)   ) )   # You can create an annotation object separately in advance taxAnno <- taxAnnotation(   Prv. = anno_tax_prev(undetected = ud), Abd. = anno_tax_box(undetected = ud) ) class(taxAnno) # \"function\" #> [1] \"function\"  # You can select which numeric-like variables to correlate taxa with cor_heatmap(   psq, taxa,   vars = c(\"african\", \"female\", \"weight\"), tax_anno = taxAnno )   # Also you can choose alternative correlation measures cor_heatmap(psq, taxa, cor = \"spearman\", tax_anno = taxAnno)   # Annotating variables is possible, and easy with varAnnotation() cor_heatmap(   data = psq, taxa = taxa, tax_anno = taxAnno,   var_anno = varAnnotation(Val. = anno_var_box(size = grid::unit(2, \"cm\"))) )   # you can transform the variables before correlating by var_fun # notice this does not affect the data used for annotations cor_heatmap(   data = psq, taxa = taxa, tax_anno = taxAnno, var_fun = \"exp\",   var_anno = varAnnotation(Val. = anno_var_box(size = grid::unit(2, \"cm\"))) )   # other and multiple annotations cor_heatmap(   data = psq, taxa = taxa[1:10], vars = c(\"african\", \"weight\", \"female\"),   tax_anno = taxAnno,   var_anno = varAnnotation(     value = anno_var_hist(size = grid::unit(15, \"mm\")),     log10p = anno_var_box(function(x) log10(x + 1))   ) )   # make the same heatmap, but rotated cor_heatmap(   data = psq, taxa = taxa[1:10], vars = c(\"african\", \"weight\", \"female\"),   tax_anno = taxAnno, taxa_side = \"top\",   var_anno = varAnnotation(     value = anno_var_hist(size = grid::unit(15, \"mm\")),     log10p = anno_var_box(function(x) log10(x + 1))   ) )   # You can change the colour scheme used, using heat_palette() cor_heatmap(   data = psq, taxa = taxa, tax_anno = taxAnno,   colors = heat_palette(\"Green-Orange\", rev = TRUE, sym = TRUE) )   # You can hide or change the style of the numbers with heat_numbers() cor_heatmap(data = psq, taxa = taxa, tax_anno = taxAnno, numbers = NULL)  cor_heatmap(   data = psq, taxa = taxa, tax_anno = taxAnno,   colors = heat_palette(\"Berlin\", rev = TRUE, sym = TRUE),   numbers = heat_numbers(decimals = 2, col = \"white\", fontface = \"bold\") )   # You can hide or change the style of the grid lines with grid_col & grid_lwd cor_heatmap(psq, taxa = taxa, tax_anno = taxAnno, grid_col = NA) # hidden  cor_heatmap(psq, taxa = taxa, tax_anno = taxAnno, grid_lwd = 3) # bigger   # You can pass any other argument from `ComplexHeatmap::Heatmap()` to `...`  # e.g. You can set the absolute width and height of the heatmap body cor_heatmap(   data = psq, taxa = taxa, tax_anno = taxAnno,   width = grid::unit(40, \"mm\"), height = grid::unit(10, \"cm\") )   # e.g. You can suppress the legend cor_heatmap(   data = psq, taxa = taxa, tax_anno = taxAnno, show_heatmap_legend = FALSE,   width = grid::unit(40, \"mm\"), height = grid::unit(10, \"cm\") )"},{"path":"https://david-barnett.github.io/microViz/reference/cor_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple wrapper around cor.test for y ~ x style formula input — cor_test","title":"Simple wrapper around cor.test for y ~ x style formula input — cor_test","text":"Intended use within function tax_model","code":""},{"path":"https://david-barnett.github.io/microViz/reference/cor_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple wrapper around cor.test for y ~ x style formula input — cor_test","text":"","code":"cor_test(formula, data, ...)"},{"path":"https://david-barnett.github.io/microViz/reference/cor_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple wrapper around cor.test for y ~ x style formula input — cor_test","text":"formula formula form y ~ x data dataframe ... passed cor.test","code":""},{"path":"https://david-barnett.github.io/microViz/reference/cor_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple wrapper around cor.test for y ~ x style formula input — cor_test","text":"","code":"data(\"shao19\") ps <- shao19 %>%   ps_filter(family_role == \"mother\") %>%   tax_filter(min_prevalence = 20) %>%   tax_agg(\"family\")  cors <- ps %>% tax_model(   rank = \"family\", variables = list(\"age\", \"number_reads\"), type = cor_test ) #> Warning: 25 / 174 values are NA in age #> Modelling: Enterobacteriaceae #> Modelling: Bacteroidaceae #> Modelling: Oscillospiraceae #> Modelling: Clostridia class #> Modelling: Bifidobacteriaceae #> Modelling: Enterococcaceae #> Modelling: Coriobacteriaceae #> Modelling: Rikenellaceae #> Modelling: Lachnospiraceae #> Modelling: Firmicutes phylum #> Modelling: Barnesiellaceae #> Modelling: Clostridiaceae #> Modelling: Peptostreptococcaceae #> Modelling: Tannerellaceae #> Modelling: Victivallaceae #> Modelling: Eubacteriaceae #> Modelling: Streptococcaceae #> Modelling: Turicibacteraceae #> Modelling: Eggerthellaceae #> Modelling: Veillonellaceae #> Modelling: Odoribacteraceae #> Modelling: Eubacteriales order #> Modelling: Desulfovibrionaceae #> Modelling: Erysipelotrichaceae #> Modelling: Micrococcaceae #> Modelling: Pasteurellaceae #> Modelling: Acidaminococcaceae #> Modelling: Akkermansiaceae #> Modelling: Sutterellaceae #> Modelling: Actinomycetaceae #> Modelling: Atopobiaceae #> Modelling: Prevotellaceae #> Modelling: Lactobacillaceae #> Modelling: Proteobacteria phylum #> Modelling: Coprobacillaceae #> Modelling: Methanobacteriaceae  tax_models_get(cors) #> $family #> $family$age #> $family$age$Enterobacteriaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Enterobacteriaceae and age #> t = 1.8356, df = 147, p-value = 0.06844 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.01138293  0.30319302 #> sample estimates: #>      cor  #> 0.149691  #>  #>  #> $family$age$Bacteroidaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Bacteroidaceae and age #> t = -0.52811, df = 147, p-value = 0.5982 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.2028969  0.1181097 #> sample estimates: #>         cor  #> -0.04351673  #>  #>  #> $family$age$Oscillospiraceae #>  #> \tPearson's product-moment correlation #>  #> data:  Oscillospiraceae and age #> t = 0.7232, df = 147, p-value = 0.4707 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.1022361  0.2182530 #> sample estimates: #>        cor  #> 0.05954271  #>  #>  #> $family$age$`Clostridia class` #>  #> \tPearson's product-moment correlation #>  #> data:  Clostridia class and age #> t = 1.5391, df = 147, p-value = 0.1259 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.03559243  0.28103740 #> sample estimates: #>       cor  #> 0.1259282  #>  #>  #> $family$age$Bifidobacteriaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Bifidobacteriaceae and age #> t = -1.9549, df = 147, p-value = 0.05249 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.31199519  0.00166131 #> sample estimates: #>        cor  #> -0.1591812  #>  #>  #> $family$age$Enterococcaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Enterococcaceae and age #> t = -0.65662, df = 147, p-value = 0.5125 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.2130252  0.1076585 #> sample estimates: #>        cor  #> -0.0540776  #>  #>  #> $family$age$Coriobacteriaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Coriobacteriaceae and age #> t = -0.20105, df = 147, p-value = 0.8409 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.1769087  0.1446051 #> sample estimates: #>        cor  #> -0.0165804  #>  #>  #> $family$age$Rikenellaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Rikenellaceae and age #> t = -0.96076, df = 147, p-value = 0.3383 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.23678670  0.08285795 #> sample estimates: #>         cor  #> -0.07899449  #>  #>  #> $family$age$Lachnospiraceae #>  #> \tPearson's product-moment correlation #>  #> data:  Lachnospiraceae and age #> t = -0.00041091, df = 147, p-value = 0.9997 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.1608330  0.1607669 #> sample estimates: #>           cor  #> -3.389166e-05  #>  #>  #> $family$age$`Firmicutes phylum` #>  #> \tPearson's product-moment correlation #>  #> data:  Firmicutes phylum and age #> t = 0.79264, df = 147, p-value = 0.4293 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.09657627  0.22369020 #> sample estimates: #>        cor  #> 0.06523678  #>  #>  #> $family$age$Barnesiellaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Barnesiellaceae and age #> t = -1.2593, df = 147, p-value = 0.2099 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.25979317  0.05846221 #> sample estimates: #>        cor  #> -0.1033089  #>  #>  #> $family$age$Clostridiaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Clostridiaceae and age #> t = -0.64966, df = 147, p-value = 0.5169 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.2124778  0.1082251 #> sample estimates: #>         cor  #> -0.05350595  #>  #>  #> $family$age$Peptostreptococcaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Peptostreptococcaceae and age #> t = -0.53057, df = 147, p-value = 0.5965 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.2030909  0.1179102 #> sample estimates: #>         cor  #> -0.04371863  #>  #>  #> $family$age$Tannerellaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Tannerellaceae and age #> t = 0.29411, df = 147, p-value = 0.7691 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.1370841  0.1843315 #> sample estimates: #>        cor  #> 0.02425037  #>  #>  #> $family$age$Victivallaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Victivallaceae and age #> t = -0.01424, df = 147, p-value = 0.9887 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.1619439  0.1596556 #> sample estimates: #>          cor  #> -0.001174489  #>  #>  #> $family$age$Eubacteriaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Eubacteriaceae and age #> t = 0.051362, df = 147, p-value = 0.9591 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.1566705  0.1649238 #> sample estimates: #>         cor  #> 0.004236223  #>  #>  #> $family$age$Streptococcaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Streptococcaceae and age #> t = 0.66048, df = 147, p-value = 0.51 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.1073443  0.2133286 #> sample estimates: #>        cor  #> 0.05439454  #>  #>  #> $family$age$Turicibacteraceae #>  #> \tPearson's product-moment correlation #>  #> data:  Turicibacteraceae and age #> t = -1.2697, df = 147, p-value = 0.2062 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.26059201  0.05760825 #> sample estimates: #>        cor  #> -0.1041565  #>  #>  #> $family$age$Eggerthellaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Eggerthellaceae and age #> t = -0.29017, df = 147, p-value = 0.7721 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.1840180  0.1374025 #> sample estimates: #>         cor  #> -0.02392605  #>  #>  #> $family$age$Veillonellaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Veillonellaceae and age #> t = -0.70296, df = 147, p-value = 0.4832 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.2166657  0.1038845 #> sample estimates: #>         cor  #> -0.05788232  #>  #>  #> $family$age$Odoribacteraceae #>  #> \tPearson's product-moment correlation #>  #> data:  Odoribacteraceae and age #> t = 1.3805, df = 147, p-value = 0.1695 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.04855327  0.26903578 #> sample estimates: #>       cor  #> 0.1131299  #>  #>  #> $family$age$`Eubacteriales order` #>  #> \tPearson's product-moment correlation #>  #> data:  Eubacteriales order and age #> t = -0.73374, df = 147, p-value = 0.4643 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.2190789  0.1013777 #> sample estimates: #>         cor  #> -0.06040694  #>  #>  #> $family$age$Desulfovibrionaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Desulfovibrionaceae and age #> t = -1.3366, df = 147, p-value = 0.1834 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.26569560  0.05214148 #> sample estimates: #>        cor  #> -0.1095772  #>  #>  #> $family$age$Erysipelotrichaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Erysipelotrichaceae and age #> t = -1.1646, df = 147, p-value = 0.2461 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.25252969  0.06620559 #> sample estimates: #>         cor  #> -0.09561224  #>  #>  #> $family$age$Micrococcaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Micrococcaceae and age #> t = -0.37709, df = 147, p-value = 0.7067 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.1909320  0.1303651 #> sample estimates: #>         cor  #> -0.03108649  #>  #>  #> $family$age$Pasteurellaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Pasteurellaceae and age #> t = -0.31094, df = 147, p-value = 0.7563 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.185672  0.135722 #> sample estimates: #>         cor  #> -0.02563745  #>  #>  #> $family$age$Acidaminococcaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Acidaminococcaceae and age #> t = -0.035408, df = 147, p-value = 0.9718 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.1636435  0.1579537 #> sample estimates: #>          cor  #> -0.002920404  #>  #>  #> $family$age$Akkermansiaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Akkermansiaceae and age #> t = 1.4961, df = 147, p-value = 0.1368 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.0391025  0.2777969 #> sample estimates: #>       cor  #> 0.1224675  #>  #>  #> $family$age$Sutterellaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Sutterellaceae and age #> t = 1.2978, df = 147, p-value = 0.1964 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.05531393  0.26273607 #> sample estimates: #>       cor  #> 0.1064327  #>  #>  #> $family$age$Actinomycetaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Actinomycetaceae and age #> t = -0.50115, df = 147, p-value = 0.617 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.2007659  0.1202997 #> sample estimates: #>         cor  #> -0.04129917  #>  #>  #> $family$age$Atopobiaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Atopobiaceae and age #> t = 0.53467, df = 147, p-value = 0.5937 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.1175765  0.2034153 #> sample estimates: #>        cor  #> 0.04405642  #>  #>  #> $family$age$Prevotellaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Prevotellaceae and age #> t = -0.2941, df = 147, p-value = 0.7691 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.1843309  0.1370847 #> sample estimates: #>         cor  #> -0.02424975  #>  #>  #> $family$age$Lactobacillaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Lactobacillaceae and age #> t = -0.90507, df = 147, p-value = 0.3669 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.23245882  0.08740476 #> sample estimates: #>         cor  #> -0.07444144  #>  #>  #> $family$age$`Proteobacteria phylum` #>  #> \tPearson's product-moment correlation #>  #> data:  Proteobacteria phylum and age #> t = -1.8453, df = 147, p-value = 0.06701 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.30390957  0.01059375 #> sample estimates: #>        cor  #> -0.1504625  #>  #>  #> $family$age$Coprobacillaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Coprobacillaceae and age #> t = -0.96553, df = 147, p-value = 0.3359 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.23715727  0.08246802 #> sample estimates: #>         cor  #> -0.07938464  #>  #>  #> $family$age$Methanobacteriaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Methanobacteriaceae and age #> t = 0.077097, df = 147, p-value = 0.9387 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.1545993  0.1669879 #> sample estimates: #>         cor  #> 0.006358728  #>  #>  #>  #> $family$number_reads #> $family$number_reads$Enterobacteriaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Enterobacteriaceae and number_reads #> t = -0.74985, df = 172, p-value = 0.4544 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.20411874  0.09247282 #> sample estimates: #>         cor  #> -0.05708231  #>  #>  #> $family$number_reads$Bacteroidaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Bacteroidaceae and number_reads #> t = 12.47, df = 172, p-value < 2.2e-16 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  0.6020160 0.7599377 #> sample estimates: #>       cor  #> 0.6890713  #>  #>  #> $family$number_reads$Oscillospiraceae #>  #> \tPearson's product-moment correlation #>  #> data:  Oscillospiraceae and number_reads #> t = 9.3364, df = 172, p-value < 2.2e-16 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  0.4718928 0.6708389 #> sample estimates: #>       cor  #> 0.5799483  #>  #>  #> $family$number_reads$`Clostridia class` #>  #> \tPearson's product-moment correlation #>  #> data:  Clostridia class and number_reads #> t = 3.7383, df = 172, p-value = 0.000252 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  0.1306848 0.4063244 #> sample estimates: #>       cor  #> 0.2741251  #>  #>  #> $family$number_reads$Bifidobacteriaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Bifidobacteriaceae and number_reads #> t = 3.6366, df = 172, p-value = 0.0003649 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  0.1233364 0.4000697 #> sample estimates: #>       cor  #> 0.2672034  #>  #>  #> $family$number_reads$Enterococcaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Enterococcaceae and number_reads #> t = -0.70111, df = 172, p-value = 0.4842 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.20056021  0.09615026 #> sample estimates: #>         cor  #> -0.05338318  #>  #>  #> $family$number_reads$Coriobacteriaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Coriobacteriaceae and number_reads #> t = 1.8851, df = 172, p-value = 0.0611 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.006634549  0.285012872 #> sample estimates: #>       cor  #> 0.1422757  #>  #>  #> $family$number_reads$Rikenellaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Rikenellaceae and number_reads #> t = 8.2469, df = 172, p-value = 4.044e-14 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  0.4165395 0.6311120 #> sample estimates: #>       cor  #> 0.5323222  #>  #>  #> $family$number_reads$Lachnospiraceae #>  #> \tPearson's product-moment correlation #>  #> data:  Lachnospiraceae and number_reads #> t = 6.3964, df = 172, p-value = 1.451e-09 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  0.3097988 0.5511887 #> sample estimates: #>       cor  #> 0.4383649  #>  #>  #> $family$number_reads$`Firmicutes phylum` #>  #> \tPearson's product-moment correlation #>  #> data:  Firmicutes phylum and number_reads #> t = 1.8893, df = 172, p-value = 0.06054 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.006321532  0.285300448 #> sample estimates: #>       cor  #> 0.1425824  #>  #>  #> $family$number_reads$Barnesiellaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Barnesiellaceae and number_reads #> t = 3.5789, df = 172, p-value = 0.0004485 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  0.1191617 0.3965049 #> sample estimates: #>       cor  #> 0.2632645  #>  #>  #> $family$number_reads$Clostridiaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Clostridiaceae and number_reads #> t = 3.2392, df = 172, p-value = 0.001439 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  0.09437574 0.37516597 #> sample estimates: #>      cor  #> 0.239779  #>  #>  #> $family$number_reads$Peptostreptococcaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Peptostreptococcaceae and number_reads #> t = 1.7873, df = 172, p-value = 0.07565 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.01401751  0.27821471 #> sample estimates: #>       cor  #> 0.1350339  #>  #>  #> $family$number_reads$Tannerellaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Tannerellaceae and number_reads #> t = 2.2396, df = 172, p-value = 0.0264 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  0.02006385 0.30935403 #> sample estimates: #>       cor  #> 0.1683312  #>  #>  #> $family$number_reads$Victivallaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Victivallaceae and number_reads #> t = 2.0114, df = 172, p-value = 0.04584 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  0.002890989 0.293740766 #> sample estimates: #>       cor  #> 0.1515956  #>  #>  #> $family$number_reads$Eubacteriaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Eubacteriaceae and number_reads #> t = 3.6418, df = 172, p-value = 0.000358 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  0.1237170 0.4003943 #> sample estimates: #>       cor  #> 0.2675623  #>  #>  #> $family$number_reads$Streptococcaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Streptococcaceae and number_reads #> t = 0.44949, df = 172, p-value = 0.6536 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.1151034  0.1820949 #> sample estimates: #>        cor  #> 0.03425301  #>  #>  #> $family$number_reads$Turicibacteraceae #>  #> \tPearson's product-moment correlation #>  #> data:  Turicibacteraceae and number_reads #> t = -0.40283, df = 172, p-value = 0.6876 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.1786551  0.1186103 #> sample estimates: #>         cor  #> -0.03070127  #>  #>  #> $family$number_reads$Eggerthellaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Eggerthellaceae and number_reads #> t = 2.6811, df = 172, p-value = 0.008052 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  0.05310387 0.33896106 #> sample estimates: #>       cor  #> 0.2002914  #>  #>  #> $family$number_reads$Veillonellaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Veillonellaceae and number_reads #> t = -0.027574, df = 172, p-value = 0.978 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.1508252  0.1467132 #> sample estimates: #>          cor  #> -0.002102528  #>  #>  #> $family$number_reads$Odoribacteraceae #>  #> \tPearson's product-moment correlation #>  #> data:  Odoribacteraceae and number_reads #> t = 7.6079, df = 172, p-value = 1.747e-12 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  0.3814894 0.6053608 #> sample estimates: #>       cor  #> 0.5017811  #>  #>  #> $family$number_reads$`Eubacteriales order` #>  #> \tPearson's product-moment correlation #>  #> data:  Eubacteriales order and number_reads #> t = 1.527, df = 172, p-value = 0.1286 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.03370026  0.25994681 #> sample estimates: #>       cor  #> 0.1156494  #>  #>  #> $family$number_reads$Desulfovibrionaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Desulfovibrionaceae and number_reads #> t = 2.8757, df = 172, p-value = 0.004542 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  0.06756108 0.35174043 #> sample estimates: #>       cor  #> 0.2141782  #>  #>  #> $family$number_reads$Erysipelotrichaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Erysipelotrichaceae and number_reads #> t = 0.16333, df = 172, p-value = 0.8705 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.1365703  0.1609242 #> sample estimates: #>       cor  #> 0.0124525  #>  #>  #> $family$number_reads$Micrococcaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Micrococcaceae and number_reads #> t = 4.2731, df = 172, p-value = 3.186e-05 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  0.1688003 0.4383575 #> sample estimates: #>       cor  #> 0.3097905  #>  #>  #> $family$number_reads$Pasteurellaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Pasteurellaceae and number_reads #> t = 2.2194, df = 172, p-value = 0.02777 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  0.01854693 0.30798113 #> sample estimates: #>       cor  #> 0.1668564  #>  #>  #> $family$number_reads$Acidaminococcaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Acidaminococcaceae and number_reads #> t = 4.6875, df = 172, p-value = 5.605e-06 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  0.1976940 0.4621927 #> sample estimates: #>       cor  #> 0.3365652  #>  #>  #> $family$number_reads$Akkermansiaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Akkermansiaceae and number_reads #> t = 1.6533, df = 172, p-value = 0.1001 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.02414786  0.26883889 #> sample estimates: #>       cor  #> 0.1250713  #>  #>  #> $family$number_reads$Sutterellaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Sutterellaceae and number_reads #> t = 5.9824, df = 172, p-value = 1.242e-08 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  0.2837629 0.5309981 #> sample estimates: #>       cor  #> 0.4150128  #>  #>  #> $family$number_reads$Actinomycetaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Actinomycetaceae and number_reads #> t = 1.2116, df = 172, p-value = 0.2273 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.05756938  0.23750782 #> sample estimates: #>       cor  #> 0.0919883  #>  #>  #> $family$number_reads$Atopobiaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Atopobiaceae and number_reads #> t = 0.11847, df = 172, p-value = 0.9058 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.1399253  0.1575907 #> sample estimates: #>         cor  #> 0.009032607  #>  #>  #> $family$number_reads$Prevotellaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Prevotellaceae and number_reads #> t = 0.45974, df = 172, p-value = 0.6463 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.1143326  0.1828499 #> sample estimates: #>        cor  #> 0.03503307  #>  #>  #> $family$number_reads$Lactobacillaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Lactobacillaceae and number_reads #> t = 1.6286, df = 172, p-value = 0.1052 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.02601643  0.26710340 #> sample estimates: #>       cor  #> 0.1232304  #>  #>  #> $family$number_reads$`Proteobacteria phylum` #>  #> \tPearson's product-moment correlation #>  #> data:  Proteobacteria phylum and number_reads #> t = -0.14429, df = 172, p-value = 0.8854 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.1595100  0.1379945 #> sample estimates: #>         cor  #> -0.01100118  #>  #>  #> $family$number_reads$Coprobacillaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Coprobacillaceae and number_reads #> t = 0.16346, df = 172, p-value = 0.8703 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  -0.1365604  0.1609340 #> sample estimates: #>       cor  #> 0.0124626  #>  #>  #> $family$number_reads$Methanobacteriaceae #>  #> \tPearson's product-moment correlation #>  #> data:  Methanobacteriaceae and number_reads #> t = 3.231, df = 172, p-value = 0.001478 #> alternative hypothesis: true correlation is not equal to 0 #> 95 percent confidence interval: #>  0.09377651 0.37464637 #> sample estimates: #>       cor  #> 0.2392091  #>  #>  #>  #>"},{"path":"https://david-barnett.github.io/microViz/reference/deprecated-heatmap-annotations.html","id":null,"dir":"Reference","previous_headings":"","what":"DEPRECATED Heatmap annotations helpers — deprecated-heatmap-annotations","title":"DEPRECATED Heatmap annotations helpers — deprecated-heatmap-annotations","text":"Functions easily define ComplexHeatmap annotations taxa /variables tax_anno creates list describing taxa annotation (cor_heatmap comp_heatmap) var_anno creates list describing variable annotation (cor_heatmap)","code":""},{"path":"https://david-barnett.github.io/microViz/reference/deprecated-heatmap-annotations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DEPRECATED Heatmap annotations helpers — deprecated-heatmap-annotations","text":"","code":"tax_anno(   undetected = 0,   which = NA,   prev = 1,   abund = 2,   size = 30,   gap = 2,   rel_sizes = NA,   args = NULL,   ... )  anno_prev(   data,   taxa,   undetected = 0,   which = \"row\",   size = 15,   bar_width = 0.6,   gp = grid::gpar(fill = \"grey85\"),   ... )  anno_abund(   data,   taxa,   undetected = 0,   which = \"row\",   size = 15,   point_size = 0.75,   box_width = 0.6,   gp = grid::gpar(fill = \"grey85\"),   ... )  var_anno(   annos = \"var_box\",   funs = \"identity\",   names = NA,   which = \"column\",   size = 15 * length(annos),   gap = 2,   rel_sizes = NA,   args = NULL,   ... )  old_anno_var_hist(data, vars = NA, which = \"column\", size = 15, ...)  old_anno_var_box(data, vars = NA, which = \"column\", size = 15, ...)"},{"path":"https://david-barnett.github.io/microViz/reference/deprecated-heatmap-annotations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DEPRECATED Heatmap annotations helpers — deprecated-heatmap-annotations","text":"undetected value taxa considered present/detected sample \"row\" \"column\" annnotation prev order prevalence annotation shown (number, NA show) abund order abundance annotation shown (number, NA show) size total size (mm) annotations (width/height depending ) gap gap mm annotations rel_sizes relative sizes annotations (NA equal sizes, length annos) args extra args passed annotation: give list lists (one inner list per arg, named, e.g. list(prev = list(whatever = whatever)) ... named args passed (list) data phyloseq ps-extra (data.frame matrix anno_var_* functions) taxa names taxa plot bar_width relative width barchart bars gp grid::gpar() object graphics parameter settings like fill lwd point_size size outlier points mm box_width relative width boxplot boxes annos name(s) annotation(s) show, order (e.g. 'var_box', 'var_hist') funs function(s) transform matrix variable values plotting (length must 1 length annos) names names use annotation annos vars names variables plot","code":""},{"path":"https://david-barnett.github.io/microViz/reference/dist_bdisp.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for vegan::betadisper() — dist_bdisp","title":"Wrapper for vegan::betadisper() — dist_bdisp","text":"Takes output dist_calc function. use result permanova function ensure results correspond exactly input data. Runs betadisper categorical variables variables argument. See help('betadisper', package = 'vegan').","code":""},{"path":"https://david-barnett.github.io/microViz/reference/dist_bdisp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for vegan::betadisper() — dist_bdisp","text":"","code":"dist_bdisp(   data,   variables,   method = c(\"centroid\", \"median\")[[1]],   complete_cases = TRUE,   verbose = TRUE )"},{"path":"https://david-barnett.github.io/microViz/reference/dist_bdisp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for vegan::betadisper() — dist_bdisp","text":"data psExtra output dist_calc variables list variables use group method centroid median complete_cases drop samples NAs variables listed verbose sends messages progress true","code":""},{"path":"https://david-barnett.github.io/microViz/reference/dist_bdisp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper for vegan::betadisper() — dist_bdisp","text":"psExtra containing betadisper results","code":""},{"path":"https://david-barnett.github.io/microViz/reference/dist_bdisp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper for vegan::betadisper() — dist_bdisp","text":"","code":"library(phyloseq) library(vegan) #> Loading required package: permute #> Loading required package: lattice data(\"dietswap\", package = \"microbiome\")  # add some missings to demonstrate automated removal sample_data(dietswap)$sex[3:6] <- NA # create a numeric variable to show it will be skipped with a warning dietswap <- ps_mutate(dietswap, timepoint = as.numeric(timepoint))  # straight to the betadisp bd1 <- dietswap %>%   tax_agg(\"Genus\") %>%   dist_calc(\"aitchison\") %>%   dist_bdisp(variables = c(\"sex\", \"bmi_group\", \"timepoint\")) %>%   bdisp_get() #> Dropping samples with missings: 4 #> Warning: Variable 'timepoint' is skipped as it cannot be used for grouping (class = 'numeric') bd1$sex #> $model #>  #> \tHomogeneity of multivariate dispersions #>  #> Call: vegan::betadisper(d = distMat, group = meta[[V]], type = method) #>  #> No. of Positive Eigenvalues: 123 #> No. of Negative Eigenvalues: 0 #>  #> Average distance to centroid: #> female   male  #> 10.022  9.059  #>  #> Eigenvalues for PCoA axes: #> (Showing 8 of 123 eigenvalues) #>  PCoA1  PCoA2  PCoA3  PCoA4  PCoA5  PCoA6  PCoA7  PCoA8  #> 5106.7 2075.2 1360.1 1281.4 1061.7  890.1  665.4  567.5  #>  #> $anova #> Analysis of Variance Table #>  #> Response: Distances #>            Df Sum Sq Mean Sq F value    Pr(>F)     #> Groups      1  50.14  50.144  20.976 7.853e-06 *** #> Residuals 216 516.35   2.391                       #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> $tukeyHSD #>   Tukey multiple comparisons of means #>     95% family-wise confidence level #>  #> Fit: aov(formula = distances ~ group, data = df) #>  #> $group #>                   diff       lwr        upr   p adj #> male-female -0.9632687 -1.377813 -0.5487242 7.9e-06 #>  #>  # quick vegan plotting methods plot(bd1$sex$model, label.cex = 0.5)  boxplot(bd1$sex$model)   # compute distance and use for both permanova and dist_bdisp testDist <- dietswap %>%   tax_agg(\"Genus\") %>%   dist_calc(\"bray\")  PERM <- testDist %>%   dist_permanova(     variables = c(\"sex\", \"bmi_group\"),     n_processes = 1, n_perms = 99   ) #> Dropping samples with missings: 4 #> 2025-04-14 11:43:05.949808 - Starting PERMANOVA with 99 perms with 1 processes #> 2025-04-14 11:43:06.102812 - Finished PERMANOVA str(PERM, max.level = 1) #> Formal class 'psExtra' [package \"microViz\"] with 15 slots  bd <- PERM %>% dist_bdisp(variables = c(\"sex\", \"bmi_group\")) bd #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 130 taxa and 218 samples ] #> sample_data() Sample Data:       [ 218 samples by 8 sample variables ] #> tax_table()   Taxonomy Table:    [ 130 taxa by 3 taxonomic ranks ] #>  #> psExtra info: #> tax_agg = \"Genus\"  #>  #> bray distance matrix of size 218  #> 0.7639533 0.731024 0.7283254 0.6637252 0.7437293 ... #>  #> permanova: #> Permutation test for adonis under reduced model #> Marginal effects of terms #> Permutation: free #> Number of permutations: 99 #>  #> vegan::adonis2(formula = formula, data = metadata, permutations = n_perms, by = by, parallel = parall) #>            Df SumOfSqs      R2      F Pr(>F)    #> sex         1    0.361 0.00933 2.1539   0.17    #> bmi_group   2    2.377 0.06143 7.0888   0.01 ** #> Residual  214   35.874 0.92720                  #> Total     217   38.691 1.00000                  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> betadisper: #> sex bmi_group"},{"path":"https://david-barnett.github.io/microViz/reference/dist_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate distances between pairs of samples in phyloseq object — dist_calc","title":"Calculate distances between pairs of samples in phyloseq object — dist_calc","text":"Can compute various sample-sample distances using microbiota composition samples: Bray Curtis ('bray') ecological distance phyloseq::distance() / vegan::vegdist() UniFrac distances (using GUniFrac package) generalised: 'gunifrac' (optionally set weighting alpha gunifrac alpha) unweighted: 'unifrac' weighted: 'wunifrac' Aitchison distance (Euclidean distance centered log ratio transform clr, see details) Euclidean distance Use dist_calc psExtra output tax_transform (tax_agg). returns psExtra object containing phyloseq name distance used addition distance matrix . resulting object intended piped ord_calc dist_permanova functions. Alternatively can directly access distance matrix dist_get().","code":""},{"path":"https://david-barnett.github.io/microViz/reference/dist_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate distances between pairs of samples in phyloseq object — dist_calc","text":"","code":"dist_calc(data, dist = \"bray\", gunifrac_alpha = 0.5, ...)"},{"path":"https://david-barnett.github.io/microViz/reference/dist_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate distances between pairs of samples in phyloseq object — dist_calc","text":"data psExtra object, e.g. output tax_transform() dist name distance calculate pairs samples gunifrac_alpha setting alpha value relevant gunifrac distance used ... optional distance-specific named arguments passed phyloseq::distance()","code":""},{"path":"https://david-barnett.github.io/microViz/reference/dist_calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate distances between pairs of samples in phyloseq object — dist_calc","text":"psExtra object including distance matrix name distance used","code":""},{"path":"https://david-barnett.github.io/microViz/reference/dist_calc.html","id":"aitchison-distance-note","dir":"Reference","previous_headings":"","what":"Aitchison distance note","title":"Calculate distances between pairs of samples in phyloseq object — dist_calc","text":"EITHER: skip dist_calc function call ord_calc(method = \"PCA\") directly object taxa transformed tax_transform(trans = \"clr\") pass object untransformed ('identity' transformed) taxa data argument dist_calc() specify dist = \"aitchison\". ordination plots taxon loading vectors desired, users require option 1. distance matrix required permanova, users require option 2.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/dist_calc.html","id":"binary-jaccard-distance-note","dir":"Reference","previous_headings":"","what":"Binary Jaccard distance note","title":"Calculate distances between pairs of samples in phyloseq object — dist_calc","text":"Jaccard distance can computed abundances, often microbiome research Binary Jaccard distance desired. remember first perform \"binary\" transformation tax_transform(\"binary\"), pass additional argument dist_calc(\"jaccard\", binary = TRUE)","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/dist_calc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate distances between pairs of samples in phyloseq object — dist_calc","text":"","code":"# bray curtis distance on genera-level features data(\"dietswap\", package = \"microbiome\") bc <- dietswap %>%   tax_agg(\"Genus\") %>%   dist_calc(\"bray\") bc #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 130 taxa and 222 samples ] #> sample_data() Sample Data:       [ 222 samples by 8 sample variables ] #> tax_table()   Taxonomy Table:    [ 130 taxa by 3 taxonomic ranks ] #>  #> psExtra info: #> tax_agg = \"Genus\"  #>  #> bray distance matrix of size 222  #> 0.7639533 0.7851213 0.6680796 0.7699252 0.80507 ... class(bc) #> [1] \"psExtra\" #> attr(,\"package\") #> [1] \"microViz\"  # gunifrac distance using phyloseq input data(\"esophagus\", package = \"phyloseq\") gunifrac <- esophagus %>%   dist_calc(\"gunifrac\") %>%   dist_get() #> Registered S3 method overwritten by 'rmutil': #>   method         from #>   print.response httr class(gunifrac) #> [1] \"dist\""},{"path":"https://david-barnett.github.io/microViz/reference/dist_calc_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate distances between sequential samples in ps_extra/phyloseq object — dist_calc_seq","title":"Calculate distances between sequential samples in ps_extra/phyloseq object — dist_calc_seq","text":"Calculate distances sequential samples ps_extra/phyloseq object","code":""},{"path":"https://david-barnett.github.io/microViz/reference/dist_calc_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate distances between sequential samples in ps_extra/phyloseq object — dist_calc_seq","text":"","code":"dist_calc_seq(   data,   dist,   group,   seq,   unequal = \"warn\",   start_value = NaN,   return = \"data\",   var_name = paste0(dist, \"_DistFromLast\") )"},{"path":"https://david-barnett.github.io/microViz/reference/dist_calc_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate distances between sequential samples in ps_extra/phyloseq object — dist_calc_seq","text":"data psExtra object, e.g. output tax_transform() dist name distance calculate pairs sequential samples group name variable phyloseq sample_data used define groups samples seq name variable phyloseq sample_data used define order samples within groups unequal \"error\" \"warn\" \"ignore\" groups samples, defined group argument, unequal size start_value value returned first sample group, preceding sample group's sequence, obvious value return format return object: \"data\" returns psExtra sorted samples additional variable. \"vector\" returns named vector sequential distances. var_name name variable created psExtra return arg = \"data\"","code":""},{"path":"https://david-barnett.github.io/microViz/reference/dist_calc_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate distances between sequential samples in ps_extra/phyloseq object — dist_calc_seq","text":"psExtra object sorted new sequential distance variable named vector variable","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/dist_calc_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate distances between sequential samples in ps_extra/phyloseq object — dist_calc_seq","text":"","code":"library(ggplot2) library(dplyr) data(\"dietswap\", package = \"microbiome\")  pseq <- dietswap %>%   tax_transform(\"identity\", rank = \"Genus\") %>%   dist_calc_seq(     dist = \"aitchison\", group = \"subject\", seq = \"timepoint\",     # group sizes are unequal because some subjects are missing a timepoint     unequal = \"ignore\"   ) #> Warning: ps_split may drop different taxa per group with ps_filter  pseq %>%   samdat_tbl() %>%   dplyr::select(1, subject, timepoint, dplyr::last_col()) #> # A tibble: 222 × 4 #>    .sample_name subject timepoint aitchison_DistFromLast #>    <chr>        <fct>       <int>                  <dbl> #>  1 Sample-32    azh             1                 NaN    #>  2 Sample-109   azh             2                   9.27 #>  3 Sample-119   azh             3                  11.2  #>  4 Sample-130   azh             4                   9.19 #>  5 Sample-140   azh             5                   5.12 #>  6 Sample-41    azh             6                   5.30 #>  7 Sample-61    azl             1                 NaN    #>  8 Sample-93    azl             2                   7.99 #>  9 Sample-106   azl             3                   8.44 #> 10 Sample-78    azl             4                   8.24 #> # ℹ 212 more rows  # ggplot heatmap - unsorted pseq %>%   samdat_tbl() %>%   filter(timepoint != 1) %>%   ggplot(aes(x = timepoint, y = subject)) +   geom_tile(aes(fill = aitchison_DistFromLast)) +   scale_fill_viridis_c(na.value = NA, name = \"dist\") +   theme_minimal(base_line_size = NA) +   scale_y_discrete(limits = rev(levels(samdat_tbl(pseq)$subject)))   # ComplexHeatmap plotting with clustering # library(tidyr) library(ComplexHeatmap)  # make data matrix heatmat <- pseq %>%   samdat_tbl() %>%   filter(timepoint != 1) %>%   pivot_wider(     id_cols = subject,     names_from = timepoint, names_prefix = \"t\",     values_from = aitchison_DistFromLast   ) %>%   tibble::column_to_rownames(\"subject\")  heatmat <- as.matrix.data.frame(heatmat)  heatmap <- Heatmap(   name = \"dist\",   matrix = heatmat, col = viridisLite::viridis(12), na_col = \"white\",   cluster_columns = FALSE,   cluster_rows = hclust(dist(heatmat), method = \"ward.D\"),   width = unit(1.5, \"in\"), rect_gp = gpar(col = \"black\"),   row_names_side = \"left\", row_names_gp = gpar(fontsize = 8) ) heatmap   # comparison with subject tracking on PCA pca <- pseq %>%   # already sorted data   dist_calc(\"aitchison\") %>%   ord_calc(\"PCoA\") %>%   ord_plot(alpha = 0.1, shape = \"nationality\", size = 2) %>%   add_paths(     mapping = aes(colour = subject, alpha = timepoint, size = timepoint),     id_var = \"subject\", id_values = c(       \"eve\", \"hsf\", # low variation       \"vem\", # medium       \"ufm\", # high variation       \"pku\" # starts high     )   ) +   scale_alpha_continuous(range = c(0.3, 1), breaks = c(2, 4, 6)) +   scale_size_continuous(range = c(1, 2), breaks = c(2, 4, 6))  heatmap  pca"},{"path":"https://david-barnett.github.io/microViz/reference/dist_permanova.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate PERMANOVA after dist_calc() — dist_permanova","title":"Calculate PERMANOVA after dist_calc() — dist_permanova","text":"dist_permanova runs Permutational Multivariate ANOVA (aka Non-parametric MANOVA). way test statistical significance (independent) associations variables phyloseq::sample_data(), microbiota distance matrix already calculated dist_calc(). function wrapper around vegan's adonis2() function. See ?vegan::adonis2() insight. can also read excellent book chapter PERMANOVA Marti Anderson: doi:10.1002/9781118445112.stat07841 NPMANOVA page GUSTA : https://sites.google.com/site/mb3gustame/hypothesis-tests/manova/npmanova","code":""},{"path":"https://david-barnett.github.io/microViz/reference/dist_permanova.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate PERMANOVA after dist_calc() — dist_permanova","text":"","code":"dist_permanova(   data,   variables = NULL,   interactions = NULL,   complete_cases = TRUE,   n_processes = 1,   n_perms = 999,   seed = NULL,   by = \"margin\",   verbose = TRUE,   ... )"},{"path":"https://david-barnett.github.io/microViz/reference/dist_permanova.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate PERMANOVA after dist_calc() — dist_permanova","text":"data psExtra output dist_calc() variables character vector variables include model character representation right-hand side formula, e.g \"varA + varB + varA:varB\" interactions optional argument define interactions variables, written style e.g. \"var_a * var_b\" complete_cases TRUE, drops observations contain missing values (otherwise stops missings detected) n_processes many parallel processes use? (windows uses parallel::makePSOCKcluster()) n_perms many permutations? e.g. 9999. Less faster better! seed set random number generator seed ensure get results run passed vegan::adonis2() argument: type sums squares calculate? \"margin\" \"terms\" verbose sends messages progress TRUE ... additional arguments passed directly vegan::adonis2() (e.g. strata, add, sqrt.dist etc.)","code":""},{"path":"https://david-barnett.github.io/microViz/reference/dist_permanova.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate PERMANOVA after dist_calc() — dist_permanova","text":"psExtra list containing permanova results (filtered) input objects","code":""},{"path":"https://david-barnett.github.io/microViz/reference/dist_permanova.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate PERMANOVA after dist_calc() — dist_permanova","text":"variables argument collapsed one string (length > 1) pasting together, separated \"+\". interaction terms described interactions argument pasted onto end pasted variables argument. Alternatively, can supply complete right hand side formula e.g variables = \"varA + varB + varC\\*varD\" Watch , variable names contain characters normally separate variables formula rename offending variable (e.g. avoid \"+\" \"\\*\" \"|\" \":\" ) otherwise permanova split variable pieces.","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/dist_permanova.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate PERMANOVA after dist_calc() — dist_permanova","text":"","code":"data(\"dietswap\", package = \"microbiome\")  # add some missings to demonstrate automated removal phyloseq::sample_data(dietswap)$sex[3:6] <- NA  # compute distance testDist <- dietswap %>%   tax_agg(\"Genus\") %>%   tax_transform(\"identity\") %>%   dist_calc(\"bray\")  PERM <- testDist %>%   dist_permanova(     seed = 1,     variables = c(\"sex\", \"bmi_group\"),     n_processes = 1,     n_perms = 99 # only 99 perms used in examples for speed (use 9999+!)   ) #> Dropping samples with missings: 4 #> 2025-04-14 11:43:12.428129 - Starting PERMANOVA with 99 perms with 1 processes #> 2025-04-14 11:43:12.578329 - Finished PERMANOVA PERM #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 130 taxa and 218 samples ] #> sample_data() Sample Data:       [ 218 samples by 8 sample variables ] #> tax_table()   Taxonomy Table:    [ 130 taxa by 3 taxonomic ranks ] #>  #> psExtra info: #> tax_agg = \"Genus\" tax_trans = \"identity\"  #>  #> bray distance matrix of size 218  #> 0.7639533 0.731024 0.7283254 0.6637252 0.7437293 ... #>  #> permanova: #> Permutation test for adonis under reduced model #> Marginal effects of terms #> Permutation: free #> Number of permutations: 99 #>  #> vegan::adonis2(formula = formula, data = metadata, permutations = n_perms, by = by, parallel = parall) #>            Df SumOfSqs      R2      F Pr(>F)    #> sex         1    0.361 0.00933 2.1539   0.10 .  #> bmi_group   2    2.377 0.06143 7.0888   0.01 ** #> Residual  214   35.874 0.92720                  #> Total     217   38.691 1.00000                  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 str(PERM, max.level = 1) #> Formal class 'psExtra' [package \"microViz\"] with 15 slots  # try permanova with interaction terms PERM2 <- testDist %>%   dist_permanova(     seed = 1,     variables = \"nationality + sex * bmi_group\",     n_processes = 1, n_perms = 99   ) #> Dropping samples with missings: 4 #> 2025-04-14 11:43:12.601057 - Starting PERMANOVA with 99 perms with 1 processes #> 2025-04-14 11:43:12.797481 - Finished PERMANOVA perm_get(PERM2) #> Permutation test for adonis under reduced model #> Marginal effects of terms #> Permutation: free #> Number of permutations: 99 #>  #> vegan::adonis2(formula = formula, data = metadata, permutations = n_perms, by = by, parallel = parall) #>                Df SumOfSqs      R2       F Pr(>F)    #> nationality     1    4.859 0.12558 34.2219   0.01 ** #> sex:bmi_group   1    0.321 0.00828  2.2576   0.06 .  #> Residual      212   30.099 0.77794                   #> Total         217   38.691 1.00000                   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1  # specify the same model in alternative way PERM3 <- testDist %>%   dist_permanova(     seed = 1,     variables = c(\"nationality\", \"sex\", \"bmi_group\"),     interactions = \"sex * bmi_group\",     n_processes = 1, n_perms = 99   ) #> Dropping samples with missings: 4 #> 2025-04-14 11:43:12.827799 - Starting PERMANOVA with 99 perms with 1 processes #> 2025-04-14 11:43:13.014247 - Finished PERMANOVA perm_get(PERM3) #> Permutation test for adonis under reduced model #> Marginal effects of terms #> Permutation: free #> Number of permutations: 99 #>  #> vegan::adonis2(formula = formula, data = metadata, permutations = n_perms, by = by, parallel = parall) #>                Df SumOfSqs      R2       F Pr(>F)    #> nationality     1    4.859 0.12558 34.2219   0.01 ** #> sex:bmi_group   1    0.321 0.00828  2.2576   0.06 .  #> Residual      212   30.099 0.77794                   #> Total         217   38.691 1.00000                   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1  identical(PERM3, PERM2) # TRUE #> [1] TRUE  # take same distance matrix used for the permanova and plot an ordination PERM2 %>%   ord_calc(method = \"PCoA\") %>%   ord_plot(color = \"bmi_group\")  # this trick ensures any samples dropped from the permanova # for having missing values in the covariates are NOT included # in the corresponding ordination plot"},{"path":"https://david-barnett.github.io/microViz/reference/distinct_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"Colour palettes suitable for 20+ categories — distinct_palette","title":"Colour palettes suitable for 20+ categories — distinct_palette","text":"Available palettes (max colors) \"brewerPlus\" (41), \"kelly\" (20) \"greenArmytage\" (25). \"brewerPlus\" arbitrary expansion \"Paired\" \"Dark2\" colorbrewer palettes. philosophy behind expansion ensure similar colours far apart, earlier colours attractive. \"kelly\" based 22-colour palette developed Kenneth Kelly white black starting colours removed. palette ordered first colours distinct. \"greenArmytage\" based 26-colour palette proposed Paul Green-Armytage, black removed. palette ordered maximum contrast.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/distinct_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Colour palettes suitable for 20+ categories — distinct_palette","text":"","code":"distinct_palette(n = NA, pal = \"brewerPlus\", add = \"lightgrey\")"},{"path":"https://david-barnett.github.io/microViz/reference/distinct_palette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Colour palettes suitable for 20+ categories — distinct_palette","text":"n number colours return pal palette name, one \"brewerPlus\", \"kelly\", \"greenArmytage\" add colour append end palette, colour n+1, lightgrey default use \"\" taxa comp_barplot, NA additional colour.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/distinct_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Colour palettes suitable for 20+ categories — distinct_palette","text":"vector colours","code":""},{"path":"https://david-barnett.github.io/microViz/reference/distinct_palette.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Colour palettes suitable for 20+ categories — distinct_palette","text":"Hex color codes 'kelly' 'greenArmytage' palettes copied slightly modified Polychrome R package: .e. Polychrome::kelly.colors() Polychrome::green.armytage.colors() Please consider also citing Coombes 2019 doi:10.18637/jss.v090.c01  use either palettes. See Polychrome reference manual information: https://CRAN.R-project.org/package=Polychrome","code":""},{"path":"https://david-barnett.github.io/microViz/reference/distinct_palette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Colour palettes suitable for 20+ categories — distinct_palette","text":"","code":"brewerPlus <- distinct_palette() scales::show_col(brewerPlus)   kelly <- distinct_palette(pal = \"kelly\") scales::show_col(kelly)   greenArmytage <- distinct_palette(pal = \"greenArmytage\") scales::show_col(greenArmytage)"},{"path":"https://david-barnett.github.io/microViz/reference/heat_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"set options for drawing gridlines on heatmaps — heat_grid","title":"set options for drawing gridlines on heatmaps — heat_grid","text":"set options drawing gridlines heatmaps","code":""},{"path":"https://david-barnett.github.io/microViz/reference/heat_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"set options for drawing gridlines on heatmaps — heat_grid","text":"","code":"heat_grid(   col = \"white\",   alpha = 1,   lty = 1,   lwd = 0.5,   lex = 1,   lineend = \"round\",   linejoin = \"round\" )"},{"path":"https://david-barnett.github.io/microViz/reference/heat_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"set options for drawing gridlines on heatmaps — heat_grid","text":"col Colour lines borders. alpha Alpha channel transparency lty Line type lwd Line width lex Multiplier applied line width lineend Line end style (round, butt, square) linejoin Line join style (round, mitre, bevel)","code":""},{"path":"https://david-barnett.github.io/microViz/reference/heat_numbers.html","id":null,"dir":"Reference","previous_headings":"","what":"Aesthetic settings for drawing numbers on heatmap tiles — heat_numbers","title":"Aesthetic settings for drawing numbers on heatmap tiles — heat_numbers","text":"Works comp_heatmap() cor_heatmap(). See help functions.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/heat_numbers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aesthetic settings for drawing numbers on heatmap tiles — heat_numbers","text":"","code":"heat_numbers(   decimals = 0,   fontsize = 7,   col = \"darkgrey\",   fontface = \"bold\",   fmt = NULL,   ... )"},{"path":"https://david-barnett.github.io/microViz/reference/heat_numbers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aesthetic settings for drawing numbers on heatmap tiles — heat_numbers","text":"decimals number decimal places print fontsize fontsize specification, col colour font fontface plain, bold, italic fmt NULL number print format, see ?sprintf, overrides decimals arg set ... passed grid::gpar() grid.text","code":""},{"path":"https://david-barnett.github.io/microViz/reference/heat_numbers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aesthetic settings for drawing numbers on heatmap tiles — heat_numbers","text":"list","code":""},{"path":"https://david-barnett.github.io/microViz/reference/heat_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"Easy palettes for ComplexHeatmap — heat_palette","title":"Easy palettes for ComplexHeatmap — heat_palette","text":"Pass named colorspace hcl palette circlize::colorRamp2. specify range function returns function heatmap color palette use range data automatically specify range, returns colour palette range","code":""},{"path":"https://david-barnett.github.io/microViz/reference/heat_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Easy palettes for ComplexHeatmap — heat_palette","text":"","code":"heat_palette(   palette = ifelse(sym, \"Blue-Red 3\", \"Rocket\"),   breaks = \"auto\",   range = NA,   sym = FALSE,   rev = FALSE )"},{"path":"https://david-barnett.github.io/microViz/reference/heat_palette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Easy palettes for ComplexHeatmap — heat_palette","text":"palette named palette colorspace::hcl_palettes() diverging/sequential vector colour names/hexcodes breaks number breaks, \"auto\" 11 named palette, uses palette length range NA return palette generating function takes range numeric vector indicating range, return palette sym makes palette range symmetrical around 0 TRUE rev reverse palette?","code":""},{"path":"https://david-barnett.github.io/microViz/reference/heat_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Easy palettes for ComplexHeatmap — heat_palette","text":"circlize::colorRamp2 palette range = NA, function returning palette given range","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ibd.html","id":null,"dir":"Reference","previous_headings":"","what":"IBD study data in phyloseq object. — ibd","title":"IBD study data in phyloseq object. — ibd","text":"phyloseq object OTU table sample data IBD microbiome study. Originally released ibd example data corncob package.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ibd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"IBD study data in phyloseq object. — ibd","text":"","code":"ibd"},{"path":"https://david-barnett.github.io/microViz/reference/ibd.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"IBD study data in phyloseq object. — ibd","text":"phyloseq-class experiment-level object OTU table sample data.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ibd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"IBD study data in phyloseq object. — ibd","text":"Papa, E., Docktor, M., Smillie, C., Weber, S., Preheim, S. P., Gevers, D., Giannoukos, G., Ciulla, D., Tabbaa, D., Ingram, J., Schauer, D. B., Ward, D. V., Korzenik, J. R., Xavier, R. J., Bousvaros, ., Alm, E. J. & Schauer, D. B. (2012). Non-invasive mapping gastrointestinal microbiota identifies children inflammatory bowel disease. PloS One, 7(6), e39242. <doi.org/10.1371/journal.pone.0039242>. Duvallet, C., Gibbons, S., Gurry, T., Irizarry, R., & Alm, E. (2017). MicrobiomeHD: human gut microbiome health disease [Data set]. Zenodo. <doi.org/10.5281/zenodo.1146764>.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/microViz.html","id":null,"dir":"Reference","previous_headings":"","what":"microViz: microbiome data analysis and visualization — microViz","title":"microViz: microbiome data analysis and visualization — microViz","text":"microViz provides functions statistics visualization microbiome sequencing data. microViz wraps, extends complements popular microbial ecology packages like phyloseq, vegan, microbiome. Check website tutorials illustrated help pages. https://david-barnett.github.io/microViz/","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/microViz.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"microViz: microbiome data analysis and visualization — microViz","text":"David Barnett (ORCID) (GitHub)","code":""},{"path":"https://david-barnett.github.io/microViz/reference/models2stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract statistics from taxatree_models or tax_model output — taxatree_models2stats","title":"Extract statistics from taxatree_models or tax_model output — taxatree_models2stats","text":"Runs function e.g. broom::tidy list models, .e. output taxatree_models tax_model","code":""},{"path":"https://david-barnett.github.io/microViz/reference/models2stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract statistics from taxatree_models or tax_model output — taxatree_models2stats","text":"","code":"taxatree_models2stats(data, fun = \"auto\", ..., .keep_models = FALSE)  tax_models2stats(data, rank = NULL, fun = \"auto\", ..., .keep_models = FALSE)"},{"path":"https://david-barnett.github.io/microViz/reference/models2stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract statistics from taxatree_models or tax_model output — taxatree_models2stats","text":"data psExtra attached tax_models taxatree_models list, just list models fun function assist extraction stats dataframe models, \"auto\" ... extra arguments passed fun .keep_models models list kept psExtra output? rank string naming rank tax_model run (needed data list)","code":""},{"path":"https://david-barnett.github.io/microViz/reference/models2stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract statistics from taxatree_models or tax_model output — taxatree_models2stats","text":"data.frame, attached psExtra","code":""},{"path":"https://david-barnett.github.io/microViz/reference/models2stats.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Extract statistics from taxatree_models or tax_model output — taxatree_models2stats","text":"taxatree_models2stats(): Extract stats list psExtra output taxatree_models tax_models2stats(): Extract stats list psExtra output tax_model","code":""},{"path":"https://david-barnett.github.io/microViz/reference/models2stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract statistics from taxatree_models or tax_model output — taxatree_models2stats","text":"","code":"# This example is an abbreviated excerpt from article on taxon modelling on # the microViz documentation website  library(dplyr) data(\"ibd\", package = \"microViz\")  # We'll keep only the Ulcerative Colitis and Healthy Control samples, to # simplify the analyses for this example. We'll also remove the Species # rank information, as most OTUs in this dataset are not assigned to a # species. We'll also use `tax_fix` to fill any gaps where the Genus is # unknown, with the family name or whatever higher rank classification is # known.  phylo <- ibd %>%   ps_filter(DiseaseState %in% c(\"UC\", \"nonIBD\")) %>%   tax_mutate(Species = NULL) %>%   tax_fix()  # Let's make some sample data variables that are easier to use and compare # in the statistical modelling ahead. We will convert dichotomous # categorical variables into similar binary variables (values: 1 for true, # or 0 for false). We will also scale and center the numeric variable for # age.  phylo <- phylo %>%   ps_mutate(     UC = ifelse(DiseaseState == \"UC\", yes = 1, no = 0),     female = ifelse(gender == \"female\", yes = 1, no = 0),     antibiotics = ifelse(abx == \"abx\", yes = 1, no = 0),     steroids = ifelse(steroids == \"steroids\", yes = 1, no = 0),     age_scaled = scale(age, center = TRUE, scale = TRUE)   )  lm_models <- phylo %>%   tax_fix() %>%   tax_prepend_ranks() %>%   tax_transform(\"compositional\", rank = \"Genus\") %>%   tax_filter(min_prevalence = 0.1, use_counts = TRUE) %>%   taxatree_models(     type = lm,     trans = \"log2\", trans_args = list(zero_replace = \"halfmin\"),     ranks = c(\"Phylum\", \"Class\", \"Genus\"),     variables = c(\"UC\", \"female\", \"antibiotics\", \"steroids\", \"age_scaled\")   ) #> Proportional min_prevalence given: 0.1 --> min 7/67 samples. #> 2025-04-14 11:43:16.088791 - modelling at rank: Phylum #> 2025-04-14 11:43:16.248812 - modelling at rank: Class #> 2025-04-14 11:43:16.969508 - modelling at rank: Genus  lm_stats <- lm_models %>% taxatree_models2stats()  # inspect the psExtra returned, now with taxatree_stats dataframe added lm_stats #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 68 taxa and 67 samples ] #> sample_data() Sample Data:       [ 67 samples by 19 sample variables ] #> tax_table()   Taxonomy Table:    [ 68 taxa by 6 taxonomic ranks ] #>  #> otu_get(counts = TRUE)\t\t [ 68 taxa and 67 samples ] #>  #> psExtra info: #> tax_agg = \"Genus\" tax_trans = \"compositional\"  #>  #> taxatree_stats dataframe: #> 88 taxa at 3 ranks: Phylum, Class, Genus  #> 5 terms: UC, female, antibiotics, steroids, age_scaled  # inspect the dataframe itself lm_stats %>% taxatree_stats_get() #> # A tibble: 440 × 8 #>    term        taxon          rank  formula estimate std.error statistic p.value #>    <fct>       <chr>          <fct> <chr>      <dbl>     <dbl>     <dbl>   <dbl> #>  1 UC          P: Firmicutes  Phyl… `P: Fi…   0.0430     0.455    0.0945  0.925  #>  2 female      P: Firmicutes  Phyl… `P: Fi…  -0.297      0.324   -0.919   0.362  #>  3 antibiotics P: Firmicutes  Phyl… `P: Fi…  -0.793      0.440   -1.80    0.0763 #>  4 steroids    P: Firmicutes  Phyl… `P: Fi…  -0.747      0.415   -1.80    0.0771 #>  5 age_scaled  P: Firmicutes  Phyl… `P: Fi…   0.144      0.183    0.788   0.434  #>  6 UC          P: Bacteroide… Phyl… `P: Ba…  -2.58       1.63    -1.58    0.120  #>  7 female      P: Bacteroide… Phyl… `P: Ba…  -1.01       1.16    -0.870   0.388  #>  8 antibiotics P: Bacteroide… Phyl… `P: Ba…   1.52       1.58     0.962   0.340  #>  9 steroids    P: Bacteroide… Phyl… `P: Ba…  -1.67       1.49    -1.12    0.266  #> 10 age_scaled  P: Bacteroide… Phyl… `P: Ba…  -0.340      0.655   -0.519   0.605  #> # ℹ 430 more rows  # keep the models on the psExtra object lm_models %>% taxatree_models2stats(.keep_models = TRUE) #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 68 taxa and 67 samples ] #> sample_data() Sample Data:       [ 67 samples by 19 sample variables ] #> tax_table()   Taxonomy Table:    [ 68 taxa by 6 taxonomic ranks ] #>  #> otu_get(counts = TRUE)\t\t [ 68 taxa and 67 samples ] #>  #> psExtra info: #> tax_agg = \"Genus\" tax_trans = \"compositional\"  #>  #> taxatree_models list: #> Ranks: Phylum/Class/Genus #> taxatree_stats dataframe: #> 88 taxa at 3 ranks: Phylum, Class, Genus  #> 5 terms: UC, female, antibiotics, steroids, age_scaled  # you can adjust the p values with taxatree_stats_p_adjust  # you can plot the results with taxatree_plots"},{"path":"https://david-barnett.github.io/microViz/reference/new_psExtraInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for psExtraInfo list objects (internal use) — new_psExtraInfo","title":"Constructor for psExtraInfo list objects (internal use) — new_psExtraInfo","text":"Constructor psExtraInfo list objects (internal use)","code":""},{"path":"https://david-barnett.github.io/microViz/reference/new_psExtraInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for psExtraInfo list objects (internal use) — new_psExtraInfo","text":"","code":"new_psExtraInfo(   tax_agg = character(),   tax_trans = character(),   tax_scale = character(),   dist_method = character(),   ord_info = new_psExtraOrdInfo() )"},{"path":"https://david-barnett.github.io/microViz/reference/new_psExtraInfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for psExtraInfo list objects (internal use) — new_psExtraInfo","text":"tax_agg character string naming rank psExtra aggregated tax_trans character vector naming transformation(s) applied taxa psExtra tax_scale character vector dist_method character vector ord_info psExtraOrdInfo list","code":""},{"path":"https://david-barnett.github.io/microViz/reference/new_psExtraInfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for psExtraInfo list objects (internal use) — new_psExtraInfo","text":"psExtraInfo S3 class list","code":""},{"path":"https://david-barnett.github.io/microViz/reference/new_psExtraOrdInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for info list class used in ord_info element of psExtraInfo — new_psExtraOrdInfo","title":"Constructor for info list class used in ord_info element of psExtraInfo — new_psExtraOrdInfo","text":"Constructor info list class used ord_info element psExtraInfo","code":""},{"path":"https://david-barnett.github.io/microViz/reference/new_psExtraOrdInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for info list class used in ord_info element of psExtraInfo — new_psExtraOrdInfo","text":"","code":"new_psExtraOrdInfo(   method = character(),   constraints = character(),   conditions = character() )"},{"path":"https://david-barnett.github.io/microViz/reference/new_psExtraOrdInfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for info list class used in ord_info element of psExtraInfo — new_psExtraOrdInfo","text":"method character string naming ordination method constraints character vector naming constraint variables conditions character vector naming condition variables","code":""},{"path":"https://david-barnett.github.io/microViz/reference/new_psExtraOrdInfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for info list class used in ord_info element of psExtraInfo — new_psExtraOrdInfo","text":"psExtraOrdInfo S3 class list","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ord_arrows.html","id":null,"dir":"Reference","previous_headings":"","what":"Create ordination plot vector styling lists — Ordination-arrows","title":"Create ordination plot vector styling lists — Ordination-arrows","text":"Used ord_plot, see examples .","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ord_arrows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create ordination plot vector styling lists — Ordination-arrows","text":"","code":"vec_constraint(   linewidth = 1,   alpha = 0.8,   colour = \"brown\",   arrow = grid::arrow(length = grid::unit(0.005, units = \"npc\"), type = \"closed\", angle =     30),   lineend = \"round\",   linejoin = \"mitre\",   ... )  vec_tax_sel(   linewidth = 0.5,   alpha = 1,   colour = \"black\",   arrow = grid::arrow(length = grid::unit(0.005, units = \"npc\"), type = \"closed\", angle =     30),   lineend = \"round\",   linejoin = \"mitre\",   ... )  vec_tax_all(linewidth = 0.5, alpha = 0.25, arrow = NULL, ...)"},{"path":"https://david-barnett.github.io/microViz/reference/ord_arrows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create ordination plot vector styling lists — Ordination-arrows","text":"linewidth width vector alpha opacity vector colour colour vector arrow arrow style specified grid::arrow() NULL arrow lineend Line end style (round, butt, square). linejoin Line join style (round, mitre, bevel). ... arguments passed geom_segment","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ord_arrows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create ordination plot vector styling lists — Ordination-arrows","text":"list","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ord_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Ordinate samples (arrange by similarity in multiple dimensions) — ord_calc","title":"Ordinate samples (arrange by similarity in multiple dimensions) — ord_calc","text":"Used plotting ord_plot() explorating interactively ord_explore(). Use method = \"auto\" automatically pick appropriate method : \"PCA\" (Principal Components Analysis) combines taxa abundances new dimensions. first axes display greatest variation microbial data. \"RDA\" (Redundancy Analysis) constrained PCA, roughly speaking. finds variation data can explained constraints variables, microbial data. \"PCoA\" (Principal Coordinates Analysis) finds coordinate system best preserves original distances samples. \"CAP\" (Constrained Analysis Principal Coordinates) also known distance-based Redundancy Analysis. Alternatively leaving method = \"auto\", can explicitly specify methods, choose one following: \"CCA\" (Canonical Correspondence Analysis) - canonical correlation analysis! \"NMDS\" (Non-metric Multidimensional Scaling) strongly recommended check useful website introductory explanations methods \"GUide STatistical Analysis Microbial Ecology\": https://sites.google.com/site/mb3gustame/","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ord_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ordinate samples (arrange by similarity in multiple dimensions) — ord_calc","text":"","code":"ord_calc(   data,   method = \"auto\",   constraints = NULL,   conditions = NULL,   scale_cc = TRUE,   verbose = TRUE,   ... )"},{"path":"https://david-barnett.github.io/microViz/reference/ord_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ordinate samples (arrange by similarity in multiple dimensions) — ord_calc","text":"data psExtra object: output dist_calc(), tax_transform() distance calculation required method e.g. RDA method ordination method use? \"auto\" means automatically determined psExtra args. really know want: manually set one 'PCoA', 'PCA', 'CCA', 'CAP' 'RDA' constraints (vector ) valid sample_data name(s) constrain analyses, leave NULL unconstrained ordination. Non-NULL values compatible method = \"auto\"/\"RDA\"/\"CAP\" conditions (vector ) valid sample_data name(s) partial analyses Condition(), leave NULL scale_cc TRUE (default) ensures constraints conditions variables scaled use, ensure effects comparable. set FALSE must ensure already set variables similar scale ! constraints conditions, scale_cc nothing. verbose TRUE \"max\", show warnings messages constraint conditions scaling missings etc. FALSE suppresses warnings! ... optional arguments passed phyloseq::ordinate()","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ord_calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ordinate samples (arrange by similarity in multiple dimensions) — ord_calc","text":"psExtra object","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ord_calc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ordinate samples (arrange by similarity in multiple dimensions) — ord_calc","text":"Extends functionality phyloseq::ordinate(). Results can used directly ord_plot(). can extract ordination object analyses ord_get()","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/ord_calc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ordinate samples (arrange by similarity in multiple dimensions) — ord_calc","text":"","code":"library(phyloseq) library(vegan) data(\"dietswap\", package = \"microbiome\")  # create a couple of numerical variables to use as constraints dietswap <- ps_mutate(   dietswap,   female = dplyr::if_else(sex == \"female\", true = 1, false = 0),   weight = dplyr::recode(bmi_group, obese = 3, overweight = 2, lean = 1) )  # add a couple of missing values to demo automated dropping of observations with missings sample_data(dietswap)$female[c(3, 4)] <- NA  # compute ordination test <- dietswap %>%   tax_agg(\"Genus\") %>%   dist_calc(\"bray\") %>%   ord_calc(constraints = c(\"weight\", \"female\")) #> Dropping samples with missings: 2 #>  #> Centering (mean) and scaling (sd) the constraints and/or conditions:  #> \tweight #> \tfemale  # familiarise yourself with the structure of the returned psExtra object test #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 130 taxa and 220 samples ] #> sample_data() Sample Data:       [ 220 samples by 10 sample variables ] #> tax_table()   Taxonomy Table:    [ 130 taxa by 3 taxonomic ranks ] #>  #> psExtra info: #> tax_agg = \"Genus\"  #>  #> bray distance matrix of size 220  #> 0.7639533 0.7699252 0.80507 0.731024 0.7283254 ... #>  #> ordination of class: capscale rda cca  #> capscale(formula = distance ~ weight + female, data = data) #> Ordination info: #> method = 'CAP'\tconstraints = 'weight+female'\t str(test, max.level = 1) #> Formal class 'psExtra' [package \"microViz\"] with 15 slots  # compute RDA with centre-log-ratio transformed taxa test2 <- dietswap %>%   tax_agg(\"Genus\") %>%   tax_transform(\"clr\") %>%   ord_calc(constraints = c(\"weight\", \"female\")) #> Dropping samples with missings: 2 #>  #> Centering (mean) and scaling (sd) the constraints and/or conditions:  #> \tweight #> \tfemale  # plot with vegan package graphics to show it returns a standard ordination object ord_get(test2) %>% vegan::ordiplot()   # This is equivalent to CAP with \"aitchison\" distance ord_plot(test2, plot_taxa = 8:1)  # but the latter (below) doesn't allow plotting taxa loadings with ord_plot dietswap %>%   tax_agg(\"Genus\") %>%   dist_calc(\"aitchison\") %>%   ord_calc(constraints = c(\"weight\", \"female\")) %>%   ord_plot() #> Dropping samples with missings: 2 #>  #> Centering (mean) and scaling (sd) the constraints and/or conditions:  #> \tweight #> \tfemale"},{"path":"https://david-barnett.github.io/microViz/reference/ord_explore.html","id":null,"dir":"Reference","previous_headings":"","what":"Interactively explore microbial compositions of ordinated samples — ord_explore","title":"Interactively explore microbial compositions of ordinated samples — ord_explore","text":"Shiny app used create explore interactive version ord_plot(). can select samples ordination plot view composition stacked barplots. ord_explore() data argument takes either: output ord_calc() (.e. psExtra ordination) plain phyloseq object: ord_explore() help build ordination app running (browser), can: Create/edit ordination required look R console error messages chosen options build Style ordination plot (e.g. choose dimensions; set colour size; ...) Taxa loading arrows can added PCA, RDA CCA plots Convex hulls ellipses can drawn Colour set variable track individuals time path plotter, data MUST already sorted time (e.g. ps_arrange)! Click use lasso tool select 1 samples view compositions default samples can selected individually Set \"Select\" option another variable select level variable Style taxonomic compositions barplot samples ordered using seriate_method argument transformation distance used ordination plot app may lag select 100s samples ungroup \"\" category avoid lag: either reduce number taxa samples, deselect \"Interactive\" barplot Stop app clicking red stop button R console Closing web browser window stop app, (can find app local http address shown R console) forget copy ordination plot code close app See Details section known limitations app. Please report app problems microViz GitHub issues page.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ord_explore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interactively explore microbial compositions of ordinated samples — ord_explore","text":"","code":"ord_explore(   data,   sample_id = NULL,   seriate_method = \"OLO_ward\",   app_options = list(launch.browser = TRUE),   plot_widths = c(7, 9),   modal_fade = TRUE,   notification_durations = list(2, 20),   counts_warn = TRUE,   ... )"},{"path":"https://david-barnett.github.io/microViz/reference/ord_explore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interactively explore microbial compositions of ordinated samples — ord_explore","text":"data phyloseq, psExtra output ord_calc sample_id name sample ID variable use default selecting samples seriate_method seriation method order phyloseq samples similarity app_options passed shinyApp() options argument plot_widths widths plots inches, including legends (first number ordination, second composition barplot) modal_fade popover menus (modals) fade animation? notification_durations length 2 list giving duration seconds short long notifications NULL notifications disappear automatically counts_warn warning issued accounts unavailable? ... additional arguments passed ord_plot","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ord_explore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interactively explore microbial compositions of ordinated samples — ord_explore","text":"nothing, opens default browser","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ord_explore.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interactively explore microbial compositions of ordinated samples — ord_explore","text":"Limitations: \"Select:\" grouping variable NA samples, grouping variable used select samples \"Shape:\" can mapped variables maximum 5 distinct levels, including NAs. NAs shape variable shown hollow circles. web browsers, e.g. older versions Firefox, numeric inputs' buttons sometimes hard click. workaround, click box type number use arrow keys. problem occurs Shiny apps, just microViz.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ord_explore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interactively explore microbial compositions of ordinated samples — ord_explore","text":"","code":"# example code only runs in interactive R session if (interactive()) {   library(phyloseq)   library(dplyr)    # example of quickstart approach with interactive ordination calculation #   microViz::ibd %>%     # filtering makes subsequent calculations faster     tax_filter(min_prevalence = 2) %>%     tax_fix() %>%     ord_explore()    # simple example with precalculated ordination #   data(\"enterotype\")   taxa_names(enterotype)[1] <- \"unclassified\" # replaces the \"-1\" taxon name   ps <- tax_fix(enterotype) # remove NA taxa   ord1 <- ps %>%     tax_transform(\"identity\", rank = \"Genus\") %>%     dist_calc(\"bray\") %>%     ord_calc(method = \"PCoA\")    ord_explore(data = ord1, auto_caption = 6)    # constrained ordination example #   data(\"dietswap\", package = \"microbiome\")    # create a couple of numerical variables to use as constraints   dietswap <- dietswap %>%     ps_mutate(       weight = recode(bmi_group, obese = 3, overweight = 2, lean = 1),       female = if_else(sex == \"female\", true = 1, false = 0)     ) %>%     tax_agg(\"Genus\")    constrained_aitchison_rda <- dietswap %>%     tax_transform(\"clr\") %>%     ord_calc(constraints = c(\"weight\", \"female\"))    # label style arguments can be passed to ord_explore   constrained_aitchison_rda %>%     ord_explore(       tax_lab_style = list(size = 3),       constraint_lab_style = list(size = 4), auto_caption = 6     )   # Try changing the point colour to bmi_group or similar   # Style points interactively!   # (setting colour/shape/etc as arguments doesn't work)    # dietswap is actually a longitudinal dataset, with multiple samples per   # subject. If we arrange by timepoint first (!!!), we can use the \"paths\"   # additional plot layer from the ord_explore \"Add:\" menu to track   # individual subjects over time.   dietswap %>%     ps_arrange(timepoint) %>%     tax_fix() %>%     ord_explore()     # Another dataset, where \"size\" variable drives gradient on PC1   # Try setting size and/or alpha to correspond to \"size\"!   # Then edit the ordination to use \"size\" as a condition, see what happens   # hmp2 <- microbiomeutilities::hmp2   hmp2 %>%     tax_fix() %>%     tax_transform(rank = \"Genus\", \"identity\") %>%     dist_calc(\"aitchison\") %>%     ord_calc() %>%     ord_explore()    # another dataset   data(\"soilrep\", package = \"phyloseq\")   # test auto creation of SAMPLE var   ps <- soilrep %>% ps_select(-Sample)   # The barplot is actually quite useless with the 16000+ anonymous OTUs   # in this dataset, but the 1000s of unmerged \"Other\" categories do render   phyloseq_validate(ps) %>%     tax_fix() %>%     dist_calc(\"aitchison\") %>%     ord_calc() %>%     ord_explore() }"},{"path":"https://david-barnett.github.io/microViz/reference/ord_plot-label-helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Helpers for ord_plot label adjustments — textAngleCalc","title":"Helpers for ord_plot label adjustments — textAngleCalc","text":"Consider moving functions tax_lab_style() man page/.R file. See functions section.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ord_plot-label-helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helpers for ord_plot label adjustments — textAngleCalc","text":"","code":"textAngleCalc(xvec, yvec, max = 90, ratio = 1, perpendicular = FALSE)  textHjustCalc(xvec, adjust = TRUE)"},{"path":"https://david-barnett.github.io/microViz/reference/ord_plot-label-helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helpers for ord_plot label adjustments — textAngleCalc","text":"xvec numeric vector values used x axis yvec numeric vector values used y axis max maximum absolute numeric value angle degrees return (rotating text/labels) ratio adjustment aspect ratio plot setting fixed coordinate aspect ratio coord_fixed (advised) adjust logical, apply hjust (FALSE means return 0.5)","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ord_plot-label-helpers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helpers for ord_plot label adjustments — textAngleCalc","text":"numeric vector representing either angles rotate geom_text labels, hjust values","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ord_plot-label-helpers.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Helpers for ord_plot label adjustments — textAngleCalc","text":"textAngleCalc(): Calculate rotation text labels ordination plot textHjustCalc(): Calculate hjust text labels ordination plot","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ord_plot-label-helpers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helpers for ord_plot label adjustments — textAngleCalc","text":"","code":"library(ggplot2) library(dplyr)  # create basic ggplot for labelling  df <- mtcars %>% mutate(across(everything(), scale))  p <- ggplot(df, aes(mpg, hp, label = rownames(df))) +   geom_segment(xend = 0, yend = 0, color = \"lightgrey\") +   annotate(x = 0, y = 0, geom = \"point\", size = 4) +   theme_minimal()  p   # calculate new variable within aes mapping non-standard evaluation p +   geom_text(size = 2.5, mapping = aes(angle = textAngleCalc(mpg, hp))) +   coord_fixed(ratio = 1)   # equivalent: calculate variable outside aes by referring to dataframe again p +   geom_text(size = 2.5, angle = textAngleCalc(df$mpg, df$hp)) +   coord_fixed(ratio = 1)   # fixing aspect ratio is important # see how angles may be incorrect otherwise p +   geom_text(size = 2.5, mapping = aes(angle = textAngleCalc(mpg, hp)))   # ratio argument allows matching angles with alternative aspect ratio p +   geom_text(size = 2.5, angle = textAngleCalc(df$mpg, df$hp, ratio = .5)) +   coord_fixed(ratio = .5)   p +   geom_text(size = 2.5, angle = textAngleCalc(df$mpg, df$hp, ratio = 1.5)) +   coord_fixed(ratio = 1.5)   # perpendicular argument makes text perpendicular instead of parallel p +   geom_text(     check_overlap = TRUE, size = 2.5,     angle = textAngleCalc(df$mpg, df$hp, perpendicular = TRUE, ratio = 1.5)   ) +   coord_fixed(ratio = 1.5, clip = \"off\")   # max angle limits extreme text angles p +   geom_text(     size = 2.5, check_overlap = TRUE,     angle = textAngleCalc(df$mpg, df$hp, ratio = 2, max = 10),     hjust = textHjustCalc(xvec = df$mpg, adjust = TRUE)   ) +   coord_fixed(ratio = 2, clip = \"off\")"},{"path":"https://david-barnett.github.io/microViz/reference/ord_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Customisable ggplot2 ordination plot — ord_plot","title":"Customisable ggplot2 ordination plot — ord_plot","text":"Draw ordination plot. Utilises psExtra object produced ord_calc. extensive tutorial see ordination vignette. interpretation see relevant pages PCA, PCoA, RDA, CCA GUide STatistical Analysis Microbial Ecology (GUSTA ) website: https://sites.google.com/site/mb3gustame/","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ord_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Customisable ggplot2 ordination plot — ord_plot","text":"","code":"ord_plot(   data,   axes = 1:2,   plot_taxa = FALSE,   tax_vec_length = NA,   tax_vec_style_all = vec_tax_all(),   tax_vec_style_sel = vec_tax_sel(),   tax_lab_length = tax_vec_length * 1.1,   tax_lab_style = list(),   taxon_renamer = function(x) identity(x),   constraint_vec_length = NA,   constraint_vec_style = vec_constraint(),   constraint_lab_length = constraint_vec_length * 1.1,   constraint_lab_style = list(),   var_renamer = function(x) identity(x),   plot_samples = TRUE,   scaling = 2,   auto_caption = 8,   center = FALSE,   clip = \"off\",   expand = !center,   interactive = FALSE,   ... )"},{"path":"https://david-barnett.github.io/microViz/reference/ord_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Customisable ggplot2 ordination plot — ord_plot","text":"data psExtra object ordination attached, .e. output ord_calc axes axes plot: numerical vector length 2, e.g. 1:2 c(3,5) plot_taxa ord_calc method \"PCA/RDA\" draw taxa loading vectors (see details) tax_vec_length taxon arrow vector scale multiplier. NA = auto-scaling, provide numeric multiplier . tax_vec_style_all list named aesthetic attributes (background) taxon vectors tax_vec_style_sel list named aesthetic attributes taxon vectors taxa selected plot_taxa tax_lab_length scale multiplier label distance/position selected taxa tax_lab_style list style options taxon labels, see tax_lab_style() function. taxon_renamer function takes plotted taxon names returns modified names labels constraint_vec_length constraint arrow vector scale multiplier. NA = auto-scaling, provide numeric multiplier . constraint_vec_style list aesthetics/arguments (colour, alpha etc) constraint vectors constraint_lab_length label distance/position constraints (relative default position proportional correlations axis) constraint_lab_style list aesthetics/arguments (colour, size etc) constraint labels var_renamer function rename constraining variables plotting labels plot_samples TRUE, plot sample points geom_point scaling Type 2, type 1 scaling. info, see https://sites.google.com/site/mb3gustame/constrained-analyses/redundancy-analysis. Either \"species\" \"site\" scores scaled (proportional) eigenvalues, set scores left unscaled (?vegan::scores.cca) auto_caption size caption info ordination, NA none center expand plot limits center around origin point (0,0) clip clipping labels extend outside plot limits? expand expand plot limits little bit data range? interactive creates plot suitable use ggiraph (used ord_explore) ... pass aesthetics arguments sample points, drawn geom_point using aes_string","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ord_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Customisable ggplot2 ordination plot — ord_plot","text":"ggplot","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ord_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Customisable ggplot2 ordination plot — ord_plot","text":"specify plot_taxa argument (using PCA, CCA RDA): FALSE –> plot taxa vectors labels integer vector e.g. 1:3 –> plot labels top 3 taxa (longest line length) single numeric value e.g. 0.75 –> plot labels taxa line length > 0.75 character vector e.g. c('g__Bacteroides', 'g__Veillonella') –> plot labels exactly named taxa","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/ord_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Customisable ggplot2 ordination plot — ord_plot","text":"","code":"library(ggplot2) data(\"dietswap\", package = \"microbiome\")  # create a couple of numerical variables to use as constraints or conditions dietswap <- dietswap %>%   ps_mutate(     weight = dplyr::recode(bmi_group, obese = 3, overweight = 2, lean = 1),     female = dplyr::if_else(sex == \"female\", true = 1, false = 0)   )  # unconstrained PCA ordination unconstrained_aitchison_pca <- dietswap %>%   tax_transform(\"clr\", rank = \"Genus\") %>%   ord_calc() # method = \"auto\" --> picks PCA as no constraints or distances  unconstrained_aitchison_pca %>%   ord_plot(colour = \"bmi_group\", plot_taxa = 1:5) +   stat_ellipse(aes(linetype = bmi_group, colour = bmi_group))   # you can generate an interactive version of the plot by specifying # interactive = TRUE, and passing a variable name to another argument # called `data_id` which is required for interactive point selection interactive_plot <- unconstrained_aitchison_pca %>%   ord_plot(     colour = \"bmi_group\", plot_taxa = 1:5,     interactive = TRUE, data_id = \"sample\"   )  # to start the html viewer, and allow selecting points, we must use a # ggiraph function called girafe and set some options and css ggiraph::girafe(   ggobj = interactive_plot,   options = list(     ggiraph::opts_selection(       css = ggiraph::girafe_css(         css = \"fill:orange;stroke:black;\",         point = \"stroke-width:1.5px\"       ),       type = \"multiple\", # this activates lasso selection (click top-right)       only_shiny = FALSE # allows interactive plot outside of shiny app     )   ) )  {\"x\":{\"html\":\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' class='ggiraph-svg' role='graphics-document' id='svg_78dc35d2_aacb_4967_8a6a_52392370814c' viewBox='0 0 432 360'>\\n <defs id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_defs'>\\n  <clipPath id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_c1'>\\n   <rect x='0' y='0' width='432' height='360'/>\\n  <\\/clipPath>\\n <\\/defs>\\n <g id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_rootg' class='ggiraph-svg-rootg'>\\n  <g clip-path='url(#svg_78dc35d2_aacb_4967_8a6a_52392370814c_c1)'>\\n   <rect x='0' y='0' width='432' height='360' fill='#FFFFFF' fill-opacity='1' stroke='#FFFFFF' stroke-opacity='1' stroke-width='0.75' stroke-linejoin='round' stroke-linecap='round' class='ggiraph-svg-bg'/>\\n   <polyline points='32.23,271.54 332.56,271.54' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <polyline points='32.23,208.72 332.56,208.72' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <polyline points='32.23,145.90 332.56,145.90' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <polyline points='32.23,83.07 332.56,83.07' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <polyline points='32.23,20.25 332.56,20.25' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <polyline points='65.84,315.32 65.84,5.48' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <polyline points='132.59,315.32 132.59,5.48' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <polyline points='199.34,315.32 199.34,5.48' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <polyline points='266.09,315.32 266.09,5.48' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <polyline points='32.23,302.95 332.56,302.95' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <polyline points='32.23,240.13 332.56,240.13' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <polyline points='32.23,177.31 332.56,177.31' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <polyline points='32.23,114.49 332.56,114.49' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <polyline points='32.23,51.66 332.56,51.66' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <polyline points='32.47,315.32 32.47,5.48' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <polyline points='99.22,315.32 99.22,5.48' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <polyline points='165.97,315.32 165.97,5.48' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <polyline points='232.71,315.32 232.71,5.48' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <polyline points='299.46,315.32 299.46,5.48' fill='none' stroke='#EBEBEB' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e1' cx='91.91' cy='213.25' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-1'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e2' cx='223.68' cy='106.94' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-2'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e3' cx='218.04' cy='115.01' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-3'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e4' cx='176.6' cy='77.81' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-4'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e5' cx='203.07' cy='207.74' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-5'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e6' cx='255.72' cy='200.87' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-6'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e7' cx='208.34' cy='73.56' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-7'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e8' cx='207.41' cy='150.55' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-8'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e9' cx='257.12' cy='151.26' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-9'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e10' cx='237.52' cy='108.08' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-10'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e11' cx='236.78' cy='147.18' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-11'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e12' cx='227.67' cy='104.79' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-12'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e13' cx='239.92' cy='85.13' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-13'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e14' cx='210.57' cy='19.56' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-14'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e15' cx='230.33' cy='208.81' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-15'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e16' cx='213.41' cy='133.18' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-16'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e17' cx='196.9' cy='158.32' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-17'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e18' cx='158.5' cy='104.86' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-18'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e19' cx='174.11' cy='83.17' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-19'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e20' cx='217.03' cy='133.83' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-20'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e21' cx='209.2' cy='92.87' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-21'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e22' cx='171.46' cy='55.52' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-22'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e23' cx='214.41' cy='165.71' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-23'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e24' cx='202.73' cy='132.07' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-24'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e25' cx='222.68' cy='76.04' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-25'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e26' cx='151.64' cy='77.86' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-26'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e27' cx='184.99' cy='123.83' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-27'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e28' cx='244.16' cy='118.6' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-28'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e29' cx='192.6' cy='97' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-29'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e30' cx='200.46' cy='32.78' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-30'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e31' cx='223.27' cy='203.84' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-31'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e32' cx='78.27' cy='193.53' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-32'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e33' cx='80.32' cy='161.29' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-33'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e34' cx='162.15' cy='168.23' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-34'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e35' cx='203.09' cy='189.89' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-35'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e36' cx='90.85' cy='163.58' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-36'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e37' cx='123.65' cy='185.87' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-37'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e38' cx='164.03' cy='241.62' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-38'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e39' cx='102.84' cy='167.55' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-39'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e40' cx='164.15' cy='96.37' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-40'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e41' cx='78.14' cy='182.83' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-41'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e42' cx='89.2' cy='165.22' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-42'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e43' cx='154.77' cy='195.3' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-43'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e44' cx='180.94' cy='216.96' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-44'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e45' cx='111.55' cy='258.58' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-45'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e46' cx='158.08' cy='251.94' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-46'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e47' cx='144.25' cy='244.01' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-47'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e48' cx='105.98' cy='205.22' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-48'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e49' cx='166.44' cy='173.37' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-49'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e50' cx='226.14' cy='215.95' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-50'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e51' cx='205.07' cy='173.4' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-51'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e52' cx='268.46' cy='301.24' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-52'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e53' cx='201.9' cy='152.09' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-53'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e54' cx='234.61' cy='154.79' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-54'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e55' cx='235.17' cy='229.58' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-55'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e56' cx='197.18' cy='207.25' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-56'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e57' cx='230.43' cy='166.79' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-57'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e58' cx='224' cy='145.17' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-58'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e59' cx='241.85' cy='170.03' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-59'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e60' cx='243.54' cy='182.75' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-60'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e61' cx='231.69' cy='227.8' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-61'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e62' cx='191.23' cy='261.52' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-62'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e63' cx='216.55' cy='184.39' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-63'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e64' cx='228.6' cy='162' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-64'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e65' cx='207.21' cy='119.05' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-65'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e66' cx='251.23' cy='205.45' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-66'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e67' cx='225.98' cy='212.53' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-67'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e68' cx='99.81' cy='243' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-68'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e69' cx='191.65' cy='192.65' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-69'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e70' cx='96.97' cy='239.48' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-70'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e71' cx='96.53' cy='212.3' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-71'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e72' cx='90.54' cy='191.72' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-72'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e73' cx='116.3' cy='133.91' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-73'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e74' cx='192.42' cy='229.91' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-74'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e75' cx='179.95' cy='113.84' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-75'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e76' cx='228.03' cy='146.22' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-76'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e77' cx='255.23' cy='200.49' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-77'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e78' cx='196.25' cy='261.8' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-78'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e79' cx='205.54' cy='189.79' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-79'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e80' cx='168.69' cy='150.21' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-80'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e81' cx='234.32' cy='239.64' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-81'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e82' cx='186.53' cy='277.94' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-82'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e83' cx='203.09' cy='150.96' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-83'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e84' cx='179.16' cy='126.49' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-84'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e85' cx='205.75' cy='147.56' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-85'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e86' cx='237.99' cy='217.55' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-86'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e87' cx='180.82' cy='164.57' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-87'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e88' cx='233.25' cy='222.1' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-88'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e89' cx='226.88' cy='256.54' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-89'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e90' cx='207.96' cy='137.67' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-90'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e91' cx='230.63' cy='151.47' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-91'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e92' cx='225.58' cy='160.3' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-92'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e93' cx='248.69' cy='257.31' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-93'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e94' cx='241.35' cy='247.83' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-94'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e95' cx='262.52' cy='269.4' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-95'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e96' cx='201.39' cy='142.08' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-96'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e97' cx='216.41' cy='134.41' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-97'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e98' cx='223.73' cy='144.59' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-98'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e99' cx='257.11' cy='275.69' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-99'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e100' cx='163.91' cy='118.2' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-100'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e101' cx='236.09' cy='205.25' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-101'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e102' cx='190.05' cy='169.26' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-102'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e103' cx='245.74' cy='258.7' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-103'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e104' cx='217.68' cy='259.4' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-104'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e105' cx='254.01' cy='195.17' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-105'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e106' cx='238.23' cy='264.46' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-106'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e107' cx='241' cy='249.51' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-107'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e108' cx='202.19' cy='188.19' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-108'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e109' cx='91.5' cy='149.93' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-109'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e110' cx='87.45' cy='159.05' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-110'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e111' cx='154.76' cy='161.54' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-111'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e112' cx='185.4' cy='170.64' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-112'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e113' cx='100.37' cy='213.1' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-113'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e114' cx='122.1' cy='189.64' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-114'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e115' cx='154.65' cy='154.84' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-115'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e116' cx='92.71' cy='161.38' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-116'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e117' cx='100.91' cy='229.67' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-117'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e118' cx='184.39' cy='183.54' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-118'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e119' cx='118.55' cy='172.43' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-119'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e120' cx='147.55' cy='200.98' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-120'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e121' cx='186.01' cy='108.74' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-121'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e122' cx='95.96' cy='236.4' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-122'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e123' cx='158.13' cy='157.06' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-123'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e124' cx='143.35' cy='217.51' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-124'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e125' cx='179.64' cy='275.58' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-125'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e126' cx='183.37' cy='104.44' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-126'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e127' cx='146.58' cy='189.67' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-127'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e128' cx='104.96' cy='253.91' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-128'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e129' cx='153.69' cy='111.13' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-129'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e130' cx='83.48' cy='166.24' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-130'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e131' cx='82.2' cy='159.29' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-131'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e132' cx='189.56' cy='170.31' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-132'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e133' cx='179.4' cy='218.2' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-133'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e134' cx='101.33' cy='203.51' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-134'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e135' cx='116.88' cy='179' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-135'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e136' cx='133.7' cy='161.06' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-136'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e137' cx='185.26' cy='134.7' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-137'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e138' cx='98.95' cy='251.31' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-138'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e139' cx='89.52' cy='234.85' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-139'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e140' cx='94.29' cy='150.4' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-140'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e141' cx='86.13' cy='150.26' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-141'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e142' cx='156.5' cy='170.6' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-142'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e143' cx='166.96' cy='219.39' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-143'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e144' cx='99.58' cy='209.82' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-144'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e145' cx='110.93' cy='200.16' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-145'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e146' cx='115.76' cy='123.09' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-146'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e147' cx='158.26' cy='124.51' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-147'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e148' cx='95.29' cy='196.93' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-148'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e149' cx='143.31' cy='150.44' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-149'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e150' cx='89.98' cy='206.32' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-150'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e151' cx='78' cy='185.23' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-151'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e152' cx='81.21' cy='201.76' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-152'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e153' cx='93.34' cy='203.84' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-153'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e154' cx='91.54' cy='159.31' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-154'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e155' cx='106.35' cy='129.02' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-155'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e156' cx='136.35' cy='81.08' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-156'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e157' cx='106.34' cy='173.77' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-157'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e158' cx='103.87' cy='161.83' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-158'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e159' cx='175.07' cy='238.03' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-159'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e160' cx='88.64' cy='186.24' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-160'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e161' cx='189.21' cy='220.85' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-161'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e162' cx='149.69' cy='119.22' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-162'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e163' cx='165.62' cy='165.17' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-163'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e164' cx='109.7' cy='197.41' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-164'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e165' cx='149.98' cy='147.97' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-165'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e166' cx='97.1' cy='233.49' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-166'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e167' cx='85.47' cy='145.49' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-167'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e168' cx='191.65' cy='239.81' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-168'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e169' cx='135.7' cy='146.01' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-169'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e170' cx='117.11' cy='191.04' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-170'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e171' cx='111.51' cy='195.27' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-171'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e172' cx='85.56' cy='158.2' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-172'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e173' cx='112.51' cy='101.7' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-173'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e174' cx='154.88' cy='151.8' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-174'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e175' cx='104.58' cy='189.74' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-175'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e176' cx='84.39' cy='163.54' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-176'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e177' cx='113.45' cy='124.89' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-177'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e178' cx='146.39' cy='137.27' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-178'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e179' cx='106.92' cy='197.37' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-179'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e180' cx='91.82' cy='155.49' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-180'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e181' cx='139.95' cy='232.22' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-181'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e182' cx='195.05' cy='254.79' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-182'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e183' cx='129.98' cy='210' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-183'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e184' cx='137.96' cy='162.09' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-184'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e185' cx='115.28' cy='209.95' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-185'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e186' cx='94.65' cy='228.86' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-186'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e187' cx='208.49' cy='225.36' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-187'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e188' cx='77.41' cy='193.04' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-188'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e189' cx='169.73' cy='207.46' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-189'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e190' cx='188.03' cy='219.84' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-190'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e191' cx='83.48' cy='180.79' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-191'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e192' cx='151.18' cy='240.61' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-192'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e193' cx='176.18' cy='182.08' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-193'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e194' cx='82.68' cy='184.63' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-194'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e195' cx='94.89' cy='144.81' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-195'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e196' cx='148.45' cy='182.13' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-196'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e197' cx='104.87' cy='172.69' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-197'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e198' cx='166.01' cy='230.74' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-198'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e199' cx='95.06' cy='166.45' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-199'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e200' cx='169.8' cy='252.4' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-200'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e201' cx='94.28' cy='169.12' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-201'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e202' cx='155.83' cy='220.42' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-202'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e203' cx='101.53' cy='163.07' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-203'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e204' cx='151.12' cy='254.78' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-204'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e205' cx='97' cy='184.34' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-205'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e206' cx='189.95' cy='247.14' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-206'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e207' cx='213.71' cy='186.47' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-207'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e208' cx='217.81' cy='170.25' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-208'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e209' cx='229.12' cy='216.66' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-209'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e210' cx='228.81' cy='233.57' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-210'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e211' cx='140.75' cy='138.69' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-211'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e212' cx='208.71' cy='230.41' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-212'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e213' cx='212.53' cy='194.1' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-213'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e214' cx='225.94' cy='150.89' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-214'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e215' cx='157.41' cy='81.1' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-215'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e216' cx='178.3' cy='133' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-216'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e217' cx='220.95' cy='121.51' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-217'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e218' cx='192.39' cy='98.22' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-218'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e219' cx='149.43' cy='156.87' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-219'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e220' cx='212.74' cy='195.68' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-220'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e221' cx='172.38' cy='131.02' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-221'/>\\n   <circle id='svg_78dc35d2_aacb_4967_8a6a_52392370814c_e222' cx='199.53' cy='89.99' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round' data-id='Sample-222'/>\\n   <line x1='165.97' y1='177.31' x2='177.37' y2='177.57' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='174.19' y2='183.24' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='176.38' y2='184.88' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='136.6' y2='145.27' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='162.78' y2='174.69' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='83.95' y2='185.78' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='174.41' y2='184.32' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='170.69' y2='180.29' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='125.18' y2='171.08' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='182.33' y2='140.61' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='171.12' y2='155.63' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='174.19' y2='183.24' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='180.37' y2='185.43' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='174.19' y2='183.24' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='177.86' y2='170.28' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='165.78' y2='182.13' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='96.6' y2='184.37' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='74.46' y2='202.95' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='92.52' y2='199.42' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='107.98' y2='191.83' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='136.01' y2='180.4' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='108.51' y2='192.8' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='56.8' y2='179.66' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='60.11' y2='217.29' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='143.2' y2='145.58' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='156.27' y2='184.04' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='181.44' y2='184.44' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='135.76' y2='180.76' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='177.65' y2='176.31' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='184.15' y2='192.19' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='159.46' y2='168.87' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='163.04' y2='182.17' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='221.96' y2='158.74' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='179.62' y2='167.33' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='185.07' y2='122.92' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='163.83' y2='189.02' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='190.28' y2='160.37' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='174.19' y2='183.24' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='158.08' y2='132.66' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='170.47' y2='170.57' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='161.93' y2='145.73' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='160.63' y2='183.87' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='157.94' y2='178.86' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='133.54' y2='174.48' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='147.64' y2='183' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='174.19' y2='183.24' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='178.65' y2='147.26' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='157.43' y2='184.76' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='169.01' y2='155.64' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='164.97' y2='182.14' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='165.89' y2='177.44' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='146.09' y2='162.1' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='169.36' y2='170.76' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='168.35' y2='165.55' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='193.22' y2='201.14' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='180.68' y2='178.7' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='189.67' y2='209.28' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='218.18' y2='161.63' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='156.71' y2='182.03' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='162.73' y2='166.87' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='159.57' y2='180.62' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='173.87' y2='189.39' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='156.66' y2='171.75' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='149.38' y2='179.08' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='169.31' y2='173.45' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='172.16' y2='187.85' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='174.45' y2='184.47' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='180.78' y2='184.13' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='199.1' y2='233.05' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='163.74' y2='182.7' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='197.32' y2='202' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='170.97' y2='174.33' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='164.61' y2='175.77' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='188.2' y2='175.96' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='161.01' y2='182.18' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='167.7' y2='177.7' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='176.69' y2='174.43' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='171.99' y2='178.52' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='153.51' y2='173.35' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='164.51' y2='183.16' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='207.13' y2='160.42' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='174.19' y2='183.24' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='174.19' y2='183.24' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='253.92' y2='143.25' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='202.18' y2='201.9' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='174.47' y2='182.51' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='156.75' y2='177.83' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='168.85' y2='138.1' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='170.11' y2='174.65' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='162.56' y2='140.32' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='180.22' y2='166.95' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='97.45' y2='194.98' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='165.22' y2='159.26' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='174.57' y2='182.77' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='164.24' y2='181.34' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='176.54' y2='191.79' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='305' y2='223.43' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='262.48' y2='224.32' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='186.82' y2='197.89' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='116.2' y2='200.83' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='160.19' y2='182.68' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='168.79' y2='187.05' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='176.26' y2='187.88' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='159.1' y2='183.66' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='172.44' y2='137.77' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='163.28' y2='149.92' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='152.86' y2='171.81' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='176.46' y2='158.71' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='162.53' y2='152.2' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='218.67' y2='235.38' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='165.05' y2='133.46' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='170.01' y2='185.71' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='153.15' y2='193.17' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='163.63' y2='184.23' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='166.64' y2='187.88' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='151.05' y2='155.1' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='154.23' y2='203.16' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='125.39' y2='189.39' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='135.26' y2='166.44' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='171.62' y2='182.1' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='182.43' y2='151.35' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='177.25' y2='133.24' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='187.22' y2='153.08' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='135.26' y2='174.43' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='185.73' y2='187.24' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='170.19' y2='177.59' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='185.31' y2='183.76' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='180.67' y2='181.22' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='202.04' y2='190.94' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='172.51' y2='186.55' stroke='#000000' stroke-opacity='0.25' stroke-width='1.07' stroke-linejoin='round' stroke-linecap='butt'/>\\n   <line x1='165.97' y1='177.31' x2='305' y2='223.43' stroke='#000000' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='miter' stroke-linecap='round'/>\\n   <polygon points='303.53,223.73 305.00,223.43 304.01,222.31' fill='#000000' fill-opacity='1' stroke='#000000' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='miter' stroke-linecap='round'/>\\n   <line x1='165.97' y1='177.31' x2='60.11' y2='217.29' stroke='#000000' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='miter' stroke-linecap='round'/>\\n   <polygon points='61.06,216.12 60.11,217.29 61.59,217.53' fill='#000000' fill-opacity='1' stroke='#000000' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='miter' stroke-linecap='round'/>\\n   <line x1='165.97' y1='177.31' x2='56.8' y2='179.66' stroke='#000000' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='miter' stroke-linecap='round'/>\\n   <polygon points='58.08,178.88 56.80,179.66 58.12,180.39' fill='#000000' fill-opacity='1' stroke='#000000' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='miter' stroke-linecap='round'/>\\n   <line x1='165.97' y1='177.31' x2='262.48' y2='224.32' stroke='#000000' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='miter' stroke-linecap='round'/>\\n   <polygon points='260.98,224.42 262.48,224.32 261.64,223.07' fill='#000000' fill-opacity='1' stroke='#000000' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='miter' stroke-linecap='round'/>\\n   <line x1='165.97' y1='177.31' x2='74.46' y2='202.95' stroke='#000000' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='miter' stroke-linecap='round'/>\\n   <polygon points='75.51,201.88 74.46,202.95 75.91,203.33' fill='#000000' fill-opacity='1' stroke='#000000' stroke-opacity='1' stroke-width='1.07' stroke-linejoin='miter' stroke-linecap='round'/>\\n   <polygon points='271.33,231.82 366.48,231.82 366.44,231.82 366.61,231.81 366.77,231.78 366.92,231.72 367.07,231.64 367.19,231.54 367.30,231.41 367.39,231.27 367.46,231.12 367.50,230.96 367.51,230.80 367.51,230.80 367.51,225.28 367.51,225.28 367.50,225.12 367.46,224.96 367.39,224.81 367.30,224.67 367.19,224.54 367.07,224.44 366.92,224.36 366.77,224.30 366.61,224.27 366.48,224.26 271.33,224.26 271.45,224.27 271.29,224.26 271.13,224.28 270.97,224.33 270.82,224.40 270.68,224.49 270.56,224.60 270.47,224.74 270.39,224.88 270.34,225.04 270.31,225.20 270.31,225.28 270.31,230.80 270.31,230.71 270.31,230.88 270.34,231.04 270.39,231.20 270.47,231.34 270.56,231.48 270.68,231.59 270.82,231.68 270.97,231.75 271.13,231.80 271.29,231.82' fill='#FFFFFF' fill-opacity='1' stroke='#000000' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='round'/>\\n   <text x='272.01' y='230.11' font-size='4.27pt' font-family='DejaVu Sans'>Prevotella melaninogenica et rel.<\\/text>\\n   <polygon points='9.69,225.07 89.35,225.07 89.31,225.06 89.47,225.06 89.64,225.03 89.79,224.97 89.93,224.88 90.06,224.78 90.17,224.66 90.26,224.52 90.32,224.37 90.36,224.21 90.38,224.04 90.38,224.04 90.38,218.53 90.38,218.53 90.36,218.36 90.32,218.20 90.26,218.05 90.17,217.91 90.06,217.79 89.93,217.69 89.79,217.60 89.64,217.54 89.47,217.51 89.35,217.50 9.69,217.50 9.82,217.51 9.65,217.50 9.49,217.52 9.33,217.57 9.18,217.64 9.05,217.73 8.93,217.85 8.83,217.98 8.75,218.13 8.70,218.28 8.67,218.45 8.67,218.53 8.67,224.04 8.67,223.96 8.67,224.12 8.70,224.29 8.75,224.44 8.83,224.59 8.93,224.72 9.05,224.83 9.18,224.93 9.33,225.00 9.49,225.04 9.65,225.06' fill='#FFFFFF' fill-opacity='1' stroke='#000000' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='round'/>\\n   <text x='10.38' y='223.36' font-size='4.27pt' font-family='DejaVu Sans'>Bacteroides vulgatus et rel.<\\/text>\\n   <polygon points='4.98,183.68 86.78,183.68 86.74,183.68 86.91,183.67 87.07,183.64 87.22,183.58 87.37,183.50 87.49,183.39 87.60,183.27 87.69,183.13 87.76,182.98 87.80,182.82 87.81,182.66 87.81,182.66 87.81,177.14 87.81,177.14 87.80,176.98 87.76,176.82 87.69,176.67 87.60,176.53 87.49,176.40 87.37,176.30 87.22,176.22 87.07,176.16 86.91,176.13 86.78,176.12 4.98,176.12 5.10,176.13 4.94,176.12 4.78,176.14 4.62,176.18 4.47,176.26 4.33,176.35 4.21,176.46 4.11,176.59 4.04,176.74 3.99,176.90 3.96,177.06 3.96,177.14 3.96,182.66 3.96,182.57 3.96,182.74 3.99,182.90 4.04,183.06 4.11,183.20 4.21,183.33 4.33,183.45 4.47,183.54 4.62,183.61 4.78,183.66 4.94,183.68' fill='#FFFFFF' fill-opacity='1' stroke='#000000' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='round'/>\\n   <text x='5.66' y='181.97' font-size='4.27pt' font-family='DejaVu Sans'>Bacteroides uniformis et rel.<\\/text>\\n   <polygon points='239.48,232.80 304.79,232.80 304.74,232.80 304.91,232.79 305.07,232.76 305.22,232.70 305.37,232.62 305.49,232.51 305.60,232.39 305.69,232.25 305.76,232.10 305.80,231.94 305.81,231.78 305.81,231.78 305.81,226.26 305.81,226.26 305.80,226.10 305.76,225.94 305.69,225.79 305.60,225.65 305.49,225.52 305.37,225.42 305.22,225.34 305.07,225.28 304.91,225.25 304.79,225.24 239.48,225.24 239.61,225.25 239.44,225.24 239.28,225.26 239.12,225.31 238.97,225.38 238.84,225.47 238.72,225.58 238.62,225.72 238.54,225.86 238.49,226.02 238.46,226.18 238.46,226.26 238.46,231.78 238.46,231.69 238.46,231.86 238.49,232.02 238.54,232.18 238.62,232.32 238.72,232.45 238.84,232.57 238.97,232.66 239.12,232.73 239.28,232.78 239.44,232.80' fill='#FFFFFF' fill-opacity='1' stroke='#000000' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='round'/>\\n   <text x='240.17' y='231.09' font-size='4.27pt' font-family='DejaVu Sans'>Prevotella oralis et rel.<\\/text>\\n   <polygon points='22.25,209.30 108.36,209.30 108.32,209.30 108.48,209.29 108.64,209.26 108.80,209.20 108.94,209.12 109.07,209.01 109.18,208.89 109.27,208.75 109.33,208.60 109.37,208.44 109.38,208.27 109.38,208.27 109.38,202.76 109.38,202.76 109.37,202.60 109.33,202.44 109.27,202.29 109.18,202.15 109.07,202.02 108.94,201.92 108.80,201.84 108.64,201.78 108.48,201.74 108.36,201.74 22.25,201.74 22.37,201.74 22.21,201.74 22.04,201.76 21.89,201.80 21.74,201.87 21.60,201.97 21.48,202.08 21.38,202.21 21.31,202.36 21.26,202.52 21.23,202.68 21.23,202.76 21.23,208.27 21.23,208.19 21.23,208.36 21.26,208.52 21.31,208.68 21.38,208.82 21.48,208.95 21.60,209.07 21.74,209.16 21.89,209.23 22.04,209.28 22.21,209.30' fill='#FFFFFF' fill-opacity='1' stroke='#000000' stroke-opacity='1' stroke-width='0.53' stroke-linejoin='round' stroke-linecap='round'/>\\n   <text x='22.93' y='207.59' font-size='4.27pt' font-family='DejaVu Sans'>Bacteroides intestinalis et rel.<\\/text>\\n   <text x='18.53' y='306.16' font-size='6.6pt' font-family='DejaVu Sans' fill='#4D4D4D' fill-opacity='1'>-2<\\/text>\\n   <text x='18.53' y='243.34' font-size='6.6pt' font-family='DejaVu Sans' fill='#4D4D4D' fill-opacity='1'>-1<\\/text>\\n   <text x='21.7' y='180.52' font-size='6.6pt' font-family='DejaVu Sans' fill='#4D4D4D' fill-opacity='1'>0<\\/text>\\n   <text x='21.7' y='117.69' font-size='6.6pt' font-family='DejaVu Sans' fill='#4D4D4D' fill-opacity='1'>1<\\/text>\\n   <text x='21.7' y='54.87' font-size='6.6pt' font-family='DejaVu Sans' fill='#4D4D4D' fill-opacity='1'>2<\\/text>\\n   <text x='28.08' y='326.67' font-size='6.6pt' font-family='DejaVu Sans' fill='#4D4D4D' fill-opacity='1'>-2<\\/text>\\n   <text x='94.83' y='326.67' font-size='6.6pt' font-family='DejaVu Sans' fill='#4D4D4D' fill-opacity='1'>-1<\\/text>\\n   <text x='163.17' y='326.67' font-size='6.6pt' font-family='DejaVu Sans' fill='#4D4D4D' fill-opacity='1'>0<\\/text>\\n   <text x='229.92' y='326.67' font-size='6.6pt' font-family='DejaVu Sans' fill='#4D4D4D' fill-opacity='1'>1<\\/text>\\n   <text x='296.67' y='326.67' font-size='6.6pt' font-family='DejaVu Sans' fill='#4D4D4D' fill-opacity='1'>2<\\/text>\\n   <text x='148.22' y='339.26' font-size='8.25pt' font-family='DejaVu Sans'>PC1 [24.9%]<\\/text>\\n   <text transform='translate(13.50,194.57) rotate(-90.00)' font-size='8.25pt' font-family='DejaVu Sans'>PC2 [10.2%]<\\/text>\\n   <text x='349' y='135.75' font-size='8.25pt' font-family='DejaVu Sans'>bmi_group<\\/text>\\n   <circle cx='357.64' cy='151.01' r='1.47pt' fill='#F8766D' fill-opacity='1' stroke='#F8766D' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round'/>\\n   <circle cx='357.64' cy='168.29' r='1.47pt' fill='#00BA38' fill-opacity='1' stroke='#00BA38' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round'/>\\n   <circle cx='357.64' cy='185.57' r='1.47pt' fill='#619CFF' fill-opacity='1' stroke='#619CFF' stroke-opacity='1' stroke-width='0.71' stroke-linejoin='round' stroke-linecap='round'/>\\n   <text x='371.76' y='154.22' font-size='6.6pt' font-family='DejaVu Sans'>lean<\\/text>\\n   <text x='371.76' y='171.5' font-size='6.6pt' font-family='DejaVu Sans'>overweight<\\/text>\\n   <text x='371.76' y='188.78' font-size='6.6pt' font-family='DejaVu Sans'>obese<\\/text>\\n   <text x='104.36' y='352.86' font-size='6pt' font-family='DejaVu Sans'>222 samples &amp; 130 taxa (Genus). PCA tax_transform=clr<\\/text>\\n  <\\/g>\\n <\\/g>\\n<\\/svg>\",\"js\":null,\"uid\":\"svg_78dc35d2_aacb_4967_8a6a_52392370814c\",\"ratio\":1.2,\"settings\":{\"tooltip\":{\"css\":\".tooltip_SVGID_ { padding:5px;background:black;color:white;border-radius:2px;text-align:left; ; position:absolute;pointer-events:none;z-index:999;}\",\"placement\":\"doc\",\"opacity\":0.9,\"offx\":10,\"offy\":10,\"use_cursor_pos\":true,\"use_fill\":false,\"use_stroke\":false,\"delay_over\":200,\"delay_out\":500},\"hover\":{\"css\":\".hover_data_SVGID_ { fill:orange;stroke:black;cursor:pointer; }\\ntext.hover_data_SVGID_ { stroke:none;fill:orange; }\\ncircle.hover_data_SVGID_ { fill:orange;stroke:black; }\\nline.hover_data_SVGID_, polyline.hover_data_SVGID_ { fill:none;stroke:orange; }\\nrect.hover_data_SVGID_, polygon.hover_data_SVGID_, path.hover_data_SVGID_ { fill:orange;stroke:none; }\\nimage.hover_data_SVGID_ { stroke:orange; }\",\"reactive\":true,\"nearest_distance\":null},\"hover_inv\":{\"css\":\"\"},\"hover_key\":{\"css\":\".hover_key_SVGID_ { fill:orange;stroke:black;cursor:pointer; }\\ntext.hover_key_SVGID_ { stroke:none;fill:orange; }\\ncircle.hover_key_SVGID_ { fill:orange;stroke:black; }\\nline.hover_key_SVGID_, polyline.hover_key_SVGID_ { fill:none;stroke:orange; }\\nrect.hover_key_SVGID_, polygon.hover_key_SVGID_, path.hover_key_SVGID_ { fill:orange;stroke:none; }\\nimage.hover_key_SVGID_ { stroke:orange; }\",\"reactive\":true},\"hover_theme\":{\"css\":\".hover_theme_SVGID_ { fill:orange;stroke:black;cursor:pointer; }\\ntext.hover_theme_SVGID_ { stroke:none;fill:orange; }\\ncircle.hover_theme_SVGID_ { fill:orange;stroke:black; }\\nline.hover_theme_SVGID_, polyline.hover_theme_SVGID_ { fill:none;stroke:orange; }\\nrect.hover_theme_SVGID_, polygon.hover_theme_SVGID_, path.hover_theme_SVGID_ { fill:orange;stroke:none; }\\nimage.hover_theme_SVGID_ { stroke:orange; }\",\"reactive\":true},\"select\":{\"css\":\".select_data_SVGID_ { fill:orange;stroke:black; }\\ncircle.select_data_SVGID_ { stroke-width:1.5px }\",\"type\":\"multiple\",\"only_shiny\":false,\"selected\":[]},\"select_inv\":{\"css\":\"\"},\"select_key\":{\"css\":\".select_key_SVGID_ { fill:red;stroke:black;cursor:pointer; }\\ntext.select_key_SVGID_ { stroke:none;fill:red; }\\ncircle.select_key_SVGID_ { fill:red;stroke:black; }\\nline.select_key_SVGID_, polyline.select_key_SVGID_ { fill:none;stroke:red; }\\nrect.select_key_SVGID_, polygon.select_key_SVGID_, path.select_key_SVGID_ { fill:red;stroke:none; }\\nimage.select_key_SVGID_ { stroke:red; }\",\"type\":\"single\",\"only_shiny\":true,\"selected\":[]},\"select_theme\":{\"css\":\".select_theme_SVGID_ { fill:red;stroke:black;cursor:pointer; }\\ntext.select_theme_SVGID_ { stroke:none;fill:red; }\\ncircle.select_theme_SVGID_ { fill:red;stroke:black; }\\nline.select_theme_SVGID_, polyline.select_theme_SVGID_ { fill:none;stroke:red; }\\nrect.select_theme_SVGID_, polygon.select_theme_SVGID_, path.select_theme_SVGID_ { fill:red;stroke:none; }\\nimage.select_theme_SVGID_ { stroke:red; }\",\"type\":\"single\",\"only_shiny\":true,\"selected\":[]},\"zoom\":{\"min\":1,\"max\":1,\"duration\":300},\"toolbar\":{\"position\":\"topright\",\"pngname\":\"diagram\",\"tooltips\":null,\"fixed\":false,\"hidden\":[],\"delay_over\":200,\"delay_out\":500},\"sizing\":{\"rescale\":true,\"width\":1}}},\"evals\":[],\"jsHooks\":[]}  # remove effect of weight with conditions arg # scaling weight with scale_cc is not necessary as only 1 condition is used dietswap %>%   tax_transform(\"clr\", rank = \"Genus\") %>%   ord_calc(conditions = \"weight\", scale_cc = FALSE) %>%   ord_plot(colour = \"bmi_group\") +   stat_ellipse(aes(linetype = bmi_group, colour = bmi_group))   # alternatively, constrain variation on weight and female constrained_aitchison_rda <- dietswap %>%   tax_transform(\"clr\", rank = \"Genus\") %>%   ord_calc(constraints = c(\"weight\", \"female\")) # constraints --> RDA #>  #> Centering (mean) and scaling (sd) the constraints and/or conditions:  #> \tweight #> \tfemale  constrained_aitchison_rda %>%   ord_plot(colour = \"bmi_group\", constraint_vec_length = 2) +   stat_ellipse(aes(linetype = bmi_group, colour = bmi_group))   # ggplot allows additional customisation of the resulting plot p <- constrained_aitchison_rda %>%   ord_plot(colour = \"bmi_group\", plot_taxa = 1:3) +   lims(x = c(-5, 6), y = c(-5, 5)) +   scale_colour_brewer(palette = \"Set1\")  p + stat_ellipse(aes(linetype = bmi_group, colour = bmi_group))  p + stat_density2d(aes(colour = bmi_group))   # you can rename the taxa on the labels with any function that # takes and modifies a character vector constrained_aitchison_rda %>%   ord_plot(     colour = \"bmi_group\",     plot_taxa = 1:3,     taxon_renamer = function(x) stringr::str_extract(x, \"^.\")   ) +   lims(x = c(-5, 6), y = c(-5, 5)) +   scale_colour_brewer(palette = \"Set1\")   # You can plot PCoA and constrained PCoA plots too. # You don't typically need/want to use transformed taxa variables for PCoA # But it is good practice to call tax_transform(\"identity\") so that # the automatic caption can record that no transformation was applied dietswap %>%   tax_agg(\"Genus\") %>%   tax_transform(\"identity\") %>%   # so caption can record (lack of) transform   dist_calc(\"bray\") %>%   # bray curtis   ord_calc() %>%   # guesses you want an unconstrained PCoA   ord_plot(colour = \"bmi_group\")   # it is possible to facet these plots # (although I'm not sure it makes sense to) # but only unconstrained ordination plots and with plot_taxa = FALSE unconstrained_aitchison_pca %>%   ord_plot(color = \"sex\", auto_caption = NA) +   facet_wrap(\"sex\") +   theme(line = element_blank()) +   stat_density2d(aes(colour = sex)) +   guides(colour = \"none\")   unconstrained_aitchison_pca %>%   ord_plot(color = \"bmi_group\", plot_samples = FALSE, auto_caption = NA) +   facet_wrap(\"sex\") +   theme(line = element_blank(), axis.text = element_blank()) +   stat_density2d_filled(show.legend = FALSE) +   geom_point(size = 1, shape = 21, colour = \"black\", fill = \"white\")"},{"path":"https://david-barnett.github.io/microViz/reference/ord_plot_iris.html","id":null,"dir":"Reference","previous_headings":"","what":"Circular compositional barplot sorted by ordination angle — ord_plot_iris","title":"Circular compositional barplot sorted by ordination angle — ord_plot_iris","text":"Use ord_calc output data argument. Order samples extracted ordination axes data. Best paired ordination plot made ord_calc output.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ord_plot_iris.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Circular compositional barplot sorted by ordination angle — ord_plot_iris","text":"","code":"ord_plot_iris(   data,   tax_level,   axes = 1:2,   n_taxa = 10,   ord_plot = \"none\",   taxon_renamer = function(x) identity(x),   palette = distinct_palette(n_taxa),   anno_colour = NULL,   anno_colour_style = list(),   anno_binary = NULL,   anno_binary_style = list(),   keep_all_vars = FALSE,   scaling = 2,   count_warn = TRUE,   ... )"},{"path":"https://david-barnett.github.io/microViz/reference/ord_plot_iris.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Circular compositional barplot sorted by ordination angle — ord_plot_iris","text":"data psExtra output ord_calc tax_level taxonomic aggregation level (rank_names(ps)) axes 2 axes ordination use ordering bars n_taxa many taxa colour show distinct colours (taxa grouped \"\"). ord_plot add matching ordination plot iris plot ('list' returns separate plots list, ''/'' uses patchwork pair plots together one) taxon_renamer function rename taxa legend palette colour palette anno_colour name sample_data variable use colouring geom_segment annotation ring anno_colour_style list arguments passed geom_segment e.g. size anno_binary name(s) binary sample_data variable(s) (levels T/F 1/0) use filtered geom_point annotation ring(s) (annotates TRUE values) anno_binary_style list arguments passed geom_point e.g. colour, size, y, etc. keep_all_vars slows processing required post-hoc plot customisation options scaling Type 2, type 1 scaling. info, see https://sites.google.com/site/mb3gustame/constrained-analyses/redundancy-analysis. Either \"species\" \"site\" scores scaled (proportional) eigenvalues, set scores left unscaled (?vegan::scores.cca) count_warn warn count data available? .e. phyloseq otu_table positive integers psExtra counts slot NULL ... Arguments passed comp_barplot merge_other FALSE, taxa coloured/filled \"\" remain distinct, can bar outlines drawn around bar_width default 1 avoids random gapping otherwise seen many samples (set less 1 introduce gaps samples) bar_outline_colour line colour separating taxa samples (use NA outlines) bar_outline_width width line separating taxa samples (outlines set bar_outline_colour = NA) tax_transform_for_plot default \"compositional\" draws proportions total counts per sample, reasonably use another transformation, e.g. \"identity\", truly quantitative microbiome profiling data interactive creates plot suitable use ggiraph max_taxa maximum distinct taxa groups show (really useful limiting complexity interactive plots e.g. within ord_explore) other_name name taxa N","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ord_plot_iris.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Circular compositional barplot sorted by ordination angle — ord_plot_iris","text":"ggplot","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ord_plot_iris.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Circular compositional barplot sorted by ordination angle — ord_plot_iris","text":"data must also contain counts table taxa transformed (e.g. clr PCA ordination) (.e. must used tax_transform keep_counts = TRUE, transformation \"identity\") set variable fill aesthetic (fixed) annotation points, fill used taxonomic composition bars","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ord_plot_iris.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Circular compositional barplot sorted by ordination angle — ord_plot_iris","text":"","code":"library(dplyr) library(ggplot2) data(\"dietswap\", package = \"microbiome\")  # although these iris plots are great for 100s of samples # we'll take a subset of the data (for speed in this example) ps <- dietswap %>%   ps_filter(timepoint %in% c(1, 2)) %>%   # copy an otu to the sample data   ps_otu2samdat(\"Prevotella melaninogenica et rel.\") %>%   # create a couple of useful variables   ps_mutate(     female = sex == \"female\",     african = nationality == \"AFR\",     log_P.melaninogenica = log10(`Prevotella melaninogenica et rel.` + 1)   )  # define a function for taking the end off the long genus names in this dataset tax_renamer <- function(tax) {   stringr::str_remove(tax, \" [ae]t rel.\") }  ord <- ps %>%   tax_agg(\"Genus\") %>%   dist_calc(\"aitchison\") %>%   ord_calc(method = \"PCoA\")  # ordination plot for comparison ord %>% ord_plot(color = \"log_P.melaninogenica\", size = 3)   ord_plot_iris(   data = ord,   tax_level = \"Genus\",   n_taxa = 10,   anno_colour = \"nationality\",   anno_colour_style = list(size = 3),   anno_binary = \"female\",   anno_binary_style = list(shape = \"F\", size = 2.5),   taxon_renamer = tax_renamer ) +   scale_colour_brewer(palette = \"Dark2\")   # It is also possible to use comp_barplot customisation arguments # like bar_width and bar_outline_colour, and to make interactive iris plots # using ggiraph:  if (interactive()) {   hover_over_me <- ord_plot_iris(     data = ord,     tax_level = \"Genus\",     n_taxa = 10,     anno_colour = \"nationality\",     anno_colour_style = list(size = 3),     anno_binary = \"female\",     anno_binary_style = list(shape = \"F\", size = 2.5),     taxon_renamer = tax_renamer,     interactive = TRUE,     bar_width = 0.8, bar_outline_colour = \"black\"   ) +     scale_colour_brewer(palette = \"Dark2\")    ggiraph::girafe(ggobj = hover_over_me) }  # Using PCA for ordination after transformations (e.g. clr) means the untransformed taxonomic # data are only available for plotting as compositions if you transformed with # tax_transform(keep_counts = TRUE) and your original data were in fact counts. # Compositional data will also work, and you can set count_warn to FALSE to avoid the warning  clr_pca <- ps %>%   tax_agg(\"Genus\") %>%   tax_transform(\"clr\") %>%   ord_calc(method = \"PCA\")  # you can generate a simple paired layout of ord_plot and iris plot # or separately create and pair the plots yourself, for more control  # simple pairing ord_plot_iris(   data = clr_pca, n_taxa = 12,   tax_level = \"Genus\",   taxon_renamer = tax_renamer,   ord_plot = \"below\",   bar_width = 0.8, bar_outline_colour = \"black\",   anno_binary = \"african\",   anno_binary_style = list(     y = 1.08, colour = \"gray50\", shape = \"circle open\", size = 1, stroke = 1.5   ) )   # manual pairing plot1 <- clr_pca %>% ord_plot(   plot_taxa = 6:1, tax_vec_length = 0.6,   colour = \"gray50\", shape = \"nationality\",   taxon_renamer = tax_renamer,   auto_caption = NA, center = TRUE, ) +   scale_shape_manual(values = c(AFR = \"circle\", AAM = \"circle open\"))  iris <- ord_plot_iris(   data = clr_pca, n_taxa = 15,   tax_level = \"Genus\",   taxon_renamer = tax_renamer,   anno_binary = \"african\",   anno_binary_style = list(y = 1.05, colour = \"gray50\", shape = \"circle\", size = 1) ) +   # shrink legend text size   theme(legend.text = element_text(size = 7))  cowplot::plot_grid(plot1, iris, nrow = 1, align = \"h\", axis = \"b\", rel_widths = 3:4)   # you can add multiple rings of binary annotations ord_plot_iris(   data = clr_pca, n_taxa = 15,   tax_level = \"Genus\",   taxon_renamer = tax_renamer,   anno_binary = c(\"african\", \"female\"),   anno_binary_style = list(     colour = c(\"gray50\", \"coral\"),     shape = c(\"circle\", \"F\"), size = c(0.5, 2)   ) ) +   theme(legend.text = element_text(size = 7))"},{"path":"https://david-barnett.github.io/microViz/reference/ordination-sorting-samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort phyloseq samples by ordination axes scores — ps_sort_ord","title":"Sort phyloseq samples by ordination axes scores — ps_sort_ord","text":"ps_sort_ord reorders samples phyloseq object based relative position 1 2 ordination axes. ord_order_samples gets sample_names order ordination contained psExtra. used internally ps_sort_ord 2 axes given, samples sorted anticlockwise rotation around selected ordination axes, starting first axis given, upper right quadrant. (used ord_plot_iris.) 1 axis given, samples sorted increasing value order along axis. used arrange samples rectangular barplot order appearance along parallel axis paired ordination plot.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ordination-sorting-samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort phyloseq samples by ordination axes scores — ps_sort_ord","text":"","code":"ps_sort_ord(ps, ord, axes = 1:2, scaling = 2)  ord_order_samples(ord, axes = 1:2, scaling = 2)"},{"path":"https://david-barnett.github.io/microViz/reference/ordination-sorting-samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort phyloseq samples by ordination axes scores — ps_sort_ord","text":"ps phyloseq object sorted ord psExtra ordination object axes axes use sorting? numerical vector length 1 2 scaling Type 2, type 1 scaling. info, see https://sites.google.com/site/mb3gustame/constrained-analyses/redundancy-analysis. Either \"species\" \"site\" scores scaled (proportional) eigenvalues, set scores left unscaled (?vegan::scores.cca)","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ordination-sorting-samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort phyloseq samples by ordination axes scores — ps_sort_ord","text":"ps_sort_ord returns phyloseq ord_order_samples returns character vector","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/ordination-sorting-samples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sort phyloseq samples by ordination axes scores — ps_sort_ord","text":"","code":"# attach other necessary packages library(ggplot2)  # example data ibd <- microViz::ibd %>%   tax_filter(min_prevalence = 2) %>%   tax_fix() %>%   phyloseq_validate()  # create numeric variables for constrained ordination ibd <- ibd %>%   ps_mutate(     ibd = as.numeric(ibd == \"ibd\"),     steroids = as.numeric(steroids == \"steroids\"),     abx = as.numeric(abx == \"abx\"),     female = as.numeric(gender == \"female\"),     # and make a shorter ID variable     id = stringr::str_remove_all(sample, \"^[0]{1,2}|-[A-Z]+\")   )  # create an ordination ordi <- ibd %>%   tax_transform(\"clr\", rank = \"Genus\") %>%   ord_calc()  ord_order_samples(ordi, axes = 1) %>% head(8) #> [1] \"048A\" \"051A\" \"025A\" \"199A\" \"200A\" \"218A\" \"119A\" \"210A\" ps_sort_ord(ibd, ordi, axes = 1) %>%   phyloseq::sample_names() %>%   head(8) #> [1] \"048A\" \"051A\" \"025A\" \"199A\" \"200A\" \"218A\" \"119A\" \"210A\"  p1 <- ord_plot(ordi, colour = \"grey90\", plot_taxa = 1:8, tax_vec_length = 1) +   geom_text(aes(label = id), size = 2.5, colour = \"red\")  b1 <- ibd %>%   ps_sort_ord(ord = ordi, axes = 1) %>%   comp_barplot(     tax_level = \"Genus\", n_taxa = 12, label = \"id\",     order_taxa = ord_order_taxa(ordi, axes = 1),     sample_order = \"asis\"   ) +   theme(axis.text.x = element_text(angle = 90, hjust = 1))  patchwork::wrap_plots(p1, b1, ncol = 1)   # constrained ordination example (and match vertical axis) # cordi <- ibd %>%   tax_transform(\"clr\", rank = \"Genus\") %>%   ord_calc(     constraints = c(\"steroids\", \"abx\", \"ibd\"), conditions = \"female\",     scale_cc = FALSE   )  cordi %>% ord_plot(plot_taxa = 1:6, axes = 2:1)"},{"path":"https://david-barnett.github.io/microViz/reference/ordination-sorting-taxa.html","id":null,"dir":"Reference","previous_headings":"","what":"Order taxa in phyloseq by their loading vectors — tax_sort_ord","title":"Order taxa in phyloseq by their loading vectors — tax_sort_ord","text":"tax_sort_ord reorders taxa phyloseq object based relative length taxa scores / \"loading\" vector lengths 1 2 ordination axes. ord_order_taxa gets taxa names order ordination contained psExtra object. used internally tax_sort_ord.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ordination-sorting-taxa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Order taxa in phyloseq by their loading vectors — tax_sort_ord","text":"","code":"tax_sort_ord(ps, ord, axes = 1:2, scaling = 2)  ord_order_taxa(ord, axes = 1:2, scaling = 2)"},{"path":"https://david-barnett.github.io/microViz/reference/ordination-sorting-taxa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Order taxa in phyloseq by their loading vectors — tax_sort_ord","text":"ps phyloseq object sorted ord psExtra ordination object axes axes use sorting? numerical vector length 1 2 scaling Type 2, type 1 scaling. info, see https://sites.google.com/site/mb3gustame/constrained-analyses/redundancy-analysis. Either \"species\" \"site\" scores scaled (proportional) eigenvalues, set scores left unscaled (?vegan::scores.cca)","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/phyloseq_validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for (and fix) common problems with phyloseq objects — phyloseq_validate","title":"Check for (and fix) common problems with phyloseq objects — phyloseq_validate","text":"checks , messages , common uninformative entries tax_table, often cause unwanted results sample_data, creates sample_data dataframe sample_names (\"SAMPLE\" variable) tax_table, creates 1-column tax_table matrix taxa_names, calls rank \"unique\" remove_undetected = TRUE, removes taxa phyloseq::taxa_sums() equal zero, warning","code":""},{"path":"https://david-barnett.github.io/microViz/reference/phyloseq_validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for (and fix) common problems with phyloseq objects — phyloseq_validate","text":"","code":"phyloseq_validate(   ps,   remove_undetected = FALSE,   min_tax_length = 4,   verbose = TRUE )"},{"path":"https://david-barnett.github.io/microViz/reference/phyloseq_validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for (and fix) common problems with phyloseq objects — phyloseq_validate","text":"ps phyloseq object remove_undetected TRUE, removes taxa sum zero across samples min_tax_length minimum number characters consider tax_table entry suspiciously short verbose print informative messages true","code":""},{"path":"https://david-barnett.github.io/microViz/reference/phyloseq_validate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for (and fix) common problems with phyloseq objects — phyloseq_validate","text":"possibly modified phyloseq object","code":""},{"path":"https://david-barnett.github.io/microViz/reference/phyloseq_validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for (and fix) common problems with phyloseq objects — phyloseq_validate","text":"","code":"data(dietswap, package = \"microbiome\")  # expect warning about taxa summing to zero phyloseq_validate(dietswap, remove_undetected = TRUE, verbose = TRUE) #> Warning: Some taxa_sums were zero, removing the following taxa: #> \tAerococcus  #> \tAneurinibacillus  #> \tAsteroleplasma et rel.  #> \tClostridium felsineum et rel.  #> \tClostridium thermocellum et rel.  #> \tMethylobacterium  #> \tMicrococcaceae #> This may be caused by using `subset_samples()`. #> Try using `ps_filter()` instead, with .keep_all_taxa = FALSE. #> Otherwise, to avoid this warning, try filtering out taxa summing to zero with `tax_filter()`. #> If you have already transformed and/or scaled your taxa, e.g. with a log transformation or scale, #> seeing this warning is possible, but very unlikely and possibly a bug. Please report this. #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 123 taxa and 222 samples ] #> sample_data() Sample Data:       [ 222 samples by 8 sample variables ] #> tax_table()   Taxonomy Table:    [ 123 taxa by 3 taxonomic ranks ]  # verbose = FALSE will suppress messages and warnings but still: # replace NULL sample_data and remove taxa that sum to 0 across all samples # (if remove_undetected = TRUE) phyloseq_validate(dietswap, verbose = FALSE) #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 130 taxa and 222 samples ] #> sample_data() Sample Data:       [ 222 samples by 8 sample variables ] #> tax_table()   Taxonomy Table:    [ 130 taxa by 3 taxonomic ranks ]  # Sometimes you might have a phyloseq with no sample_data # This isn't compatible with some microViz functions, like comp_barplot # So some functions internally use phyloseq_validate to fix this dietswap@sam_data <- NULL phyloseq_validate(dietswap) #> Note: Replacing missing sample_data with a dataframe of only sample_names. #> Try `ps <- phyloseq_validate(ps, verbose = FALSE)` to avoid this message #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 130 taxa and 222 samples ] #> sample_data() Sample Data:       [ 222 samples by 1 sample variables ] #> tax_table()   Taxonomy Table:    [ 130 taxa by 3 taxonomic ranks ]  # Sometimes you might have a phyloseq with no tax_table # This isn't compatible with some microViz functions, like tax_top, # so this is another reason to start your analyses with phyloseq_validate! data(\"soilrep\", package = \"phyloseq\") soilrep # has NULL tax_table #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 16825 taxa and 56 samples ] #> sample_data() Sample Data:       [ 56 samples by 4 sample variables ] phyloseq_validate(soilrep) #> Note: Replacing missing tax_table with a 1-column table of only taxa_names. #> Try `ps <- phyloseq_validate(ps, verbose = FALSE)` to avoid this message #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 16825 taxa and 56 samples ] #> sample_data() Sample Data:       [ 56 samples by 4 sample variables ] #> tax_table()   Taxonomy Table:    [ 16825 taxa by 1 taxonomic ranks ]  # If no messages or warnings are emitted, # this means no problems were detected, and nothing was changed # (but only if verbose = TRUE)"},{"path":"https://david-barnett.github.io/microViz/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://david-barnett.github.io/microViz/reference/prev.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate prevalence from numeric vector — prev","title":"Calculate prevalence from numeric vector — prev","text":"Useful helper taxon prevalence calculation","code":""},{"path":"https://david-barnett.github.io/microViz/reference/prev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate prevalence from numeric vector — prev","text":"","code":"prev(x, undetected = 0)"},{"path":"https://david-barnett.github.io/microViz/reference/prev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate prevalence from numeric vector — prev","text":"x numeric vector (taxon counts proportions) undetected value taxon considered present detected","code":""},{"path":"https://david-barnett.github.io/microViz/reference/prev.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate prevalence from numeric vector — prev","text":"numeric value","code":""},{"path":"https://david-barnett.github.io/microViz/reference/prev.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate prevalence from numeric vector — prev","text":"","code":"prev(c(0, 0, 1, 2, 4)) #> [1] 0.6 prev(c(0, 0, 1, 2, 4), undetected = 1.5) #> [1] 0.4"},{"path":"https://david-barnett.github.io/microViz/reference/psExtra-accessors.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract elements from psExtra class — psExtra-accessors","title":"Extract elements from psExtra class — psExtra-accessors","text":"ps_get         returns phyloseq info_get       returns psExtraInfo object dist_get       returns distance matrix (NULL) ord_get        returns ordination object (NULL) perm_get       returns adonis2() permanova model (NULL) bdisp_get      returns results betadisper() (NULL) otu_get        returns phyloseq otu_table matrix taxa columns tt_get         returns phyloseq tax_table tax_models_get returns list generated tax_model NULL tax_stats_get  returns dataframe generated tax_models2stats NULL taxatree_models_get returns list generated taxatree_models NULL taxatree_stats_get returns dataframe generated taxatree_models2stats NULL samdat_tbl     returns phyloseq sample_data tibble sample_names new first column called .sample_name","code":""},{"path":"https://david-barnett.github.io/microViz/reference/psExtra-accessors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract elements from psExtra class — psExtra-accessors","text":"","code":"ps_get(psExtra, ps_extra, counts = FALSE, warn = TRUE)  dist_get(psExtra, ps_extra)  ord_get(psExtra, ps_extra)  info_get(psExtra, ps_extra)  perm_get(psExtra, ps_extra)  bdisp_get(psExtra, ps_extra)  tax_models_get(psExtra)  tax_stats_get(psExtra)  taxatree_models_get(psExtra)  taxatree_stats_get(psExtra)  otu_get(data, taxa = NA, samples = NA, counts = FALSE, warn = TRUE)  tt_get(data)  samdat_tbl(data, sample_names_col = \".sample_name\")"},{"path":"https://david-barnett.github.io/microViz/reference/psExtra-accessors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract elements from psExtra class — psExtra-accessors","text":"psExtra psExtra S4 class object ps_extra deprecated! use counts ps_get otu_get attempt return counts? present object warn counts = TRUE, warning emitted counts available? set warn = \"error\" stop counts available data phyloseq psExtra taxa subset taxa return, NA (default) samples subset samples return, NA (default) sample_names_col name column sample_names put. NA, return data.frame rownames (sample_names)","code":""},{"path":"https://david-barnett.github.io/microViz/reference/psExtra-accessors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract elements from psExtra class — psExtra-accessors","text":"element(s) psExtra object (NULL)","code":""},{"path":"https://david-barnett.github.io/microViz/reference/psExtra-accessors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract elements from psExtra class — psExtra-accessors","text":"","code":"data(\"dietswap\", package = \"microbiome\")  psx <- tax_transform(dietswap, \"compositional\", rank = \"Genus\")  psx #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 130 taxa and 222 samples ] #> sample_data() Sample Data:       [ 222 samples by 8 sample variables ] #> tax_table()   Taxonomy Table:    [ 130 taxa by 3 taxonomic ranks ] #>  #> otu_get(counts = TRUE)\t\t [ 130 taxa and 222 samples ] #>  #> psExtra info: #> tax_agg = \"Genus\" tax_trans = \"compositional\"   ps_get(psx) #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 130 taxa and 222 samples ] #> sample_data() Sample Data:       [ 222 samples by 8 sample variables ] #> tax_table()   Taxonomy Table:    [ 130 taxa by 3 taxonomic ranks ]  ps_get(psx, counts = TRUE) #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 130 taxa and 222 samples ] #> sample_data() Sample Data:       [ 222 samples by 8 sample variables ] #> tax_table()   Taxonomy Table:    [ 130 taxa by 3 taxonomic ranks ]  info_get(psx) #> psExtra info: #> tax_agg = \"Genus\" tax_trans = \"compositional\"   dist_get(psx) # this psExtra has no dist_calc result #> NULL  ord_get(psx) # this psExtra has no ord_calc result #> NULL  perm_get(psx) # this psExtra has no dist_permanova result #> NULL  bdisp_get(psx) # this psExtra has no dist_bdisp result #> NULL  # these can be returned from phyloseq objects too otu_get(psx, taxa = 6:9, samples = c(\"Sample-9\", \"Sample-1\", \"Sample-6\")) #> OTU Table:          [4 taxa and 3 samples] #>                      taxa are columns #>          Allistipes et rel. Anaerobiospirillum Anaerofustis #> Sample-9       0.0016615239                  0            0 #> Sample-1       0.0397210072                  0            0 #> Sample-6       0.0008609339                  0            0 #>          Anaerostipes caccae et rel. #> Sample-9                 0.002729646 #> Sample-1                 0.028845017 #> Sample-6                 0.001468652  otu_get(psx, taxa = 6:9, samples = c(9, 1, 6), counts = TRUE) #> OTU Table:          [4 taxa and 3 samples] #>                      taxa are columns #>          Allistipes et rel. Anaerobiospirillum Anaerofustis #> Sample-9                 14                  0            0 #> Sample-1                336                  0            0 #> Sample-6                 17                  0            0 #>          Anaerostipes caccae et rel. #> Sample-9                          23 #> Sample-1                         244 #> Sample-6                          29  tt_get(psx) %>% head() #> Taxonomy Table:     [6 taxa by 3 taxonomic ranks]: #>                              Phylum            Family            #> Actinomycetaceae             \"Actinobacteria\"  \"Actinobacteria\"  #> Aerococcus                   \"Firmicutes\"      \"Bacilli\"         #> Aeromonas                    \"Proteobacteria\"  \"Proteobacteria\"  #> Akkermansia                  \"Verrucomicrobia\" \"Verrucomicrobia\" #> Alcaligenes faecalis et rel. \"Proteobacteria\"  \"Proteobacteria\"  #> Allistipes et rel.           \"Bacteroidetes\"   \"Bacteroidetes\"   #>                              Genus                          #> Actinomycetaceae             \"Actinomycetaceae\"             #> Aerococcus                   \"Aerococcus\"                   #> Aeromonas                    \"Aeromonas\"                    #> Akkermansia                  \"Akkermansia\"                  #> Alcaligenes faecalis et rel. \"Alcaligenes faecalis et rel.\" #> Allistipes et rel.           \"Allistipes et rel.\"            samdat_tbl(psx) #> # A tibble: 222 × 9 #>    .sample_name subject sex    nationality group sample    timepoint #>    <chr>        <fct>   <fct>  <fct>       <fct> <chr>         <int> #>  1 Sample-1     byn     male   AAM         DI    Sample-1          4 #>  2 Sample-2     nms     male   AFR         HE    Sample-2          2 #>  3 Sample-3     olt     male   AFR         HE    Sample-3          2 #>  4 Sample-4     pku     female AFR         HE    Sample-4          2 #>  5 Sample-5     qjy     female AFR         HE    Sample-5          2 #>  6 Sample-6     riv     female AFR         HE    Sample-6          2 #>  7 Sample-7     shj     female AFR         HE    Sample-7          2 #>  8 Sample-8     tgx     male   AFR         HE    Sample-8          2 #>  9 Sample-9     ufm     male   AFR         HE    Sample-9          2 #> 10 Sample-10    nms     male   AFR         HE    Sample-10         3 #> # ℹ 212 more rows #> # ℹ 2 more variables: timepoint.within.group <int>, bmi_group <fct>  samdat_tbl(psx, sample_names_col = \"SAMPLENAME\") #> # A tibble: 222 × 9 #>    SAMPLENAME subject sex    nationality group sample    timepoint #>    <chr>      <fct>   <fct>  <fct>       <fct> <chr>         <int> #>  1 Sample-1   byn     male   AAM         DI    Sample-1          4 #>  2 Sample-2   nms     male   AFR         HE    Sample-2          2 #>  3 Sample-3   olt     male   AFR         HE    Sample-3          2 #>  4 Sample-4   pku     female AFR         HE    Sample-4          2 #>  5 Sample-5   qjy     female AFR         HE    Sample-5          2 #>  6 Sample-6   riv     female AFR         HE    Sample-6          2 #>  7 Sample-7   shj     female AFR         HE    Sample-7          2 #>  8 Sample-8   tgx     male   AFR         HE    Sample-8          2 #>  9 Sample-9   ufm     male   AFR         HE    Sample-9          2 #> 10 Sample-10  nms     male   AFR         HE    Sample-10         3 #> # ℹ 212 more rows #> # ℹ 2 more variables: timepoint.within.group <int>, bmi_group <fct>"},{"path":"https://david-barnett.github.io/microViz/reference/psExtra-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Define psExtra class S4 object — psExtra-class","title":"Define psExtra class S4 object — psExtra-class","text":"Define psExtra class S4 object","code":""},{"path":"https://david-barnett.github.io/microViz/reference/psExtra-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Define psExtra class S4 object — psExtra-class","text":"info list. counts otu_table. dist dist. ord . permanova . bdisp . taxatree_models list. taxatree_stats data.frame. tax_models list. tax_stats data.frame.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/psExtra-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define psExtra class S4 object — psExtra-class","text":"","code":"library(phyloseq) data(\"shao19\")  ps <- shao19 %>% ps_filter(infant_age == 12) ps %>% tax_agg(\"genus\") #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 38 taxa and 8 samples ] #> sample_data() Sample Data:       [ 8 samples by 11 sample variables ] #> tax_table()   Taxonomy Table:    [ 38 taxa by 5 taxonomic ranks ] #>  #> psExtra info: #> tax_agg = \"genus\""},{"path":"https://david-barnett.github.io/microViz/reference/psExtraInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for psExtraInfo object — print.psExtraInfo","title":"Print method for psExtraInfo object — print.psExtraInfo","text":"Print method psExtraInfo object","code":""},{"path":"https://david-barnett.github.io/microViz/reference/psExtraInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for psExtraInfo object — print.psExtraInfo","text":"","code":"# S3 method for class 'psExtraInfo' print(   x,   ...,   which = c(\"tax_agg\", \"tax_trans\", \"tax_scale\", \"dist_method\", \"ord_info\") )"},{"path":"https://david-barnett.github.io/microViz/reference/psExtraInfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for psExtraInfo object — print.psExtraInfo","text":"x psExtraInfo object ... ignored elements psExtraInfo list print","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_arrange.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrange samples in phyloseq by sample_data variables or taxon abundance — ps_arrange","title":"Arrange samples in phyloseq by sample_data variables or taxon abundance — ps_arrange","text":"Uses information sample_data tax_table phyloseq object set order samples (sample_data tax_table specified .target arg) Give function arguments way use dplyr::arrange()","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_arrange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrange samples in phyloseq by sample_data variables or taxon abundance — ps_arrange","text":"","code":"ps_arrange(ps, ..., .target = \"sample_data\")"},{"path":"https://david-barnett.github.io/microViz/reference/ps_arrange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrange samples in phyloseq by sample_data variables or taxon abundance — ps_arrange","text":"ps phyloseq object ... dots passed directly dplyr::arrange() .target arrange samples \"sample_data\" variables \"otu_table\" taxa abundances","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_arrange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arrange samples in phyloseq by sample_data variables or taxon abundance — ps_arrange","text":"phyloseq","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/ps_arrange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arrange samples in phyloseq by sample_data variables or taxon abundance — ps_arrange","text":"","code":"data(\"dietswap\", package = \"microbiome\")  dietswap %>%   ps_arrange(subject, timepoint) %>%   phyloseq::sample_data() %>%   head(8) #>            subject    sex nationality group     sample timepoint #> Sample-32      azh female         AAM    ED  Sample-32         1 #> Sample-109     azh female         AAM    HE Sample-109         2 #> Sample-119     azh female         AAM    HE Sample-119         3 #> Sample-130     azh female         AAM    DI Sample-130         4 #> Sample-140     azh female         AAM    DI Sample-140         5 #> Sample-41      azh female         AAM    ED  Sample-41         6 #> Sample-61      azl female         AFR    ED  Sample-61         1 #> Sample-93      azl female         AFR    HE  Sample-93         2 #>            timepoint.within.group  bmi_group #> Sample-32                       1 overweight #> Sample-109                      1 overweight #> Sample-119                      2 overweight #> Sample-130                      1 overweight #> Sample-140                      2 overweight #> Sample-41                       2 overweight #> Sample-61                       1      obese #> Sample-93                       1      obese  ps <- dietswap %>% ps_arrange(subject, desc(timepoint)) phyloseq::sample_data(ps) %>% head(8) #>            subject    sex nationality group     sample timepoint #> Sample-41      azh female         AAM    ED  Sample-41         6 #> Sample-140     azh female         AAM    DI Sample-140         5 #> Sample-130     azh female         AAM    DI Sample-130         4 #> Sample-119     azh female         AAM    HE Sample-119         3 #> Sample-109     azh female         AAM    HE Sample-109         2 #> Sample-32      azh female         AAM    ED  Sample-32         1 #> Sample-67      azl female         AFR    ED  Sample-67         6 #> Sample-86      azl female         AFR    DI  Sample-86         5 #>            timepoint.within.group  bmi_group #> Sample-41                       2 overweight #> Sample-140                      2 overweight #> Sample-130                      1 overweight #> Sample-119                      2 overweight #> Sample-109                      1 overweight #> Sample-32                       1 overweight #> Sample-67                       2      obese #> Sample-86                       2      obese phyloseq::otu_table(ps)[1:8, 1:8] #> OTU Table:          [8 taxa and 8 samples] #>                      taxa are rows #>                              Sample-41 Sample-140 Sample-130 Sample-119 #> Actinomycetaceae                     0          0          0          0 #> Aerococcus                           0          0          0          0 #> Aeromonas                            0          0          0          0 #> Akkermansia                        787       2627       2506       1068 #> Alcaligenes faecalis et rel.         2          2          2          2 #> Allistipes et rel.                 564        224        919        209 #> Anaerobiospirillum                   0          0          0          0 #> Anaerofustis                         0          0          0          0 #>                              Sample-109 Sample-32 Sample-67 Sample-86 #> Actinomycetaceae                      0         0         0         0 #> Aerococcus                            0         0         0         0 #> Aeromonas                             0         0         0         0 #> Akkermansia                          52       200        35        93 #> Alcaligenes faecalis et rel.          2         2         2         2 #> Allistipes et rel.                  756       737        39        29 #> Anaerobiospirillum                    0         0         0         0 #> Anaerofustis                          1         0         0         0  # you can also arrange samples by the abundances of taxa in the otu tables pst <- dietswap %>% ps_arrange(desc(Akkermansia), .target = \"otu_table\") phyloseq::otu_table(pst)[1:8, 1:8] #> OTU Table:          [8 taxa and 8 samples] #>                      taxa are rows #>                              Sample-140 Sample-130 Sample-167 Sample-119 #> Actinomycetaceae                      0          0          0          0 #> Aerococcus                            0          0          0          0 #> Aeromonas                             0          0          0          0 #> Akkermansia                        2627       2506       1214       1068 #> Alcaligenes faecalis et rel.          2          2          4          2 #> Allistipes et rel.                  224        919        923        209 #> Anaerobiospirillum                    0          0          0          0 #> Anaerofustis                          0          0          0          0 #>                              Sample-100 Sample-121 Sample-41 Sample-35 #> Actinomycetaceae                      0          0         0         0 #> Aerococcus                            0          0         0         0 #> Aeromonas                             0          0         0         0 #> Akkermansia                         974        909       787       774 #> Alcaligenes faecalis et rel.          3          2         2         2 #> Allistipes et rel.                   64         50       564       112 #> Anaerobiospirillum                    0          0         0         0 #> Anaerofustis                          0          0         0         0 phyloseq::sample_data(pst) %>% head(8) #>            subject    sex nationality group     sample timepoint #> Sample-140     azh female         AAM    DI Sample-140         5 #> Sample-130     azh female         AAM    DI Sample-130         4 #> Sample-167     kpb   male         AAM    HE Sample-167         3 #> Sample-119     azh female         AAM    HE Sample-119         3 #> Sample-100     wdf   male         AFR    DI Sample-100         4 #> Sample-121     gty   male         AAM    HE Sample-121         3 #> Sample-41      azh female         AAM    ED  Sample-41         6 #> Sample-35      kpp   male         AAM    ED  Sample-35         1 #>            timepoint.within.group  bmi_group #> Sample-140                      2 overweight #> Sample-130                      1 overweight #> Sample-167                      2      obese #> Sample-119                      2 overweight #> Sample-100                      1       lean #> Sample-121                      2 overweight #> Sample-41                       2 overweight #> Sample-35                       1       lean"},{"path":"https://david-barnett.github.io/microViz/reference/ps_calc_diversity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate diversity index and add to phyloseq sample data — ps_calc_diversity","title":"Calculate diversity index and add to phyloseq sample data — ps_calc_diversity","text":"Wrapper around microbiome::diversity() function. Takes returns phyloseq object. Calculates alpha diversity index given taxonomic rank. Returns phyloseq unaggregated, additional variable. Variable name default created pasting index rank.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_calc_diversity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate diversity index and add to phyloseq sample data — ps_calc_diversity","text":"","code":"ps_calc_diversity(   ps,   rank,   index = \"shannon\",   exp = FALSE,   varname = paste0(ifelse(exp, \"exp_\", \"\"), paste0(index, \"_\", rank)) )"},{"path":"https://david-barnett.github.io/microViz/reference/ps_calc_diversity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate diversity index and add to phyloseq sample data — ps_calc_diversity","text":"ps phyloseq rank taxonomic rank name, \"unique\" index name diversity index microbiome::diversity(). One : \"inverse_simpson\", \"gini_simpson\", \"shannon\", \"fisher\", \"coverage\" exp exponentiate result? (.e. return e^index) - see details varname name variable added phyloseq sample data","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_calc_diversity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate diversity index and add to phyloseq sample data — ps_calc_diversity","text":"phyloseq","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_calc_diversity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate diversity index and add to phyloseq sample data — ps_calc_diversity","text":"filter taxa calculating alpha diversity. See following resources discussion exponentiated diversity indices http://www.loujost.com/Statistics%20and%20Physics/Diversity%20and%20Similarity/Diversity%20of%20a%20single%20community.htm http://www.loujost.com/Statistics%20and%20Physics/Diversity%20and%20Similarity/EffectiveNumberOfSpecies.htm","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_calc_diversity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate diversity index and add to phyloseq sample data — ps_calc_diversity","text":"","code":"data(ibd, package = \"microViz\") ibd %>%   ps_filter(abx == \"abx\") %>%   tax_fix() %>%   ps_calc_diversity(\"Genus\", index = \"shannon\", exp = TRUE) %>%   ps_calc_diversity(\"Family\", index = \"inverse_simpson\") %>%   tax_transform(rank = \"Genus\", transform = \"clr\") %>%   ord_calc(\"PCA\") %>%   ord_plot(     colour = \"exp_shannon_Genus\", size = \"inverse_simpson_Family\"   ) +   ggplot2::scale_colour_viridis_c() #> Warning: `transformation` argument deprecated, use `trans` instead."},{"path":"https://david-barnett.github.io/microViz/reference/ps_calc_dominant.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate dominant taxon in each phyloseq sample — ps_calc_dominant","title":"Calculate dominant taxon in each phyloseq sample — ps_calc_dominant","text":"taxon abundant sample phyloseq object? function adds information new variable phyloseq sample_data. abundant taxon proportional abundance threshold, dominant taxon \"none\" sample n_max dominant taxa across samples (including \"none\") dominant taxon \"\" samples","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_calc_dominant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate dominant taxon in each phyloseq sample — ps_calc_dominant","text":"","code":"ps_calc_dominant(   ps,   rank,   threshold = 0.3,   n_max = 6,   var = paste(\"dominant\", rank, sep = \"_\"),   none = \"none\",   other = \"other\" )"},{"path":"https://david-barnett.github.io/microViz/reference/ps_calc_dominant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate dominant taxon in each phyloseq sample — ps_calc_dominant","text":"ps phyloseq object rank taxonomic rank calculate dominance threshold minimum proportion consider sample dominated taxon n_max maximum number taxa can listed dominant taxa var name variable add phyloseq object sample data none character value use taxon reaches threshold character value use another taxon (>n_max) dominates","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_calc_dominant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate dominant taxon in each phyloseq sample — ps_calc_dominant","text":"phyloseq object","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_calc_dominant.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate dominant taxon in each phyloseq sample — ps_calc_dominant","text":"Thanks Vitor Heidrich idea draft implementation","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_calc_dominant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate dominant taxon in each phyloseq sample — ps_calc_dominant","text":"","code":"library(ggplot2) ps <- microViz::ibd %>%   tax_filter(min_prevalence = 3) %>%   tax_fix() %>%   phyloseq_validate()  ps %>%   ps_filter(DiseaseState == \"CD\") %>%   ps_calc_dominant(rank = \"Genus\") %>%   comp_barplot(tax_level = \"Genus\", label = \"dominant_Genus\", n_taxa = 12) +   coord_flip()   ps %>%   ps_calc_dominant(rank = \"Genus\") %>%   tax_transform(rank = \"Genus\", trans = \"clr\") %>%   ord_calc(\"PCA\") %>%   ord_plot(colour = \"dominant_Genus\", size = 3, alpha = 0.6) +   scale_colour_brewer(palette = \"Dark2\")   # customise function options ps %>%   ps_calc_dominant(     rank = \"Family\", other = \"Other\", none = \"Not dominated\",     threshold = 0.4, n_max = 3   ) %>%   tax_transform(rank = \"Genus\", trans = \"clr\") %>%   ord_calc(\"PCA\") %>%   ord_plot(colour = \"dominant_Family\", size = 3, alpha = 0.6) +   scale_colour_manual(values = c(     Bacteroidaceae = \"forestgreen\", Lachnospiraceae = \"darkblue\",     Ruminococcaceae = \"darkorange\", Other = \"red\", \"Not dominated\" = \"grey\"   ))"},{"path":"https://david-barnett.github.io/microViz/reference/ps_calc_richness.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate richness estimate and add to phyloseq sample data — ps_calc_richness","title":"Calculate richness estimate and add to phyloseq sample data — ps_calc_richness","text":"Wrapper around microbiome::richness() function. Takes returns phyloseq object. Calculates richness estimate given taxonomic rank. Returns phyloseq unaggregated, additional variable. Variable name default created pasting index rank.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_calc_richness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate richness estimate and add to phyloseq sample data — ps_calc_richness","text":"","code":"ps_calc_richness(   ps,   rank,   index = \"observed\",   detection = 0,   varname = paste0(index, \"_\", rank) )"},{"path":"https://david-barnett.github.io/microViz/reference/ps_calc_richness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate richness estimate and add to phyloseq sample data — ps_calc_richness","text":"ps phyloseq rank taxonomic rank name, \"unique\" index \"observed\" \"chao1\" - name richness estimate microbiome::richness() detection Detection threshold. Used \"observed\" index. varname name variable added phyloseq sample data","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_calc_richness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate richness estimate and add to phyloseq sample data — ps_calc_richness","text":"phyloseq","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_calc_richness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate richness estimate and add to phyloseq sample data — ps_calc_richness","text":"filter taxa calculating richness. richness indices estimates. discussion uncertainty bias estimates see e.g. work Amy Willis https://doi.org/10.3389/fmicb.2019.02407","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/ps_calc_richness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate richness estimate and add to phyloseq sample data — ps_calc_richness","text":"","code":"data(ibd, package = \"microViz\") ibd %>%   ps_filter(abx == \"abx\") %>%   tax_fix() %>%   ps_calc_richness(\"Genus\", index = \"observed\") %>%   ps_calc_richness(\"Family\", index = \"chao1\") %>%   tax_transform(rank = \"Genus\", transform = \"clr\") %>%   ord_calc(\"PCA\") %>%   ord_plot(     colour = \"observed_Genus\", size = \"chao1_Family\"   ) +   ggplot2::scale_colour_viridis_c() #> Warning: `transformation` argument deprecated, use `trans` instead."},{"path":"https://david-barnett.github.io/microViz/reference/ps_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get phyloseq with counts if available — ps_counts","title":"Get phyloseq with counts if available — ps_counts","text":"Get phyloseq counts available","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get phyloseq with counts if available — ps_counts","text":"","code":"ps_counts(data, warn = TRUE)"},{"path":"https://david-barnett.github.io/microViz/reference/ps_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get phyloseq with counts if available — ps_counts","text":"data phyloseq psExtra object. warn boolean \"error\" string control warning error behaviour (default: TRUE).","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get phyloseq with counts if available — ps_counts","text":"phyloseq object counts available.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_dedupe.html","id":null,"dir":"Reference","previous_headings":"","what":"De-duplicate phyloseq samples — ps_dedupe","title":"De-duplicate phyloseq samples — ps_dedupe","text":"Use one variables sample_data identify remove duplicate samples (leaving one sample per group). methods: method = \"readcount\" keeps one sample duplicate group highest total number reads (phyloseq::sample_sums) method = \"first\" keeps first sample duplicate group encountered row order sample_data method = \"last\" keeps last sample duplicate group encountered row order sample_data method = \"random\" keeps random sample duplicate group (set.seed reproducibility) one \"duplicate\" sample can kept per group setting n samples > 1.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_dedupe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"De-duplicate phyloseq samples — ps_dedupe","text":"","code":"ps_dedupe(   ps,   vars,   method = \"readcount\",   verbose = TRUE,   n = 1,   .keep_group_var = FALSE,   .keep_readcount = FALSE,   .message_IDs = FALSE,   .label_only = FALSE,   .keep_all_taxa = FALSE )"},{"path":"https://david-barnett.github.io/microViz/reference/ps_dedupe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"De-duplicate phyloseq samples — ps_dedupe","text":"ps phyloseq object vars names variables, whose (combined) levels identify groups 1 sample desired method keep sample max \"readcount\" \"first\" \"last\" \"random\" samples encountered given sample_data order duplicate group verbose message number groups, number samples dropped? n number 'duplicates' keep per group, defaults 1 .keep_group_var keep grouping variable .GROUP. phyloseq object? .keep_readcount keep readcount variable .READCOUNT. phyloseq object? .message_IDs message sample names dropped variables? .label_only TRUE, samples filtered, just labelled new logical variable .KEEP_SAMPLE. .keep_all_taxa keep taxa removing duplicates? FALSE, default, taxa removed never occur retained samples","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_dedupe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"De-duplicate phyloseq samples — ps_dedupe","text":"phyloseq object","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_dedupe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"De-duplicate phyloseq samples — ps_dedupe","text":"happens duplicated samples exactly equal readcounts method = \"readcount\"? first encountered maximum kept (sample_data row order, like method = \"first\")","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/ps_dedupe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"De-duplicate phyloseq samples — ps_dedupe","text":"","code":"data(\"dietswap\", package = \"microbiome\")  dietswap #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 130 taxa and 222 samples ] #> sample_data() Sample Data:       [ 222 samples by 8 sample variables ] #> tax_table()   Taxonomy Table:    [ 130 taxa by 3 taxonomic ranks ] # let's pretend the dietswap data contains technical replicates from each subject # we want to keep only one of them ps_dedupe(dietswap, vars = \"subject\", method = \"readcount\", verbose = TRUE) #> 38 groups: with 4 to 6 samples each #> Dropped 184 samples. #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 120 taxa and 38 samples ] #> sample_data() Sample Data:       [ 38 samples by 8 sample variables ] #> tax_table()   Taxonomy Table:    [ 120 taxa by 3 taxonomic ranks ]  # contrived example to show identifying \"duplicates\" via the interaction of multiple columns ps1 <- ps_dedupe(   ps = dietswap, method = \"readcount\", verbose = TRUE,   vars = c(\"timepoint\", \"group\", \"bmi_group\") ) #> 18 groups: with 8 to 15 samples each #> Dropped 204 samples. phyloseq::sample_data(ps1) #>            subject    sex nationality group     sample timepoint #> Sample-2       nms   male         AFR    HE   Sample-2         2 #> Sample-3       olt   male         AFR    HE   Sample-3         2 #> Sample-11      olt   male         AFR    HE  Sample-11         3 #> Sample-12      pku female         AFR    HE  Sample-12         3 #> Sample-17      ufm   male         AFR    HE  Sample-17         3 #> Sample-20      pku female         AFR    DI  Sample-20         4 #> Sample-25      ufm   male         AFR    DI  Sample-25         4 #> Sample-28      pku female         AFR    DI  Sample-28         5 #> Sample-38      nmz   male         AAM    ED  Sample-38         1 #> Sample-46      mni female         AAM    ED  Sample-46         6 #> Sample-54      dwc   male         AFR    ED  Sample-54         6 #> Sample-77      zaq female         AFR    DI  Sample-77         4 #> Sample-101     zaq female         AFR    DI Sample-101         5 #> Sample-143     kpp   male         AAM    DI Sample-143         5 #> Sample-156     gtd   male         AAM    HE Sample-156         2 #> Sample-208     olt   male         AFR    ED Sample-208         1 #> Sample-214     ufm   male         AFR    ED Sample-214         1 #> Sample-217     pku female         AFR    ED Sample-217         6 #>            timepoint.within.group  bmi_group #> Sample-2                        1       lean #> Sample-3                        1 overweight #> Sample-11                       2 overweight #> Sample-12                       2      obese #> Sample-17                       2       lean #> Sample-20                       1      obese #> Sample-25                       1       lean #> Sample-28                       2      obese #> Sample-38                       1      obese #> Sample-46                       2 overweight #> Sample-54                       2       lean #> Sample-77                       1 overweight #> Sample-101                      2 overweight #> Sample-143                      2       lean #> Sample-156                      1      obese #> Sample-208                      1 overweight #> Sample-214                      1       lean #> Sample-217                      2      obese  ps2 <- ps_dedupe(   ps = dietswap, method = \"first\", verbose = TRUE,   vars = c(\"timepoint\", \"group\", \"bmi_group\") ) #> 18 groups: with 8 to 15 samples each #> Dropped 204 samples. phyloseq::sample_data(ps2) #>           subject    sex nationality group    sample timepoint #> Sample-1      byn   male         AAM    DI  Sample-1         4 #> Sample-2      nms   male         AFR    HE  Sample-2         2 #> Sample-3      olt   male         AFR    HE  Sample-3         2 #> Sample-4      pku female         AFR    HE  Sample-4         2 #> Sample-10     nms   male         AFR    HE Sample-10         3 #> Sample-11     olt   male         AFR    HE Sample-11         3 #> Sample-12     pku female         AFR    HE Sample-12         3 #> Sample-18     nms   male         AFR    DI Sample-18         4 #> Sample-19     olt   male         AFR    DI Sample-19         4 #> Sample-26     nms   male         AFR    DI Sample-26         5 #> Sample-27     olt   male         AFR    DI Sample-27         5 #> Sample-28     pku female         AFR    DI Sample-28         5 #> Sample-32     azh female         AAM    ED Sample-32         1 #> Sample-35     kpp   male         AAM    ED Sample-35         1 #> Sample-36     lot female         AAM    ED Sample-36         1 #> Sample-41     azh female         AAM    ED Sample-41         6 #> Sample-44     kpp   male         AAM    ED Sample-44         6 #> Sample-45     lot female         AAM    ED Sample-45         6 #>           timepoint.within.group  bmi_group #> Sample-1                       1      obese #> Sample-2                       1       lean #> Sample-3                       1 overweight #> Sample-4                       1      obese #> Sample-10                      2       lean #> Sample-11                      2 overweight #> Sample-12                      2      obese #> Sample-18                      1       lean #> Sample-19                      1 overweight #> Sample-26                      2       lean #> Sample-27                      2 overweight #> Sample-28                      2      obese #> Sample-32                      1 overweight #> Sample-35                      1       lean #> Sample-36                      1      obese #> Sample-41                      2 overweight #> Sample-44                      2       lean #> Sample-45                      2      obese"},{"path":"https://david-barnett.github.io/microViz/reference/ps_drop_incomplete.html","id":null,"dir":"Reference","previous_headings":"","what":"Deselect phyloseq samples with sample_data missings — ps_drop_incomplete","title":"Deselect phyloseq samples with sample_data missings — ps_drop_incomplete","text":"Check phyloseq object sample_data missing values (NAs) specify variables check vars argument, check drop samples missings","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_drop_incomplete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deselect phyloseq samples with sample_data missings — ps_drop_incomplete","text":"","code":"ps_drop_incomplete(ps, vars = NA, verbose = FALSE)"},{"path":"https://david-barnett.github.io/microViz/reference/ps_drop_incomplete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deselect phyloseq samples with sample_data missings — ps_drop_incomplete","text":"ps phyloseq sample_data vars vector variable names check missings (NA, uses variables sample data) verbose message number samples dropped verbose FALSE, (> 0 samples dropped) message number missing per variable vars verbose = \"max\" (message even 0 samples dropped)","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_drop_incomplete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deselect phyloseq samples with sample_data missings — ps_drop_incomplete","text":"phyloseq","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_drop_incomplete.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deselect phyloseq samples with sample_data missings — ps_drop_incomplete","text":"wrapper stats::complete.cases function.","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/ps_drop_incomplete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deselect phyloseq samples with sample_data missings — ps_drop_incomplete","text":"","code":"library(phyloseq) data(\"enterotype\", package = \"phyloseq\")  enterotype #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 553 taxa and 280 samples ] #> sample_data() Sample Data:       [ 280 samples by 9 sample variables ] #> tax_table()   Taxonomy Table:    [ 553 taxa by 1 taxonomic ranks ] ps_drop_incomplete(enterotype) #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 553 taxa and 31 samples ] #> sample_data() Sample Data:       [ 31 samples by 9 sample variables ] #> tax_table()   Taxonomy Table:    [ 553 taxa by 1 taxonomic ranks ] ps_drop_incomplete(enterotype, vars = \"Enterotype\", verbose = TRUE) #> Dropping samples with missings: 9 #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 553 taxa and 271 samples ] #> sample_data() Sample Data:       [ 271 samples by 9 sample variables ] #> tax_table()   Taxonomy Table:    [ 553 taxa by 1 taxonomic ranks ] ps_drop_incomplete(enterotype, vars = \"Sample_ID\", verbose = TRUE) #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 553 taxa and 280 samples ] #> sample_data() Sample Data:       [ 280 samples by 9 sample variables ] #> tax_table()   Taxonomy Table:    [ 553 taxa by 1 taxonomic ranks ] ps_drop_incomplete(enterotype, vars = c(\"Enterotype\", \"Sample_ID\")) #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 553 taxa and 271 samples ] #> sample_data() Sample Data:       [ 271 samples by 9 sample variables ] #> tax_table()   Taxonomy Table:    [ 553 taxa by 1 taxonomic ranks ] ps_drop_incomplete(enterotype, verbose = \"max\") #> Dropping samples with missings: 249 #> Enterotype has NAs: 9 #> SampleID has NAs: 241 #> Project has NAs: 241 #> Nationality has NAs: 241 #> Gender has NAs: 241 #> Age has NAs: 243 #> ClinicalStatus has NAs: 241 #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 553 taxa and 31 samples ] #> sample_data() Sample Data:       [ 31 samples by 9 sample variables ] #> tax_table()   Taxonomy Table:    [ 553 taxa by 1 taxonomic ranks ]"},{"path":"https://david-barnett.github.io/microViz/reference/ps_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter phyloseq samples by sample_data variables — ps_filter","title":"Filter phyloseq samples by sample_data variables — ps_filter","text":"Keep samples sample_data matching one conditions. default function also removes taxa never appear remaining samples, running tax_filter(min_prevalence = 1). can prevent taxa filtering .keep_all_taxa = TRUE.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter phyloseq samples by sample_data variables — ps_filter","text":"","code":"ps_filter(ps, ..., .target = \"sample_data\", .keep_all_taxa = FALSE)"},{"path":"https://david-barnett.github.io/microViz/reference/ps_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter phyloseq samples by sample_data variables — ps_filter","text":"ps phyloseq object ... passed directly dplyr::filter (see examples ?dplyr::filter) .target slot phyloseq use filtering , currently \"sample_data\" supported .keep_all_taxa FALSE (default), remove taxa longer present dataset filtering","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter phyloseq samples by sample_data variables — ps_filter","text":"phyloseq object (filtered sample_data)","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter phyloseq samples by sample_data variables — ps_filter","text":"Use ps_filter use use dplyr::filter(), phyloseq object!","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/ps_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter phyloseq samples by sample_data variables — ps_filter","text":"","code":"library(phyloseq) library(dplyr)  data(\"enterotype\", package = \"phyloseq\") enterotype #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 553 taxa and 280 samples ] #> sample_data() Sample Data:       [ 280 samples by 9 sample variables ] #> tax_table()   Taxonomy Table:    [ 553 taxa by 1 taxonomic ranks ] sample_data(enterotype)[1:10, 1:5] #>           Enterotype Sample_ID SeqTech  SampleID     Project #> AM.AD.1         <NA>   AM.AD.1  Sanger   AM.AD.1      gill06 #> AM.AD.2         <NA>   AM.AD.2  Sanger   AM.AD.2      gill06 #> AM.F10.T1       <NA> AM.F10.T1  Sanger AM.F10.T1 turnbaugh09 #> AM.F10.T2          3 AM.F10.T2  Sanger AM.F10.T2 turnbaugh09 #> DA.AD.1            2   DA.AD.1  Sanger   DA.AD.1     MetaHIT #> DA.AD.1T        <NA>  DA.AD.1T  Sanger      <NA>        <NA> #> DA.AD.2            3   DA.AD.2  Sanger   DA.AD.2     MetaHIT #> DA.AD.3            3   DA.AD.3  Sanger   DA.AD.3     MetaHIT #> DA.AD.3T        <NA>  DA.AD.3T  Sanger      <NA>        <NA> #> DA.AD.4            2   DA.AD.4  Sanger   DA.AD.4     MetaHIT  # keep only samples with seqtech not equal to sanger ps1 <- ps_filter(enterotype, SeqTech != \"Sanger\") ps1 #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 552 taxa and 239 samples ] #> sample_data() Sample Data:       [ 239 samples by 9 sample variables ] #> tax_table()   Taxonomy Table:    [ 552 taxa by 1 taxonomic ranks ] sample_data(ps1)[1:10, 1:5] #>        Enterotype Sample_ID  SeqTech SampleID Project #> MH0001          2    MH0001 Illumina     <NA>    <NA> #> MH0002          1    MH0002 Illumina     <NA>    <NA> #> MH0003          1    MH0003 Illumina     <NA>    <NA> #> MH0004          1    MH0004 Illumina     <NA>    <NA> #> MH0005          2    MH0005 Illumina     <NA>    <NA> #> MH0006          2    MH0006 Illumina     <NA>    <NA> #> MH0007          1    MH0007 Illumina     <NA>    <NA> #> MH0008          1    MH0008 Illumina     <NA>    <NA> #> MH0009          3    MH0009 Illumina     <NA>    <NA> #> MH0010          1    MH0010 Illumina     <NA>    <NA>  # keep only samples with no NAs in any variables ps2 <- enterotype %>% ps_filter(!if_any(everything(), is.na)) ps2 #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 221 taxa and 31 samples ] #> sample_data() Sample Data:       [ 31 samples by 9 sample variables ] #> tax_table()   Taxonomy Table:    [ 221 taxa by 1 taxonomic ranks ] sample_data(ps2)[1:8, 1:8] #>         Enterotype Sample_ID SeqTech SampleID Project Nationality Gender Age #> DA.AD.1          2   DA.AD.1  Sanger  DA.AD.1 MetaHIT      danish      F  59 #> DA.AD.2          3   DA.AD.2  Sanger  DA.AD.2 MetaHIT      danish      M  54 #> DA.AD.3          3   DA.AD.3  Sanger  DA.AD.3 MetaHIT      danish      F  49 #> DA.AD.4          2   DA.AD.4  Sanger  DA.AD.4 MetaHIT      danish      M  59 #> ES.AD.1          1   ES.AD.1  Sanger  ES.AD.1 MetaHIT     spanish      F  25 #> ES.AD.2          2   ES.AD.2  Sanger  ES.AD.2 MetaHIT     spanish      M  49 #> ES.AD.3          2   ES.AD.3  Sanger  ES.AD.3 MetaHIT     spanish      F  47 #> ES.AD.4          3   ES.AD.4  Sanger  ES.AD.4 MetaHIT     spanish      F  38  # ps2 is equivalent to dropping samples with incomplete sample_variables and tax_filtering 0s ps3 <- enterotype %>%   ps_drop_incomplete() %>%   tax_filter(undetected = 0, use_counts = FALSE) # we needed to set a low detection threshold because this example data is proportions identical(ps2, ps3) # TRUE #> [1] TRUE  # function will give warning if some of the otu_values are negative # (which may happen when filtering data that has e.g. clr-transformed taxa abundances) # as it attempts to discard any taxa that become always absent/0 after filtering (by default) # set .keep_all_taxa = TRUE to avoid this filtering behaviour, which is unwanted in this case enterotype %>%   tax_transform(\"clr\") %>%   ps_get() %>%   ps_filter(SeqTech == \"Sanger\", .keep_all_taxa = TRUE) #> Warning: otu_table of counts is NOT available! #> Available otu_table contains 50166 values that are not non-negative integers #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 553 taxa and 41 samples ] #> sample_data() Sample Data:       [ 41 samples by 9 sample variables ] #> tax_table()   Taxonomy Table:    [ 553 taxa by 2 taxonomic ranks ]"},{"path":"https://david-barnett.github.io/microViz/reference/ps_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Join a dataframe to phyloseq sample data — ps_join","title":"Join a dataframe to phyloseq sample data — ps_join","text":"can use types join dplyr::*_join function family, including e.g. \"inner\", \"left\", \"semi\", \"anti\" (see details ). Defaults type = \"left\" calls left_join(), supports x phyloseq y dataframe. time want \"left\" (adds variables sample filtering), \"inner\" (adds variables filters samples). function simply: extracts sample_data phyloseq dataframe performs chosen type join (given arguments) filters phyloseq type = inner, semi anti reattaches modified sample_data phyloseq returns phyloseq","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join a dataframe to phyloseq sample data — ps_join","text":"","code":"ps_join(   x,   y,   by = NULL,   match_sample_names = NULL,   keep_sample_name_col = TRUE,   sample_name_natural_join = FALSE,   type = \"left\",   .keep_all_taxa = FALSE )"},{"path":"https://david-barnett.github.io/microViz/reference/ps_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join a dataframe to phyloseq sample data — ps_join","text":"x phyloseq (dataframe) y dataframe (phyloseq e.g. type = \"right\") character vector variables join (col must present x y paired via named vector like c(\"xname\" = \"yname\", etc.)) match_sample_names match phyloseq sample_names naming variable additional dataframe (addition variables named ) keep_sample_name_col column named match_sample_names kept returned phyloseq's sample_data? (relevant match_sample_names NULL) sample_name_natural_join TRUE, use sample_name shared colnames match rows (relevant match_sample_names NULL, arg takes precedence anything also entered arg) type name type join e.g. \"left\", \"right\", \"inner\", \"semi\" (see dplyr help pages) .keep_all_taxa FALSE (default), remove taxa longer present dataset filtering","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join a dataframe to phyloseq sample data — ps_join","text":"phyloseq modified sample_data (possibly filtered)","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_join.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Join a dataframe to phyloseq sample data — ps_join","text":"Mutating joins, add columns dataframe phyloseq sample data, matching rows based key columns named argument: \"inner\": includes rows present x y. \"left\": includes rows x. (x must phyloseq) \"right\": includes rows y. (y must phyloseq) \"full\": includes rows present x y. (likely work, additional rows added sample_data!) row x matches multiple rows y (based variables named argument), rows y added matching row x. cause function fail, additional rows added phyloseq sample_data! Filtering joins filter rows x based presence absence matches y: \"semi\": return rows x match y. \"anti\": return rows x without match y.","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/ps_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Join a dataframe to phyloseq sample data — ps_join","text":"","code":"library(phyloseq) data(\"enterotype\", package = \"phyloseq\")  x <- enterotype y <- data.frame(   ID_var = sample_names(enterotype)[c(1:50, 101:150)],   SeqTech = sample_data(enterotype)[c(1:50, 101:150), \"SeqTech\"],   arbitrary_info = rep(c(\"A\", \"B\"), 50) )  # simply match the new data to samples that exist in x, as default is a left_join # where some sample names of x are expected to match variable ID_var in dataframe y out1A <- ps_join(x = x, y = y, match_sample_names = \"ID_var\") out1A #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 553 taxa and 280 samples ] #> sample_data() Sample Data:       [ 280 samples by 12 sample variables ] #> tax_table()   Taxonomy Table:    [ 553 taxa by 1 taxonomic ranks ] sample_data(out1A)[1:6, ] #>              ID_var Enterotype Sample_ID SeqTech.x  SampleID     Project #> AM.AD.1     AM.AD.1       <NA>   AM.AD.1    Sanger   AM.AD.1      gill06 #> AM.AD.2     AM.AD.2       <NA>   AM.AD.2    Sanger   AM.AD.2      gill06 #> AM.F10.T1 AM.F10.T1       <NA> AM.F10.T1    Sanger AM.F10.T1 turnbaugh09 #> AM.F10.T2 AM.F10.T2          3 AM.F10.T2    Sanger AM.F10.T2 turnbaugh09 #> DA.AD.1     DA.AD.1          2   DA.AD.1    Sanger   DA.AD.1     MetaHIT #> DA.AD.1T   DA.AD.1T       <NA>  DA.AD.1T    Sanger      <NA>        <NA> #>           Nationality Gender Age ClinicalStatus SeqTech.y arbitrary_info #> AM.AD.1      american      F  28        healthy    Sanger              A #> AM.AD.2      american      M  37        healthy    Sanger              B #> AM.F10.T1    american      F  NA          obese    Sanger              A #> AM.F10.T2    american      F  NA          obese    Sanger              B #> DA.AD.1        danish      F  59        healthy    Sanger              A #> DA.AD.1T         <NA>   <NA>  NA           <NA>    Sanger              B   # use sample_name and all shared variables to join # (a natural join is not a type of join per se, # but it indicates that all shared variables should be used for matching) out1B <- ps_join(   x = x, y = y, match_sample_names = \"ID_var\",   sample_name_natural_join = TRUE, keep_sample_name_col = FALSE ) out1B #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 553 taxa and 280 samples ] #> sample_data() Sample Data:       [ 280 samples by 10 sample variables ] #> tax_table()   Taxonomy Table:    [ 553 taxa by 1 taxonomic ranks ] sample_data(out1B)[1:6, ] #>           Enterotype Sample_ID SeqTech  SampleID     Project Nationality Gender #> AM.AD.1         <NA>   AM.AD.1  Sanger   AM.AD.1      gill06    american      F #> AM.AD.2         <NA>   AM.AD.2  Sanger   AM.AD.2      gill06    american      M #> AM.F10.T1       <NA> AM.F10.T1  Sanger AM.F10.T1 turnbaugh09    american      F #> AM.F10.T2          3 AM.F10.T2  Sanger AM.F10.T2 turnbaugh09    american      F #> DA.AD.1            2   DA.AD.1  Sanger   DA.AD.1     MetaHIT      danish      F #> DA.AD.1T        <NA>  DA.AD.1T  Sanger      <NA>        <NA>        <NA>   <NA> #>           Age ClinicalStatus arbitrary_info #> AM.AD.1    28        healthy              A #> AM.AD.2    37        healthy              B #> AM.F10.T1  NA          obese              A #> AM.F10.T2  NA          obese              B #> DA.AD.1    59        healthy              A #> DA.AD.1T   NA           <NA>              B  # if you only want to keep phyloseq samples that exist in the new data, try an inner join # this will add the new variables AND filter the phyloseq # this example matches sample names to ID_var and by matching the shared SeqTech variable out1C <- ps_join(x = x, y = y, type = \"inner\", by = \"SeqTech\", match_sample_names = \"ID_var\") out1C #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 533 taxa and 100 samples ] #> sample_data() Sample Data:       [ 100 samples by 11 sample variables ] #> tax_table()   Taxonomy Table:    [ 533 taxa by 1 taxonomic ranks ] sample_data(out1C)[1:6, ] #>              ID_var Enterotype Sample_ID SeqTech  SampleID     Project #> AM.AD.1     AM.AD.1       <NA>   AM.AD.1  Sanger   AM.AD.1      gill06 #> AM.AD.2     AM.AD.2       <NA>   AM.AD.2  Sanger   AM.AD.2      gill06 #> AM.F10.T1 AM.F10.T1       <NA> AM.F10.T1  Sanger AM.F10.T1 turnbaugh09 #> AM.F10.T2 AM.F10.T2          3 AM.F10.T2  Sanger AM.F10.T2 turnbaugh09 #> DA.AD.1     DA.AD.1          2   DA.AD.1  Sanger   DA.AD.1     MetaHIT #> DA.AD.1T   DA.AD.1T       <NA>  DA.AD.1T  Sanger      <NA>        <NA> #>           Nationality Gender Age ClinicalStatus arbitrary_info #> AM.AD.1      american      F  28        healthy              A #> AM.AD.2      american      M  37        healthy              B #> AM.F10.T1    american      F  NA          obese              A #> AM.F10.T2    american      F  NA          obese              B #> DA.AD.1        danish      F  59        healthy              A #> DA.AD.1T         <NA>   <NA>  NA           <NA>              B  # the id variable is named Sample_ID in x and ID_var in y # semi_join is only a filtering join (doesn't add new variables but just filters samples in x) out2A <- ps_join(x = x, y = y, by = c(\"Sample_ID\" = \"ID_var\"), type = \"semi\") out2A #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 533 taxa and 100 samples ] #> sample_data() Sample Data:       [ 100 samples by 9 sample variables ] #> tax_table()   Taxonomy Table:    [ 533 taxa by 1 taxonomic ranks ] sample_data(out2A)[1:6, ] #>           Enterotype Sample_ID SeqTech  SampleID     Project Nationality Gender #> AM.AD.1         <NA>   AM.AD.1  Sanger   AM.AD.1      gill06    american      F #> AM.AD.2         <NA>   AM.AD.2  Sanger   AM.AD.2      gill06    american      M #> AM.F10.T1       <NA> AM.F10.T1  Sanger AM.F10.T1 turnbaugh09    american      F #> AM.F10.T2          3 AM.F10.T2  Sanger AM.F10.T2 turnbaugh09    american      F #> DA.AD.1            2   DA.AD.1  Sanger   DA.AD.1     MetaHIT      danish      F #> DA.AD.1T        <NA>  DA.AD.1T  Sanger      <NA>        <NA>        <NA>   <NA> #>           Age ClinicalStatus #> AM.AD.1    28        healthy #> AM.AD.2    37        healthy #> AM.F10.T1  NA          obese #> AM.F10.T2  NA          obese #> DA.AD.1    59        healthy #> DA.AD.1T   NA           <NA>  # anti_join is another type of filtering join out2B <- ps_join(x = x, y = y, by = c(\"Sample_ID\" = \"ID_var\"), type = \"anti\") out2B #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 549 taxa and 180 samples ] #> sample_data() Sample Data:       [ 180 samples by 9 sample variables ] #> tax_table()   Taxonomy Table:    [ 549 taxa by 1 taxonomic ranks ] sample_data(out2B)[1:6, ] #>        Enterotype Sample_ID  SeqTech SampleID Project Nationality Gender Age #> MH0010          1    MH0010 Illumina     <NA>    <NA>        <NA>   <NA>  NA #> MH0011          1    MH0011 Illumina     <NA>    <NA>        <NA>   <NA>  NA #> MH0012          1    MH0012 Illumina     <NA>    <NA>        <NA>   <NA>  NA #> MH0013          1    MH0013 Illumina     <NA>    <NA>        <NA>   <NA>  NA #> MH0014          1    MH0014 Illumina     <NA>    <NA>        <NA>   <NA>  NA #> MH0015          1    MH0015 Illumina     <NA>    <NA>        <NA>   <NA>  NA #>        ClinicalStatus #> MH0010           <NA> #> MH0011           <NA> #> MH0012           <NA> #> MH0013           <NA> #> MH0014           <NA> #> MH0015           <NA>  # semi and anti joins keep opposite sets of samples intersect(sample_names(out2A), sample_names(out2B)) #> character(0)  # you can mix and match named and unnamed values in the `by` vector # inner is like a combination of left join and semi join out3 <- ps_join(x = x, y = y, by = c(\"Sample_ID\" = \"ID_var\", \"SeqTech\"), type = \"inner\") out3 #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 533 taxa and 100 samples ] #> sample_data() Sample Data:       [ 100 samples by 10 sample variables ] #> tax_table()   Taxonomy Table:    [ 533 taxa by 1 taxonomic ranks ] sample_data(out3)[1:6, ] #>           Enterotype Sample_ID SeqTech  SampleID     Project Nationality Gender #> AM.AD.1         <NA>   AM.AD.1  Sanger   AM.AD.1      gill06    american      F #> AM.AD.2         <NA>   AM.AD.2  Sanger   AM.AD.2      gill06    american      M #> AM.F10.T1       <NA> AM.F10.T1  Sanger AM.F10.T1 turnbaugh09    american      F #> AM.F10.T2          3 AM.F10.T2  Sanger AM.F10.T2 turnbaugh09    american      F #> DA.AD.1            2   DA.AD.1  Sanger   DA.AD.1     MetaHIT      danish      F #> DA.AD.1T        <NA>  DA.AD.1T  Sanger      <NA>        <NA>        <NA>   <NA> #>           Age ClinicalStatus arbitrary_info #> AM.AD.1    28        healthy              A #> AM.AD.2    37        healthy              B #> AM.F10.T1  NA          obese              A #> AM.F10.T2  NA          obese              B #> DA.AD.1    59        healthy              A #> DA.AD.1T   NA           <NA>              B"},{"path":"https://david-barnett.github.io/microViz/reference/ps_melt.html","id":null,"dir":"Reference","previous_headings":"","what":"Melt phyloseq data object into large data.frame (tibble) — ps_melt","title":"Melt phyloseq data object into large data.frame (tibble) — ps_melt","text":"ps_melt function specialized melt function melting phyloseq objects (instances phyloseq class), usually producing graphics ggplot2. naming conventions used downstream phyloseq graphics functions reserved following variable names used names sample_variables taxonomic rank_names. reserved names c(\"Sample\", \"Abundance\", \"OTU\"). Also, identical names sample variables taxonomic ranks. , intersection output following two functions sample_variables, rank_names empty vector (e.g. intersect(sample_variables(ps), rank_names(ps))). potential name collisions checked-renamed automatically warning. However, (re)name variables accordingly ahead time, reduce confusion eliminate warnings. NOTE: Code documentation copied (slightly modified) old version speedyseq Michael McLaren. speedyseq reimplements psmelt phyloseq use functions tidyr dplyr packages. name microViz changed ps_melt consistency functions.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_melt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Melt phyloseq data object into large data.frame (tibble) — ps_melt","text":"","code":"ps_melt(ps)"},{"path":"https://david-barnett.github.io/microViz/reference/ps_melt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Melt phyloseq data object into large data.frame (tibble) — ps_melt","text":"ps (Required). otu_table-class phyloseq-class. Function useful phyloseq-class.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_melt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Melt phyloseq data object into large data.frame (tibble) — ps_melt","text":"tibble class data frame.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_melt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Melt phyloseq data object into large data.frame (tibble) — ps_melt","text":"Note “melted” phyloseq data stored much less efficiently, RAM storage issues arise smaller dataset (smaller number samples/OTUs/variables) one might otherwise expect.  common sizes graphics-ready datasets, however, problem.  number OTU entries large effect RAM requirement, methods reduce number separate OTU entries – instance agglomerating OTUs based phylogenetic distance using tip_glom – can help alleviate RAM usage problems.  function made user-accessible flexibility, also used extensively plot functions phyloseq.","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/ps_melt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Melt phyloseq data object into large data.frame (tibble) — ps_melt","text":"","code":"library(ggplot2) library(phyloseq) data(\"GlobalPatterns\") gp_ch <- subset_taxa(GlobalPatterns, Phylum == \"Chlamydiae\") mdf <- ps_melt(gp_ch) mdf2 <- psmelt(gp_ch) # slower # same dataframe, except with somewhat different row orders dplyr::all_equal(tibble::as_tibble(mdf), mdf2, convert = TRUE) # TRUE #> Warning: `all_equal()` was deprecated in dplyr 1.1.0. #> ℹ Please use `all.equal()` instead. #> ℹ And manually order the rows/cols as needed #> [1] TRUE nrow(mdf2) #> [1] 546 ncol(mdf) #> [1] 17 colnames(mdf) #>  [1] \"OTU\"                      \"Sample\"                   #>  [3] \"Abundance\"                \"X.SampleID\"               #>  [5] \"Primer\"                   \"Final_Barcode\"            #>  [7] \"Barcode_truncated_plus_T\" \"Barcode_full_length\"      #>  [9] \"SampleType\"               \"Description\"              #> [11] \"Kingdom\"                  \"Phylum\"                   #> [13] \"Class\"                    \"Order\"                    #> [15] \"Family\"                   \"Genus\"                    #> [17] \"Species\"                  head(rownames(mdf)) #> [1] \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" p <- ggplot(mdf, aes(x = SampleType, y = Abundance, fill = Genus)) p <- p + geom_bar(color = \"black\", stat = \"identity\", position = \"stack\") # This example plot doesn't make any sense print(p + coord_flip())  # TODO replace this..."},{"path":"https://david-barnett.github.io/microViz/reference/ps_mutate.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify or compute new sample_data in phyloseq object — ps_mutate","title":"Modify or compute new sample_data in phyloseq object — ps_mutate","text":"Add compute new phyloseq sample_data variables. Uses dplyr::mutate() syntax.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_mutate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify or compute new sample_data in phyloseq object — ps_mutate","text":"","code":"ps_mutate(ps, ...)"},{"path":"https://david-barnett.github.io/microViz/reference/ps_mutate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify or compute new sample_data in phyloseq object — ps_mutate","text":"ps phyloseq object sample data ... passed straight dplyr::mutate (see examples dplyr::mutate help)","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_mutate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify or compute new sample_data in phyloseq object — ps_mutate","text":"phyloseq object modified sample_data","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/ps_mutate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify or compute new sample_data in phyloseq object — ps_mutate","text":"","code":"library(phyloseq) library(dplyr) data(\"enterotype\")  sample_data(enterotype)[1:10, ] #>           Enterotype Sample_ID SeqTech  SampleID     Project Nationality Gender #> AM.AD.1         <NA>   AM.AD.1  Sanger   AM.AD.1      gill06    american      F #> AM.AD.2         <NA>   AM.AD.2  Sanger   AM.AD.2      gill06    american      M #> AM.F10.T1       <NA> AM.F10.T1  Sanger AM.F10.T1 turnbaugh09    american      F #> AM.F10.T2          3 AM.F10.T2  Sanger AM.F10.T2 turnbaugh09    american      F #> DA.AD.1            2   DA.AD.1  Sanger   DA.AD.1     MetaHIT      danish      F #> DA.AD.1T        <NA>  DA.AD.1T  Sanger      <NA>        <NA>        <NA>   <NA> #> DA.AD.2            3   DA.AD.2  Sanger   DA.AD.2     MetaHIT      danish      M #> DA.AD.3            3   DA.AD.3  Sanger   DA.AD.3     MetaHIT      danish      F #> DA.AD.3T        <NA>  DA.AD.3T  Sanger      <NA>        <NA>        <NA>   <NA> #> DA.AD.4            2   DA.AD.4  Sanger   DA.AD.4     MetaHIT      danish      M #>           Age ClinicalStatus #> AM.AD.1    28        healthy #> AM.AD.2    37        healthy #> AM.F10.T1  NA          obese #> AM.F10.T2  NA          obese #> DA.AD.1    59        healthy #> DA.AD.1T   NA           <NA> #> DA.AD.2    54        healthy #> DA.AD.3    49          obese #> DA.AD.3T   NA           <NA> #> DA.AD.4    59          obese  months_in_year <- 12 ps <- enterotype %>%   ps_mutate(     age_months = Age * months_in_year,     IDs_match = as.character(Sample_ID) == as.character(SampleID),     placeholder = \"Word\"   )  sample_data(ps)[1:10, ] #>           Enterotype Sample_ID SeqTech  SampleID     Project Nationality Gender #> AM.AD.1         <NA>   AM.AD.1  Sanger   AM.AD.1      gill06    american      F #> AM.AD.2         <NA>   AM.AD.2  Sanger   AM.AD.2      gill06    american      M #> AM.F10.T1       <NA> AM.F10.T1  Sanger AM.F10.T1 turnbaugh09    american      F #> AM.F10.T2          3 AM.F10.T2  Sanger AM.F10.T2 turnbaugh09    american      F #> DA.AD.1            2   DA.AD.1  Sanger   DA.AD.1     MetaHIT      danish      F #> DA.AD.1T        <NA>  DA.AD.1T  Sanger      <NA>        <NA>        <NA>   <NA> #> DA.AD.2            3   DA.AD.2  Sanger   DA.AD.2     MetaHIT      danish      M #> DA.AD.3            3   DA.AD.3  Sanger   DA.AD.3     MetaHIT      danish      F #> DA.AD.3T        <NA>  DA.AD.3T  Sanger      <NA>        <NA>        <NA>   <NA> #> DA.AD.4            2   DA.AD.4  Sanger   DA.AD.4     MetaHIT      danish      M #>           Age ClinicalStatus age_months IDs_match placeholder #> AM.AD.1    28        healthy        336      TRUE        Word #> AM.AD.2    37        healthy        444      TRUE        Word #> AM.F10.T1  NA          obese         NA      TRUE        Word #> AM.F10.T2  NA          obese         NA      TRUE        Word #> DA.AD.1    59        healthy        708      TRUE        Word #> DA.AD.1T   NA           <NA>         NA        NA        Word #> DA.AD.2    54        healthy        648      TRUE        Word #> DA.AD.3    49          obese        588      TRUE        Word #> DA.AD.3T   NA           <NA>         NA        NA        Word #> DA.AD.4    59          obese        708      TRUE        Word  # Using the dplyr::across functionality is also possible ps <- ps %>%   ps_mutate(     dplyr::across(where(is.factor), toupper),     another_var = TRUE,     SeqTech = NULL # deletes SeqTech variable   )  head(sample_data(ps)) #>           Enterotype Sample_ID  SampleID     Project Nationality Gender Age #> AM.AD.1         <NA>   AM.AD.1   AM.AD.1      GILL06    AMERICAN      F  28 #> AM.AD.2         <NA>   AM.AD.2   AM.AD.2      GILL06    AMERICAN      M  37 #> AM.F10.T1       <NA> AM.F10.T1 AM.F10.T1 TURNBAUGH09    AMERICAN      F  NA #> AM.F10.T2          3 AM.F10.T2 AM.F10.T2 TURNBAUGH09    AMERICAN      F  NA #> DA.AD.1            2   DA.AD.1   DA.AD.1     METAHIT      DANISH      F  59 #> DA.AD.1T        <NA>  DA.AD.1T      <NA>        <NA>        <NA>   <NA>  NA #>           ClinicalStatus age_months IDs_match placeholder another_var #> AM.AD.1          HEALTHY        336      TRUE        Word        TRUE #> AM.AD.2          HEALTHY        444      TRUE        Word        TRUE #> AM.F10.T1          OBESE         NA      TRUE        Word        TRUE #> AM.F10.T2          OBESE         NA      TRUE        Word        TRUE #> DA.AD.1          HEALTHY        708      TRUE        Word        TRUE #> DA.AD.1T            <NA>         NA        NA        Word        TRUE"},{"path":"https://david-barnett.github.io/microViz/reference/ps_otu2samdat.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy phyloseq otu_table data to sample_data — ps_otu2samdat","title":"Copy phyloseq otu_table data to sample_data — ps_otu2samdat","text":"Copy phyloseq otu_table data sample_data","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_otu2samdat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy phyloseq otu_table data to sample_data — ps_otu2samdat","text":"","code":"ps_otu2samdat(ps, taxa = NULL)"},{"path":"https://david-barnett.github.io/microViz/reference/ps_otu2samdat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy phyloseq otu_table data to sample_data — ps_otu2samdat","text":"ps phyloseq sample_data taxa list taxa_names copy sample_data, NULL (selects phyloseq::taxa_names())","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_otu2samdat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy phyloseq otu_table data to sample_data — ps_otu2samdat","text":"phyloseq augmented sample_data","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_otu2samdat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy phyloseq otu_table data to sample_data — ps_otu2samdat","text":"","code":"library(phyloseq) data(\"dietswap\", package = \"microbiome\")  ps <- dietswap %>% ps_otu2samdat(\"Akkermansia\") sample_variables(ps) #> [1] \"subject\"                \"sex\"                    \"nationality\"            #> [4] \"group\"                  \"sample\"                 \"timepoint\"              #> [7] \"timepoint.within.group\" \"bmi_group\"              \"Akkermansia\"             # or if you do not specify any taxa, all are copied ps_all <- dietswap %>% ps_otu2samdat() sample_variables(ps_all)[1:15] #>  [1] \"subject\"                      \"sex\"                          #>  [3] \"nationality\"                  \"group\"                        #>  [5] \"sample\"                       \"timepoint\"                    #>  [7] \"timepoint.within.group\"       \"bmi_group\"                    #>  [9] \"Actinomycetaceae\"             \"Aerococcus\"                   #> [11] \"Aeromonas\"                    \"Akkermansia\"                  #> [13] \"Alcaligenes faecalis et rel.\" \"Allistipes et rel.\"           #> [15] \"Anaerobiospirillum\"            # this could be useful for colouring ordination plots, for example ps %>%   ps_mutate(log_akkermansia = log(Akkermansia)) %>%   dist_calc(\"bray\") %>%   ord_calc(method = \"PCoA\") %>%   ord_plot(     colour = \"log_akkermansia\",     size = 3, shape = \"nationality\"   )"},{"path":"https://david-barnett.github.io/microViz/reference/ps_reorder.html","id":null,"dir":"Reference","previous_headings":"","what":"Set order of samples in phyloseq object — ps_reorder","title":"Set order of samples in phyloseq object — ps_reorder","text":"Manually set order samples specifying samples names desired order.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_reorder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set order of samples in phyloseq object — ps_reorder","text":"","code":"ps_reorder(ps, sample_order)"},{"path":"https://david-barnett.github.io/microViz/reference/ps_reorder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set order of samples in phyloseq object — ps_reorder","text":"ps phyloseq sample_order names current numerical indices samples desired order","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_reorder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set order of samples in phyloseq object — ps_reorder","text":"phyloseq","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_reorder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set order of samples in phyloseq object — ps_reorder","text":"Ordering samples phyloseq controlled otu_table slot!","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/ps_reorder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set order of samples in phyloseq object — ps_reorder","text":"","code":"library(phyloseq) data(\"dietswap\", package = \"microbiome\")  dietswap %>%   sample_data() %>%   head(8) #>          subject    sex nationality group   sample timepoint #> Sample-1     byn   male         AAM    DI Sample-1         4 #> Sample-2     nms   male         AFR    HE Sample-2         2 #> Sample-3     olt   male         AFR    HE Sample-3         2 #> Sample-4     pku female         AFR    HE Sample-4         2 #> Sample-5     qjy female         AFR    HE Sample-5         2 #> Sample-6     riv female         AFR    HE Sample-6         2 #> Sample-7     shj female         AFR    HE Sample-7         2 #> Sample-8     tgx   male         AFR    HE Sample-8         2 #>          timepoint.within.group  bmi_group #> Sample-1                      1      obese #> Sample-2                      1       lean #> Sample-3                      1 overweight #> Sample-4                      1      obese #> Sample-5                      1 overweight #> Sample-6                      1      obese #> Sample-7                      1      obese #> Sample-8                      1 overweight  new_order <- rev(sample_names(dietswap)) dietswap %>%   ps_reorder(new_order) %>%   sample_data() %>%   head(8) #>            subject    sex nationality group     sample timepoint #> Sample-222     ufm   male         AFR    ED Sample-222         6 #> Sample-221     tgx   male         AFR    ED Sample-221         6 #> Sample-220     shj female         AFR    ED Sample-220         6 #> Sample-219     riv female         AFR    ED Sample-219         6 #> Sample-218     qjy female         AFR    ED Sample-218         6 #> Sample-217     pku female         AFR    ED Sample-217         6 #> Sample-216     olt   male         AFR    ED Sample-216         6 #> Sample-215     nms   male         AFR    ED Sample-215         6 #>            timepoint.within.group  bmi_group #> Sample-222                      2       lean #> Sample-221                      2 overweight #> Sample-220                      2      obese #> Sample-219                      2      obese #> Sample-218                      2 overweight #> Sample-217                      2      obese #> Sample-216                      2 overweight #> Sample-215                      2       lean  # random ordering with numbers set.seed(1000) random_order <- sample(1:nsamples(dietswap)) dietswap %>%   ps_reorder(random_order) %>%   sample_data() %>%   head(8) #>            subject    sex nationality group     sample timepoint #> Sample-68      cxj female         AAM    ED  Sample-68         1 #> Sample-43      gty   male         AAM    ED  Sample-43         6 #> Sample-214     ufm   male         AFR    ED Sample-214         1 #> Sample-51      dwc   male         AFR    ED  Sample-51         1 #> Sample-88      fud female         AFR    DI  Sample-88         5 #> Sample-29      qjy female         AFR    DI  Sample-29         5 #> Sample-99      fud female         AFR    HE  Sample-99         3 #> Sample-61      azl female         AFR    ED  Sample-61         1 #>            timepoint.within.group  bmi_group #> Sample-68                       1 overweight #> Sample-43                       2 overweight #> Sample-214                      1       lean #> Sample-51                       1       lean #> Sample-88                       2      obese #> Sample-29                       2 overweight #> Sample-99                       2      obese #> Sample-61                       1      obese"},{"path":"https://david-barnett.github.io/microViz/reference/ps_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Select phyloseq sample_data using dplyr::select syntax — ps_select","title":"Select phyloseq sample_data using dplyr::select syntax — ps_select","text":"Simple selection phyloseq sample_data variables, might useful printing reduced sample_data, inside functions","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select phyloseq sample_data using dplyr::select syntax — ps_select","text":"","code":"ps_select(ps, ...)"},{"path":"https://david-barnett.github.io/microViz/reference/ps_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select phyloseq sample_data using dplyr::select syntax — ps_select","text":"ps phyloseq sample_data ... passed straight dplyr::select","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select phyloseq sample_data using dplyr::select syntax — ps_select","text":"phyloseq object","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select phyloseq sample_data using dplyr::select syntax — ps_select","text":"","code":"library(phyloseq) library(dplyr) data(\"enterotype\", package = \"phyloseq\")  head(sample_data(enterotype)) #>           Enterotype Sample_ID SeqTech  SampleID     Project Nationality Gender #> AM.AD.1         <NA>   AM.AD.1  Sanger   AM.AD.1      gill06    american      F #> AM.AD.2         <NA>   AM.AD.2  Sanger   AM.AD.2      gill06    american      M #> AM.F10.T1       <NA> AM.F10.T1  Sanger AM.F10.T1 turnbaugh09    american      F #> AM.F10.T2          3 AM.F10.T2  Sanger AM.F10.T2 turnbaugh09    american      F #> DA.AD.1            2   DA.AD.1  Sanger   DA.AD.1     MetaHIT      danish      F #> DA.AD.1T        <NA>  DA.AD.1T  Sanger      <NA>        <NA>        <NA>   <NA> #>           Age ClinicalStatus #> AM.AD.1    28        healthy #> AM.AD.2    37        healthy #> AM.F10.T1  NA          obese #> AM.F10.T2  NA          obese #> DA.AD.1    59        healthy #> DA.AD.1T   NA           <NA>  enterotype %>%   ps_select(!contains(\"Sample\")) %>%   sample_data() %>%   head() #>           Enterotype SeqTech     Project Nationality Gender Age ClinicalStatus #> AM.AD.1         <NA>  Sanger      gill06    american      F  28        healthy #> AM.AD.2         <NA>  Sanger      gill06    american      M  37        healthy #> AM.F10.T1       <NA>  Sanger turnbaugh09    american      F  NA          obese #> AM.F10.T2          3  Sanger turnbaugh09    american      F  NA          obese #> DA.AD.1            2  Sanger     MetaHIT      danish      F  59        healthy #> DA.AD.1T        <NA>  Sanger        <NA>        <NA>   <NA>  NA           <NA>"},{"path":"https://david-barnett.github.io/microViz/reference/ps_seriate.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrange samples in a phyloseq by microbiome similarity — ps_seriate","title":"Arrange samples in a phyloseq by microbiome similarity — ps_seriate","text":"Uses seriation methods seriation::seriate often dist_calc (depending seriation method requires distance matrix)","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_seriate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrange samples in a phyloseq by microbiome similarity — ps_seriate","text":"","code":"ps_seriate(   ps,   method = \"OLO_ward\",   dist = \"bray\",   tax_transform = \"identity\",   add_variable = FALSE,   rank = NA )"},{"path":"https://david-barnett.github.io/microViz/reference/ps_seriate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrange samples in a phyloseq by microbiome similarity — ps_seriate","text":"ps phyloseq object method seriation method ordering samples, seriation::seriate dist distance method dist_calc (used required particular seriation method!) tax_transform transformation apply seriation distance calculation add_variable add variable sample data indicating seriation order rank taxonomic rank aggregate , seriation, NA aggregation","code":""},{"path":"https://david-barnett.github.io/microViz/reference/ps_seriate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arrange samples in a phyloseq by microbiome similarity — ps_seriate","text":"phyloseq","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/ps_seriate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arrange samples in a phyloseq by microbiome similarity — ps_seriate","text":"","code":"library(phyloseq) data(\"dietswap\", package = \"microbiome\")  dietswap %>%   sample_data() %>%   head(8) #>          subject    sex nationality group   sample timepoint #> Sample-1     byn   male         AAM    DI Sample-1         4 #> Sample-2     nms   male         AFR    HE Sample-2         2 #> Sample-3     olt   male         AFR    HE Sample-3         2 #> Sample-4     pku female         AFR    HE Sample-4         2 #> Sample-5     qjy female         AFR    HE Sample-5         2 #> Sample-6     riv female         AFR    HE Sample-6         2 #> Sample-7     shj female         AFR    HE Sample-7         2 #> Sample-8     tgx   male         AFR    HE Sample-8         2 #>          timepoint.within.group  bmi_group #> Sample-1                      1      obese #> Sample-2                      1       lean #> Sample-3                      1 overweight #> Sample-4                      1      obese #> Sample-5                      1 overweight #> Sample-6                      1      obese #> Sample-7                      1      obese #> Sample-8                      1 overweight  dietswap %>%   tax_agg(\"Genus\") %>%   ps_get() %>%   ps_seriate(method = \"OLO_ward\", dist = \"bray\") %>%   sample_data() %>%   head(8) #>            subject    sex nationality group     sample timepoint #> Sample-125     nmz   male         AAM    HE Sample-125         3 #> Sample-200     jql female         AAM    DI Sample-200         4 #> Sample-207     nms   male         AFR    ED Sample-207         1 #> Sample-15      shj female         AFR    HE  Sample-15         3 #> Sample-81      fud female         AFR    DI  Sample-81         4 #> Sample-209     pku female         AFR    ED Sample-209         1 #> Sample-107     byu   male         AFR    HE Sample-107         3 #> Sample-210     qjy female         AFR    ED Sample-210         1 #>            timepoint.within.group  bmi_group #> Sample-125                      2      obese #> Sample-200                      1      obese #> Sample-207                      1       lean #> Sample-15                       2      obese #> Sample-81                       1      obese #> Sample-209                      1      obese #> Sample-107                      2       lean #> Sample-210                      1 overweight"},{"path":"https://david-barnett.github.io/microViz/reference/samdatAsDataframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal helper that gets phyloseq sample_data as a plain dataframe — samdatAsDataframe","title":"Internal helper that gets phyloseq sample_data as a plain dataframe — samdatAsDataframe","text":"Internal helper gets phyloseq sample_data plain dataframe","code":""},{"path":"https://david-barnett.github.io/microViz/reference/samdatAsDataframe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal helper that gets phyloseq sample_data as a plain dataframe — samdatAsDataframe","text":"","code":"samdatAsDataframe(ps)"},{"path":"https://david-barnett.github.io/microViz/reference/samdatAsDataframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal helper that gets phyloseq sample_data as a plain dataframe — samdatAsDataframe","text":"ps phyloseq object.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/samdatAsDataframe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal helper that gets phyloseq sample_data as a plain dataframe — samdatAsDataframe","text":"dataframe sample data phyloseq object.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/sampleAnnotation.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to specify a HeatmapAnnotation for samples in comp_heatmap — sampleAnnotation","title":"Helper to specify a HeatmapAnnotation for samples in comp_heatmap — sampleAnnotation","text":"Helper specify HeatmapAnnotation samples comp_heatmap","code":""},{"path":"https://david-barnett.github.io/microViz/reference/sampleAnnotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to specify a HeatmapAnnotation for samples in comp_heatmap — sampleAnnotation","text":"","code":"sampleAnnotation(   ...,   name,   annotation_legend_param = list(),   show_legend = TRUE,   gp = grid::gpar(col = NA),   border = FALSE,   gap = grid::unit(2, \"mm\"),   show_annotation_name = TRUE,   annotation_label = NULL,   annotation_name_gp = grid::gpar(),   annotation_name_offset = NULL,   annotation_name_rot = NULL,   annotation_name_align = FALSE,   annotation_name_side = \"auto\",   .data = NULL,   .samples = NULL,   .side = NULL )"},{"path":"https://david-barnett.github.io/microViz/reference/sampleAnnotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to specify a HeatmapAnnotation for samples in comp_heatmap — sampleAnnotation","text":"... Name-value pairs names correspond annotation names values output sample annotation functions anno_sample(), manually specified AnnotationFunction objects name Name heatmap annotation, optional. annotation_legend_param list contains parameters annotation legends. See color_mapping_legend,ColorMapping-method possible options. show_legend Whether show annotation legends. value can one single value vector. gp Graphic parameters simple annotations (fill parameter ignored). border border single annotations. gap Gap annotations. can single value vector unit objects. show_annotation_name Whether show annotation names? column annotation, annotation names drawn either left right, row annotations, names draw either top bottom. value can vector. annotation_label Labels annotations. default individual annotation names. annotation_name_gp Graphic parameters annotation names. Graphic parameters can vectors. annotation_name_offset Offset annotation names, unit object. value can vector. annotation_name_rot Rotation annotation names. value can vector. annotation_name_align Whether align annotation names. annotation_name_side Side annotation names. .data OPTIONAL phyloseq psExtra, set override use data heatmap .samples OPTIONAL selection vector sample names, set providing .data argument override default .side OPTIONAL string, indicating side variable annotations: set override default","code":""},{"path":"https://david-barnett.github.io/microViz/reference/sampleAnnotation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to specify a HeatmapAnnotation for samples in comp_heatmap — sampleAnnotation","text":"HeatmapAnnotation object","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/sampleAnnotation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper to specify a HeatmapAnnotation for samples in comp_heatmap — sampleAnnotation","text":"","code":"library(\"ComplexHeatmap\") data(\"ibd\", package = \"microViz\") psq <- tax_filter(ibd, min_prevalence = 5) psq <- tax_mutate(psq, Species = NULL) psq <- tax_fix(psq) psq <- tax_agg(psq, rank = \"Family\") taxa <- tax_top(psq, n = 15, rank = \"Family\") samples <- phyloseq::sample_names(psq)  set.seed(42) # random colours used in first example # sampleAnnotation returns a function that takes data, samples, and which fun <- sampleAnnotation(   gap = grid::unit(2.5, \"mm\"),   Dis1 = anno_sample(var = \"DiseaseState\"),   IBD = anno_sample_cat(var = \"ibd\"),   Dis2 = anno_sample_cat(var = \"DiseaseState\", col = 1:4) )  # manually specify the sample annotation function by giving it data etc. heatmapAnnoFunction <- fun(.data = psq, .side = \"top\", .samples = samples)  # draw the annotation without a heatmap, you will never normally do this! grid.newpage() vp <- viewport(width = 0.65, height = 0.75) pushViewport(vp) draw(heatmapAnnoFunction) pushViewport(viewport(x = 0.7, y = 0.6)) draw(attr(heatmapAnnoFunction, \"Legends\"))"},{"path":"https://david-barnett.github.io/microViz/reference/scale_shape_girafe_filled.html","id":null,"dir":"Reference","previous_headings":"","what":"Filled shapes for ggiraph interactive plots — scale_shape_girafe_filled","title":"Filled shapes for ggiraph interactive plots — scale_shape_girafe_filled","text":"Generates custom ggplot2 shape scale, used ord_explore's ordination. Uses filled shapes, therefore fill aesthetic must set, addition colour, filled shapes. Points NA values shape variable shown hollow circles.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/scale_shape_girafe_filled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filled shapes for ggiraph interactive plots — scale_shape_girafe_filled","text":"","code":"scale_shape_girafe_filled()"},{"path":"https://david-barnett.github.io/microViz/reference/scale_shape_girafe_filled.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filled shapes for ggiraph interactive plots — scale_shape_girafe_filled","text":"ggplot2 Scale object","code":""},{"path":"https://david-barnett.github.io/microViz/reference/scale_shape_girafe_filled.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filled shapes for ggiraph interactive plots — scale_shape_girafe_filled","text":"Composite shapes e.g. number 7 \"square cross\" cause ggiraph interactive plots fail variable shape tooltip set. Shapes used , order: \"circle filled\", \"triangle filled\", \"square filled\", \"diamond filled\", \"triangle filled\"","code":""},{"path":"https://david-barnett.github.io/microViz/reference/scale_shape_girafe_filled.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filled shapes for ggiraph interactive plots — scale_shape_girafe_filled","text":"","code":"microViz::ibd %>%   tax_fix() %>%   phyloseq_validate() %>%   tax_transform(rank = \"Genus\", trans = \"clr\") %>%   ord_calc(     method = \"PCA\"   ) %>%   ord_plot(     axes = c(1, 2),     plot_taxa = 1:6,     colour = \"DiseaseState\", fill = \"DiseaseState\",     shape = \"circle\", alpha = 0.5,     size = 3   ) +   scale_shape_girafe_filled()"},{"path":"https://david-barnett.github.io/microViz/reference/shao19.html","id":null,"dir":"Reference","previous_headings":"","what":"Gut microbiota relative abundance data from Shao et al. 2019 — shao19","title":"Gut microbiota relative abundance data from Shao et al. 2019 — shao19","text":"phyloseq dataset containing 1644 gut microbiome samples. Fecal samples collected 596 infants. 175 mothers also provided fecal samples.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/shao19.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gut microbiota relative abundance data from Shao et al. 2019 — shao19","text":"","code":"shao19"},{"path":"https://david-barnett.github.io/microViz/reference/shao19.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Gut microbiota relative abundance data from Shao et al. 2019 — shao19","text":"large phyloseq object","code":""},{"path":"https://david-barnett.github.io/microViz/reference/shao19.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Gut microbiota relative abundance data from Shao et al. 2019 — shao19","text":"Stunted microbiota opportunistic pathogen colonization caesarean-section birth. doi:10.1038/s41586-019-1560-1","code":""},{"path":"https://david-barnett.github.io/microViz/reference/shao19.html","id":"data-acquisition","dir":"Reference","previous_headings":"","what":"Data acquisition","title":"Gut microbiota relative abundance data from Shao et al. 2019 — shao19","text":"processed (metaphlan3) relative abundance data obtained using curatedMetagenomicData package version 3.4.2. https://waldronlab.io/curatedMetagenomicData/articles/available-studies.html small amount data cleaning performed download: make sample metadata user friendly fill gaps taxonomy table.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/stat_chull.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw convex hull for a set of points on a ggplot — stat_chull","title":"Draw convex hull for a set of points on a ggplot — stat_chull","text":"Draws (convex) polygon around outermost points set points. Useful visual aid identifying groups points scatterplot, ordination plot.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/stat_chull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw convex hull for a set of points on a ggplot — stat_chull","text":"","code":"stat_chull(   mapping = NULL,   data = NULL,   geom = \"polygonHollow\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   ... )"},{"path":"https://david-barnett.github.io/microViz/reference/stat_chull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw convex hull for a set of points on a ggplot — stat_chull","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). geom geometric object use display data layer. using stat_*() function construct layer, geom argument can used override default coupling stats geoms. geom argument accepts following: Geom ggproto subclass, example GeomPoint. string naming geom. give geom string, strip function name geom_ prefix. example, use geom_point(), give geom \"point\". information ways specify geom, see layer geom documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/stat_chull.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Draw convex hull for a set of points on a ggplot — stat_chull","text":"ggplot2 extension - slightly modified original code found : https://CRAN.r-project.org/package=ggplot2/vignettes/extending-ggplot2.html","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/stat_chull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw convex hull for a set of points on a ggplot — stat_chull","text":"","code":"library(ggplot2) microViz::ibd %>%   tax_fix() %>%   tax_transform(rank = \"Genus\", trans = \"clr\") %>%   ord_calc(method = \"PCA\") %>%   ord_plot(colour = \"DiseaseState\", shape = \"DiseaseState\", alpha = 0.5) +   stat_chull(aes(colour = DiseaseState))   microViz::ibd %>%   tax_fix() %>%   tax_transform(rank = \"Genus\", trans = \"clr\") %>%   ord_calc(method = \"PCA\") %>%   ord_plot(colour = \"DiseaseState\", shape = \"DiseaseState\", alpha = 0.5) +   stat_chull(aes(colour = DiseaseState, fill = DiseaseState), alpha = 0.1)"},{"path":"https://david-barnett.github.io/microViz/reference/taxAnnotation.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to specify a HeatmapAnnotation for taxa — taxAnnotation","title":"Helper to specify a HeatmapAnnotation for taxa — taxAnnotation","text":"Helper specify HeatmapAnnotation taxa","code":""},{"path":"https://david-barnett.github.io/microViz/reference/taxAnnotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to specify a HeatmapAnnotation for taxa — taxAnnotation","text":"","code":"taxAnnotation(   ...,   name,   annotation_legend_param = list(),   show_legend = TRUE,   gp = grid::gpar(col = NA),   border = FALSE,   gap = grid::unit(2, \"mm\"),   show_annotation_name = TRUE,   annotation_label = NULL,   annotation_name_gp = grid::gpar(),   annotation_name_offset = NULL,   annotation_name_rot = NULL,   annotation_name_align = TRUE,   annotation_name_side = \"auto\",   .data = NULL,   .taxa = NULL,   .side = NULL )"},{"path":"https://david-barnett.github.io/microViz/reference/taxAnnotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to specify a HeatmapAnnotation for taxa — taxAnnotation","text":"... Name-value pairs names correspond annotation names values output taxon annotation functions anno_tax_prev() manually specified AnnotationFunction objects name Name heatmap annotation, optional. annotation_legend_param list contains parameters annotation legends. See color_mapping_legend,ColorMapping-method possible options. show_legend Whether show annotation legends. value can one single value vector. gp Graphic parameters simple annotations (fill parameter ignored). border border single annotations. gap Gap annotations. can single value vector unit objects. show_annotation_name Whether show annotation names? column annotation, annotation names drawn either left right, row annotations, names draw either top bottom. value can vector. annotation_label Labels annotations. default individual annotation names. annotation_name_gp Graphic parameters annotation names. Graphic parameters can vectors. annotation_name_offset Offset annotation names, unit object. value can vector. annotation_name_rot Rotation annotation names. value can vector. annotation_name_align Whether align annotation names. annotation_name_side Side annotation names. .data OPTIONAL phyloseq psExtra, set override use data heatmap .taxa OPTIONAL selection vector taxa (names, numbers logical), set providing .data argument override default .side OPTIONAL string, indicating side taxa annotation placed: set override default","code":""},{"path":"https://david-barnett.github.io/microViz/reference/taxAnnotation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to specify a HeatmapAnnotation for taxa — taxAnnotation","text":"HeatmapAnnotation object","code":""},{"path":"https://david-barnett.github.io/microViz/reference/taxAnnotation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper to specify a HeatmapAnnotation for taxa — taxAnnotation","text":"","code":"library(\"ComplexHeatmap\") data(\"ibd\", package = \"microViz\") psq <- tax_filter(ibd, min_prevalence = 5) psq <- tax_mutate(psq, Species = NULL) psq <- tax_fix(psq) psq <- tax_agg(psq, rank = \"Family\") taxa <- tax_top(psq, n = 15, rank = \"Family\")  customAxis <- list(labels_rot = 0, at = c(0, 0.5, 1))  # makes a function that takes data, taxa and which (at minimum) fun <- taxAnnotation(   gap = grid::unit(2.5, \"mm\"),   Prev. = anno_tax_prev(axis_param = customAxis, ylim = c(0, 1), extend = 0),   `Prop. Abd.` = anno_tax_box(size = unit(40, \"mm\"), axis_param = customAxis),   `Log10p Abd.` = anno_tax_density(type = \"heatmap\") )  # manually specify the prevalence barplot function by giving it data etc. heatmapAnnoFunction <- fun(.data = psq, .side = \"top\", .taxa = taxa)  # draw the annotation without a heatmap, you will never normally do this! grid.newpage() vp <- viewport(width = 0.65, height = 0.75) pushViewport(vp) draw(heatmapAnnoFunction)   # try again as a row annotation grid.newpage() pushViewport(vp) draw(fun(.data = psq, .side = \"right\", .taxa = rev(taxa)))"},{"path":"https://david-barnett.github.io/microViz/reference/tax_agg.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate taxa and track aggregation in psExtra — tax_agg","title":"Aggregate taxa and track aggregation in psExtra — tax_agg","text":"tax_agg sums abundances phyloseq taxa given rank. records tax_agg rank argument info psExtra object output. psExtra object tracks aggregation, transformations scaling, help keep track done phyloseq object automatically caption ordination plots. Instead tax_agg, consider using tax_transform() rank argument instead, aggregate transform taxa. also useful want aggregate transform taxa, yet still log \"identity\" transformation psExtra captioning ordination plots. e.g. tax_transform(rank = \"Genus\", trans = \"identity\") tax_agg allows pass NA \"unique\" rank argument aggregate taxa. use rank = \"unique\" add_unique = TRUE, add new rank called unique, identical taxa_names (aggregation) aware: use top_N argument without good reason. top_N provides feature inspired deprecated microbiome function aggregate_top_taxa primarily useful decluttering compositional barplots. microViz comp_barplot (ord_plot_iris) already run tax_agg top_N argument , . tax_table produced using top_N otherwise INVALID ANALYSES.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_agg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate taxa and track aggregation in psExtra — tax_agg","text":"","code":"tax_agg(   ps,   rank = NA,   sort_by = NA,   top_N = NA,   force = FALSE,   add_unique = FALSE )"},{"path":"https://david-barnett.github.io/microViz/reference/tax_agg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate taxa and track aggregation in psExtra — tax_agg","text":"ps phyloseq object rank NA (tax_names level) name valid taxonomic rank (try phyloseq::rank_names(ps)) \"unique\" sort_by NA, taxa sorted, uses tax_sort(), takes options arg top_N NA nothing, top_N number, creates extra tax_table column called top, unique column first top_N number taxa, \"\" otherwise. force TRUE, forces aggregation chosen rank occur regardless output sensible! avoids \"Taxa unique rank: ...\" error, may allow inappropriate aggregation occur. use force = TRUE unless know , result . getting error force = FALSE, almost certainly better examine tax_table fix problem. force = TRUE similar microbiome::aggregate_taxa, also check taxa uniquely defined aggregation level. add_unique TRUE, adds rank named unique, identical rownames aggregation","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_agg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate taxa and track aggregation in psExtra — tax_agg","text":"psExtra object including phyloseq tax_agg rank info","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_agg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate taxa and track aggregation in psExtra — tax_agg","text":"function inspired microbiome::aggregate_taxa. However microbiome::aggregate_taxa used, microViz track aggregation. Comparing aggregate_taxa tax_agg: Except ordering taxa, addition \"unique\" rank optional (tax_agg), resulting phyloseq objects identical aggregating phyloseq ambiguous taxa. Taxa ambiguous tax_table converges lower rank branching, two different genera share species (e.g. \"s__\"). microbiome::aggregate_taxa handles ambiguous taxa creating \"unique\" rank taxonomic rank info pasted together one, often long, name. tax_agg throws error, directs user tax_fix() fix ambiguous taxa aggregation, result (much) shorter unique names aggregation rank.","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/tax_agg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate taxa and track aggregation in psExtra — tax_agg","text":"","code":"library(phyloseq) library(dplyr) data(\"dietswap\", package = \"microbiome\")  tax_agg(ps = dietswap, \"Phylum\") %>%   ps_get() %>%   tax_table() #> Taxonomy Table:     [8 taxa by 1 taxonomic ranks]: #>                 Phylum            #> Actinobacteria  \"Actinobacteria\"  #> Firmicutes      \"Firmicutes\"      #> Proteobacteria  \"Proteobacteria\"  #> Verrucomicrobia \"Verrucomicrobia\" #> Bacteroidetes   \"Bacteroidetes\"   #> Spirochaetes    \"Spirochaetes\"    #> Fusobacteria    \"Fusobacteria\"    #> Cyanobacteria   \"Cyanobacteria\"   tax_agg(ps = dietswap, \"Family\") %>%   ps_get() %>%   tax_table() #> Taxonomy Table:     [22 taxa by 2 taxonomic ranks]: #>                           Phylum            Family                      #> Actinobacteria            \"Actinobacteria\"  \"Actinobacteria\"            #> Bacilli                   \"Firmicutes\"      \"Bacilli\"                   #> Proteobacteria            \"Proteobacteria\"  \"Proteobacteria\"            #> Verrucomicrobia           \"Verrucomicrobia\" \"Verrucomicrobia\"           #> Bacteroidetes             \"Bacteroidetes\"   \"Bacteroidetes\"             #> Clostridium cluster XV    \"Firmicutes\"      \"Clostridium cluster XV\"    #> Clostridium cluster XIVa  \"Firmicutes\"      \"Clostridium cluster XIVa\"  #> Clostridium cluster IV    \"Firmicutes\"      \"Clostridium cluster IV\"    #> Clostridium cluster XI    \"Firmicutes\"      \"Clostridium cluster XI\"    #> Asteroleplasma            \"Firmicutes\"      \"Asteroleplasma\"            #> Spirochaetes              \"Spirochaetes\"    \"Spirochaetes\"              #> Clostridium cluster XVI   \"Firmicutes\"      \"Clostridium cluster XVI\"   #> Clostridium cluster XVII  \"Firmicutes\"      \"Clostridium cluster XVII\"  #> Clostridium cluster I     \"Firmicutes\"      \"Clostridium cluster I\"     #> Clostridium cluster XVIII \"Firmicutes\"      \"Clostridium cluster XVIII\" #> Clostridium cluster III   \"Firmicutes\"      \"Clostridium cluster III\"   #> Clostridium cluster IX    \"Firmicutes\"      \"Clostridium cluster IX\"    #> Fusobacteria              \"Fusobacteria\"    \"Fusobacteria\"              #> Clostridium cluster XIII  \"Firmicutes\"      \"Clostridium cluster XIII\"  #> Cyanobacteria             \"Cyanobacteria\"   \"Cyanobacteria\"             #> Uncultured Clostridiales  \"Firmicutes\"      \"Uncultured Clostridiales\"  #> Uncultured Mollicutes     \"Firmicutes\"      \"Uncultured Mollicutes\"      # create some missing values tax_table(dietswap)[3:7, \"Genus\"] <- \"g__\"  # this will produce an error, instructing the user to use tax_fix # tax_agg(ps = dietswap, \"Genus\")  # this will then work: dietswap %>%   tax_fix() %>%   tax_agg(\"Genus\") #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 128 taxa and 222 samples ] #> sample_data() Sample Data:       [ 222 samples by 8 sample variables ] #> tax_table()   Taxonomy Table:    [ 128 taxa by 3 taxonomic ranks ] #>  #> psExtra info: #> tax_agg = \"Genus\"   # you can replace unknown values with `tax_fix()` # which will fix most problems, like the common \"g__\" and \"s__\" # but default tax_fix settings won't catch this long unknown tax_table(dietswap)[13:17, \"Family\"] <- \"some_unknown_family\" dietswap %>%   tax_fix(unknowns = \"some_unknown_family\") %>%   tax_agg(\"Family\") #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 25 taxa and 222 samples ] #> sample_data() Sample Data:       [ 222 samples by 8 sample variables ] #> tax_table()   Taxonomy Table:    [ 25 taxa by 2 taxonomic ranks ] #>  #> psExtra info: #> tax_agg = \"Family\"   # try tax_fix_interactive() to help you find and fix all the uninformative # and converging values in your taxonomy table.  # the code below won't aggregate taxa, # but just adds a new rank called unique, equal to taxa_names tax_agg(ps = dietswap, rank = NA, add_unique = TRUE) #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 130 taxa and 222 samples ] #> sample_data() Sample Data:       [ 222 samples by 8 sample variables ] #> tax_table()   Taxonomy Table:    [ 130 taxa by 4 taxonomic ranks ] #>  #> psExtra info: #> tax_agg = \"unique\"  identical(tax_agg(dietswap, NA, add_unique = TRUE), tax_agg(dietswap, \"unique\")) # TRUE #> [1] TRUE"},{"path":"https://david-barnett.github.io/microViz/reference/tax_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter rare and/or low abundance taxa from a phyloseq object — tax_filter","title":"Filter rare and/or low abundance taxa from a phyloseq object — tax_filter","text":"Removes taxa (samples) meet given criterion combination criteria. value min_prevalence, min_total_abundance min_sample_abundance 1 greater, treated absolute minimum number samples/reads. <1, treated proportion samples/reads. function designed work counts. otu_table must contain counts particularly want set non-zero value min_total_abundance.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter rare and/or low abundance taxa from a phyloseq object — tax_filter","text":"","code":"tax_filter(   ps,   min_prevalence = 1,   prev_detection_threshold = 1,   min_total_abundance = 0,   min_sample_abundance = 0,   tax_level = NA,   names_only = FALSE,   use_counts = TRUE,   undetected = NULL,   verbose = TRUE )"},{"path":"https://david-barnett.github.io/microViz/reference/tax_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter rare and/or low abundance taxa from a phyloseq object — tax_filter","text":"ps phyloseq psExtra (ideally count data available) min_prevalence number proportion samples taxon must present prev_detection_threshold min required counts (value) taxon considered present sample (set undetected arg) min_total_abundance minimum total readcount taxon, summed across samples (can proportion counts) min_sample_abundance taxa must least many reads one samples tax_level given, aggregates data named taxonomic rank filtering, returns phyloseq ORIGINAL level aggregation! names_only names_only true return names taxa, phyloseq use_counts expect count data phyloseq otu_table? default TRUE undetected e.g. 0, value () taxon considered present sample. set, overrides prev_detection_threshold. verbose message proportional prevalence calculations?","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter rare and/or low abundance taxa from a phyloseq object — tax_filter","text":"filtered phyloseq object ORIGINAL LEVEL AGGREGATION (level tax_level)","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter rare and/or low abundance taxa from a phyloseq object — tax_filter","text":"","code":"data(\"dietswap\", package = \"microbiome\") # Dropping rare and low abundance taxa # # Filter at unique taxa level, keeping only those with a prevalence of 10% or more # and at least 10 thousand reads when summed across all samples. # Then aggregate to Family level taxonomy. dietswap %>%   tax_filter(min_prevalence = 0.1, min_total_abundance = 10000) %>%   tax_agg(\"Family\") #> Proportional min_prevalence given: 0.1 --> min 23/222 samples. #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 9 taxa and 222 samples ] #> sample_data() Sample Data:       [ 222 samples by 8 sample variables ] #> tax_table()   Taxonomy Table:    [ 9 taxa by 2 taxonomic ranks ] #>  #> psExtra info: #> tax_agg = \"Family\"   # Keeping ubiquitous families # # keep only families that have at least 1000 counts present in 90% of samples # then aggregate the remaining taxa at 'Genus' level dietswap %>%   tax_filter(     tax_level = \"Family\", min_prevalence = 0.90,     prev_detection_threshold = 1000   ) %>%   tax_agg(\"Genus\") #> Proportional min_prevalence given: 0.9 --> min 200/222 samples. #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 28 taxa and 222 samples ] #> sample_data() Sample Data:       [ 222 samples by 8 sample variables ] #> tax_table()   Taxonomy Table:    [ 28 taxa by 3 taxonomic ranks ] #>  #> psExtra info: #> tax_agg = \"Genus\""},{"path":"https://david-barnett.github.io/microViz/reference/tax_fix.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace unknown, NA, or short tax_table values — tax_fix","title":"Replace unknown, NA, or short tax_table values — tax_fix","text":"Identifies phyloseq tax_table values unknown uninformative replaces first informative value higher taxonomic rank. Short values phyloseq tax_table typically empty strings \" \", \"g__\" etc. helpful replace . (unwanted: set min_length = 0 avoid filtering length.) Values unknowns also removed, even longer min_length. user specify sensible values unknowns dataset unwanted values. NA values also replaced. See article extended discussion tax_table fixing. https://david-barnett.github.io/microViz/articles/web-/tax-fixing.html","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_fix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace unknown, NA, or short tax_table values — tax_fix","text":"","code":"tax_fix(   ps,   min_length = 4,   unknowns = NA,   suffix_rank = \"classified\",   sep = \" \",   anon_unique = TRUE,   verbose = TRUE )"},{"path":"https://david-barnett.github.io/microViz/reference/tax_fix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace unknown, NA, or short tax_table values — tax_fix","text":"ps phyloseq tax_table (taxonomyTable) min_length replace strings shorter , must integer > 0 unknowns also replace strings matching vector, NA default vector shown details! suffix_rank \"classified\" (default) \"current\", replacing entry, suffix taken lowest classified rank taxon, \"classified\", \"current\" unclassified rank? sep character(s) separating new name taxonomic rank level suffix (see suffix_rank) anon_unique make anonymous taxa unique replacing unknowns taxa_name? otherwise replaced paste(\"unknown\", first_rank_name), therefore every anonymous taxon, meaning merged tax_agg used. (anonymous taxa taxa unknown values tax_table row, .e. classified even highest rank available) verbose emit warnings replace informative name?","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_fix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace unknown, NA, or short tax_table values — tax_fix","text":"object class ps","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_fix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Replace unknown, NA, or short tax_table values — tax_fix","text":"default (unknowns = NA), unknowns set vector containing: 's__' 'g__' 'f__' 'o__' 'c__' 'p__' 'k__' 'S__' 'G__' 'F__' 'O__' 'C__' 'P__' 'K__' 'NA' 'NaN' ' ' ” 'unknown' 'Unknown' 's__unknown' 's__Unknown' 's__NA' 'g__unknown' 'g__Unknown' 'g__NA' 'f__unknown' 'f__Unknown' 'f__NA' 'o__unknown' 'o__Unknown' 'o__NA' 'c__unknown' 'c__Unknown' 'c__NA' 'p__unknown' 'p__Unknown' 'p__NA' 'k__unknown' 'k__Unknown' 'k__NA' 'S__unknown' 'S__Unknown' 'S__NA' 'G__unknown' 'G__Unknown' 'G__NA' 'F__unknown' 'F__Unknown' 'F__NA' 'O__unknown' 'O__Unknown' 'O__NA' 'C__unknown' 'C__Unknown' 'C__NA' 'P__unknown' 'P__Unknown' 'P__NA' 'K__unknown' 'K__Unknown' 'K__NA'","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/tax_fix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace unknown, NA, or short tax_table values — tax_fix","text":"","code":"library(dplyr) library(phyloseq)  data(dietswap, package = \"microbiome\") ps <- dietswap  # create unknowns to test filling tt <- tax_table(ps) ntax <- ntaxa(ps) set.seed(123) g <- sample(1:ntax, 30) f <- sample(g, 10) p <- sample(f, 3) tt[g, 3] <- \"g__\" tt[f, 2] <- \"f__\" tt[p, 1] <- \"p__\" tt[sample(1:ntax, 10), 3] <- \"unknown\" # create a row with only NAs tt[1, ] <- NA  tax_table(ps) <- tax_table(tt)  ps #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 130 taxa and 222 samples ] #> sample_data() Sample Data:       [ 222 samples by 8 sample variables ] #> tax_table()   Taxonomy Table:    [ 130 taxa by 3 taxonomic ranks ] # tax_fix with defaults should solve most problems tax_table(ps) %>% head(50) #> Taxonomy Table:     [50 taxa by 3 taxonomic ranks]: #>                                    Phylum            #> Actinomycetaceae                   NA                #> Aerococcus                         \"Firmicutes\"      #> Aeromonas                          \"Proteobacteria\"  #> Akkermansia                        \"Verrucomicrobia\" #> Alcaligenes faecalis et rel.       \"Proteobacteria\"  #> Allistipes et rel.                 \"Bacteroidetes\"   #> Anaerobiospirillum                 \"Proteobacteria\"  #> Anaerofustis                       \"Firmicutes\"      #> Anaerostipes caccae et rel.        \"Firmicutes\"      #> Anaerotruncus colihominis et rel.  \"Firmicutes\"      #> Anaerovorax odorimutans et rel.    \"Firmicutes\"      #> Aneurinibacillus                   \"Firmicutes\"      #> Aquabacterium                      \"Proteobacteria\"  #> Asteroleplasma et rel.             \"Firmicutes\"      #> Atopobium                          \"Actinobacteria\"  #> Bacillus                           \"Firmicutes\"      #> Bacteroides fragilis et rel.       \"Bacteroidetes\"   #> Bacteroides intestinalis et rel.   \"Bacteroidetes\"   #> Bacteroides ovatus et rel.         \"Bacteroidetes\"   #> Bacteroides plebeius et rel.       \"Bacteroidetes\"   #> Bacteroides splachnicus et rel.    \"Bacteroidetes\"   #> Bacteroides stercoris et rel.      \"Bacteroidetes\"   #> Bacteroides uniformis et rel.      \"Bacteroidetes\"   #> Bacteroides vulgatus et rel.       \"Bacteroidetes\"   #> Bifidobacterium                    \"p__\"             #> Bilophila et rel.                  \"Proteobacteria\"  #> Brachyspira                        \"Spirochaetes\"    #> Bryantella formatexigens et rel.   \"Firmicutes\"      #> Bulleidia moorei et rel.           \"Firmicutes\"      #> Burkholderia                       \"Proteobacteria\"  #> Butyrivibrio crossotus et rel.     \"Firmicutes\"      #> Campylobacter                      \"Proteobacteria\"  #> Catenibacterium mitsuokai et rel.  \"Firmicutes\"      #> Clostridium (sensu stricto)        \"Firmicutes\"      #> Clostridium cellulosi et rel.      \"Firmicutes\"      #> Clostridium colinum et rel.        \"p__\"             #> Clostridium difficile et rel.      \"Firmicutes\"      #> Clostridium felsineum et rel.      \"Firmicutes\"      #> Clostridium leptum et rel.         \"Firmicutes\"      #> Clostridium nexile et rel.         \"Firmicutes\"      #> Clostridium orbiscindens et rel.   \"Firmicutes\"      #> Clostridium ramosum et rel.        \"Firmicutes\"      #> Clostridium sphenoides et rel.     \"Firmicutes\"      #> Clostridium stercorarium et rel.   \"Firmicutes\"      #> Clostridium symbiosum et rel.      \"Firmicutes\"      #> Clostridium thermocellum et rel.   \"Firmicutes\"      #> Collinsella                        \"Actinobacteria\"  #> Coprobacillus catenaformis et rel. \"Firmicutes\"      #> Coprococcus eutactus et rel.       \"Firmicutes\"      #> Corynebacterium                    \"Actinobacteria\"  #>                                    Family                      #> Actinomycetaceae                   NA                          #> Aerococcus                         \"Bacilli\"                   #> Aeromonas                          \"Proteobacteria\"            #> Akkermansia                        \"Verrucomicrobia\"           #> Alcaligenes faecalis et rel.       \"Proteobacteria\"            #> Allistipes et rel.                 \"Bacteroidetes\"             #> Anaerobiospirillum                 \"Proteobacteria\"            #> Anaerofustis                       \"Clostridium cluster XV\"    #> Anaerostipes caccae et rel.        \"Clostridium cluster XIVa\"  #> Anaerotruncus colihominis et rel.  \"Clostridium cluster IV\"    #> Anaerovorax odorimutans et rel.    \"Clostridium cluster XI\"    #> Aneurinibacillus                   \"Bacilli\"                   #> Aquabacterium                      \"Proteobacteria\"            #> Asteroleplasma et rel.             \"Asteroleplasma\"            #> Atopobium                          \"Actinobacteria\"            #> Bacillus                           \"Bacilli\"                   #> Bacteroides fragilis et rel.       \"Bacteroidetes\"             #> Bacteroides intestinalis et rel.   \"Bacteroidetes\"             #> Bacteroides ovatus et rel.         \"Bacteroidetes\"             #> Bacteroides plebeius et rel.       \"Bacteroidetes\"             #> Bacteroides splachnicus et rel.    \"Bacteroidetes\"             #> Bacteroides stercoris et rel.      \"Bacteroidetes\"             #> Bacteroides uniformis et rel.      \"Bacteroidetes\"             #> Bacteroides vulgatus et rel.       \"Bacteroidetes\"             #> Bifidobacterium                    \"f__\"                       #> Bilophila et rel.                  \"f__\"                       #> Brachyspira                        \"Spirochaetes\"              #> Bryantella formatexigens et rel.   \"Clostridium cluster XIVa\"  #> Bulleidia moorei et rel.           \"Clostridium cluster XVI\"   #> Burkholderia                       \"Proteobacteria\"            #> Butyrivibrio crossotus et rel.     \"Clostridium cluster XIVa\"  #> Campylobacter                      \"Proteobacteria\"            #> Catenibacterium mitsuokai et rel.  \"Clostridium cluster XVII\"  #> Clostridium (sensu stricto)        \"Clostridium cluster I\"     #> Clostridium cellulosi et rel.      \"Clostridium cluster IV\"    #> Clostridium colinum et rel.        \"f__\"                       #> Clostridium difficile et rel.      \"Clostridium cluster XI\"    #> Clostridium felsineum et rel.      \"Clostridium cluster XI\"    #> Clostridium leptum et rel.         \"Clostridium cluster IV\"    #> Clostridium nexile et rel.         \"Clostridium cluster XIVa\"  #> Clostridium orbiscindens et rel.   \"Clostridium cluster IV\"    #> Clostridium ramosum et rel.        \"f__\"                       #> Clostridium sphenoides et rel.     \"Clostridium cluster XIVa\"  #> Clostridium stercorarium et rel.   \"Clostridium cluster III\"   #> Clostridium symbiosum et rel.      \"Clostridium cluster XIVa\"  #> Clostridium thermocellum et rel.   \"Clostridium cluster III\"   #> Collinsella                        \"Actinobacteria\"            #> Coprobacillus catenaformis et rel. \"Clostridium cluster XVIII\" #> Coprococcus eutactus et rel.       \"Clostridium cluster XIVa\"  #> Corynebacterium                    \"Actinobacteria\"            #>                                    Genus                                #> Actinomycetaceae                   NA                                   #> Aerococcus                         \"Aerococcus\"                         #> Aeromonas                          \"Aeromonas\"                          #> Akkermansia                        \"Akkermansia\"                        #> Alcaligenes faecalis et rel.       \"Alcaligenes faecalis et rel.\"       #> Allistipes et rel.                 \"Allistipes et rel.\"                 #> Anaerobiospirillum                 \"g__\"                                #> Anaerofustis                       \"Anaerofustis\"                       #> Anaerostipes caccae et rel.        \"g__\"                                #> Anaerotruncus colihominis et rel.  \"Anaerotruncus colihominis et rel.\"  #> Anaerovorax odorimutans et rel.    \"Anaerovorax odorimutans et rel.\"    #> Aneurinibacillus                   \"Aneurinibacillus\"                   #> Aquabacterium                      \"unknown\"                            #> Asteroleplasma et rel.             \"g__\"                                #> Atopobium                          \"Atopobium\"                          #> Bacillus                           \"Bacillus\"                           #> Bacteroides fragilis et rel.       \"Bacteroides fragilis et rel.\"       #> Bacteroides intestinalis et rel.   \"Bacteroides intestinalis et rel.\"   #> Bacteroides ovatus et rel.         \"Bacteroides ovatus et rel.\"         #> Bacteroides plebeius et rel.       \"Bacteroides plebeius et rel.\"       #> Bacteroides splachnicus et rel.    \"Bacteroides splachnicus et rel.\"    #> Bacteroides stercoris et rel.      \"Bacteroides stercoris et rel.\"      #> Bacteroides uniformis et rel.      \"Bacteroides uniformis et rel.\"      #> Bacteroides vulgatus et rel.       \"Bacteroides vulgatus et rel.\"       #> Bifidobacterium                    \"g__\"                                #> Bilophila et rel.                  \"g__\"                                #> Brachyspira                        \"Brachyspira\"                        #> Bryantella formatexigens et rel.   \"Bryantella formatexigens et rel.\"   #> Bulleidia moorei et rel.           \"Bulleidia moorei et rel.\"           #> Burkholderia                       \"Burkholderia\"                       #> Butyrivibrio crossotus et rel.     \"Butyrivibrio crossotus et rel.\"     #> Campylobacter                      \"Campylobacter\"                      #> Catenibacterium mitsuokai et rel.  \"Catenibacterium mitsuokai et rel.\"  #> Clostridium (sensu stricto)        \"unknown\"                            #> Clostridium cellulosi et rel.      \"Clostridium cellulosi et rel.\"      #> Clostridium colinum et rel.        \"g__\"                                #> Clostridium difficile et rel.      \"Clostridium difficile et rel.\"      #> Clostridium felsineum et rel.      \"Clostridium felsineum et rel.\"      #> Clostridium leptum et rel.         \"Clostridium leptum et rel.\"         #> Clostridium nexile et rel.         \"Clostridium nexile et rel.\"         #> Clostridium orbiscindens et rel.   \"Clostridium orbiscindens et rel.\"   #> Clostridium ramosum et rel.        \"g__\"                                #> Clostridium sphenoides et rel.     \"g__\"                                #> Clostridium stercorarium et rel.   \"Clostridium stercorarium et rel.\"   #> Clostridium symbiosum et rel.      \"Clostridium symbiosum et rel.\"      #> Clostridium thermocellum et rel.   \"Clostridium thermocellum et rel.\"   #> Collinsella                        \"Collinsella\"                        #> Coprobacillus catenaformis et rel. \"Coprobacillus catenaformis et rel.\" #> Coprococcus eutactus et rel.       \"Coprococcus eutactus et rel.\"       #> Corynebacterium                    \"g__\"                                 # this will replace \"unknown\"s as well as short values including \"g__\" and \"f__\" tax_fix(ps) %>%   tax_table() %>%   head(50) #> Row named: Actinomycetaceae #> contains no non-unknown values, returning: #> 'Actinomycetaceae' for all replaced levels. #> Consider editing this tax_table entry manually. #> Row named: Bifidobacterium #> contains no non-unknown values, returning: #> 'Bifidobacterium' for all replaced levels. #> Consider editing this tax_table entry manually. #> Row named: Clostridium colinum et rel. #> contains no non-unknown values, returning: #> 'Clostridium colinum et rel.' for all replaced levels. #> Consider editing this tax_table entry manually. #> Row named: Escherichia coli et rel. #> contains no non-unknown values, returning: #> 'Escherichia coli et rel.' for all replaced levels. #> Consider editing this tax_table entry manually. #> Taxonomy Table:     [50 taxa by 3 taxonomic ranks]: #>                                    Phylum                        #> Actinomycetaceae                   \"Actinomycetaceae\"            #> Aerococcus                         \"Firmicutes\"                  #> Aeromonas                          \"Proteobacteria\"              #> Akkermansia                        \"Verrucomicrobia\"             #> Alcaligenes faecalis et rel.       \"Proteobacteria\"              #> Allistipes et rel.                 \"Bacteroidetes\"               #> Anaerobiospirillum                 \"Proteobacteria\"              #> Anaerofustis                       \"Firmicutes\"                  #> Anaerostipes caccae et rel.        \"Firmicutes\"                  #> Anaerotruncus colihominis et rel.  \"Firmicutes\"                  #> Anaerovorax odorimutans et rel.    \"Firmicutes\"                  #> Aneurinibacillus                   \"Firmicutes\"                  #> Aquabacterium                      \"Proteobacteria\"              #> Asteroleplasma et rel.             \"Firmicutes\"                  #> Atopobium                          \"Actinobacteria\"              #> Bacillus                           \"Firmicutes\"                  #> Bacteroides fragilis et rel.       \"Bacteroidetes\"               #> Bacteroides intestinalis et rel.   \"Bacteroidetes\"               #> Bacteroides ovatus et rel.         \"Bacteroidetes\"               #> Bacteroides plebeius et rel.       \"Bacteroidetes\"               #> Bacteroides splachnicus et rel.    \"Bacteroidetes\"               #> Bacteroides stercoris et rel.      \"Bacteroidetes\"               #> Bacteroides uniformis et rel.      \"Bacteroidetes\"               #> Bacteroides vulgatus et rel.       \"Bacteroidetes\"               #> Bifidobacterium                    \"Bifidobacterium\"             #> Bilophila et rel.                  \"Proteobacteria\"              #> Brachyspira                        \"Spirochaetes\"                #> Bryantella formatexigens et rel.   \"Firmicutes\"                  #> Bulleidia moorei et rel.           \"Firmicutes\"                  #> Burkholderia                       \"Proteobacteria\"              #> Butyrivibrio crossotus et rel.     \"Firmicutes\"                  #> Campylobacter                      \"Proteobacteria\"              #> Catenibacterium mitsuokai et rel.  \"Firmicutes\"                  #> Clostridium (sensu stricto)        \"Firmicutes\"                  #> Clostridium cellulosi et rel.      \"Firmicutes\"                  #> Clostridium colinum et rel.        \"Clostridium colinum et rel.\" #> Clostridium difficile et rel.      \"Firmicutes\"                  #> Clostridium felsineum et rel.      \"Firmicutes\"                  #> Clostridium leptum et rel.         \"Firmicutes\"                  #> Clostridium nexile et rel.         \"Firmicutes\"                  #> Clostridium orbiscindens et rel.   \"Firmicutes\"                  #> Clostridium ramosum et rel.        \"Firmicutes\"                  #> Clostridium sphenoides et rel.     \"Firmicutes\"                  #> Clostridium stercorarium et rel.   \"Firmicutes\"                  #> Clostridium symbiosum et rel.      \"Firmicutes\"                  #> Clostridium thermocellum et rel.   \"Firmicutes\"                  #> Collinsella                        \"Actinobacteria\"              #> Coprobacillus catenaformis et rel. \"Firmicutes\"                  #> Coprococcus eutactus et rel.       \"Firmicutes\"                  #> Corynebacterium                    \"Actinobacteria\"              #>                                    Family                        #> Actinomycetaceae                   \"Actinomycetaceae\"            #> Aerococcus                         \"Bacilli\"                     #> Aeromonas                          \"Proteobacteria\"              #> Akkermansia                        \"Verrucomicrobia\"             #> Alcaligenes faecalis et rel.       \"Proteobacteria\"              #> Allistipes et rel.                 \"Bacteroidetes\"               #> Anaerobiospirillum                 \"Proteobacteria\"              #> Anaerofustis                       \"Clostridium cluster XV\"      #> Anaerostipes caccae et rel.        \"Clostridium cluster XIVa\"    #> Anaerotruncus colihominis et rel.  \"Clostridium cluster IV\"      #> Anaerovorax odorimutans et rel.    \"Clostridium cluster XI\"      #> Aneurinibacillus                   \"Bacilli\"                     #> Aquabacterium                      \"Proteobacteria\"              #> Asteroleplasma et rel.             \"Asteroleplasma\"              #> Atopobium                          \"Actinobacteria\"              #> Bacillus                           \"Bacilli\"                     #> Bacteroides fragilis et rel.       \"Bacteroidetes\"               #> Bacteroides intestinalis et rel.   \"Bacteroidetes\"               #> Bacteroides ovatus et rel.         \"Bacteroidetes\"               #> Bacteroides plebeius et rel.       \"Bacteroidetes\"               #> Bacteroides splachnicus et rel.    \"Bacteroidetes\"               #> Bacteroides stercoris et rel.      \"Bacteroidetes\"               #> Bacteroides uniformis et rel.      \"Bacteroidetes\"               #> Bacteroides vulgatus et rel.       \"Bacteroidetes\"               #> Bifidobacterium                    \"Bifidobacterium\"             #> Bilophila et rel.                  \"Proteobacteria Phylum\"       #> Brachyspira                        \"Spirochaetes\"                #> Bryantella formatexigens et rel.   \"Clostridium cluster XIVa\"    #> Bulleidia moorei et rel.           \"Clostridium cluster XVI\"     #> Burkholderia                       \"Proteobacteria\"              #> Butyrivibrio crossotus et rel.     \"Clostridium cluster XIVa\"    #> Campylobacter                      \"Proteobacteria\"              #> Catenibacterium mitsuokai et rel.  \"Clostridium cluster XVII\"    #> Clostridium (sensu stricto)        \"Clostridium cluster I\"       #> Clostridium cellulosi et rel.      \"Clostridium cluster IV\"      #> Clostridium colinum et rel.        \"Clostridium colinum et rel.\" #> Clostridium difficile et rel.      \"Clostridium cluster XI\"      #> Clostridium felsineum et rel.      \"Clostridium cluster XI\"      #> Clostridium leptum et rel.         \"Clostridium cluster IV\"      #> Clostridium nexile et rel.         \"Clostridium cluster XIVa\"    #> Clostridium orbiscindens et rel.   \"Clostridium cluster IV\"      #> Clostridium ramosum et rel.        \"Firmicutes Phylum\"           #> Clostridium sphenoides et rel.     \"Clostridium cluster XIVa\"    #> Clostridium stercorarium et rel.   \"Clostridium cluster III\"     #> Clostridium symbiosum et rel.      \"Clostridium cluster XIVa\"    #> Clostridium thermocellum et rel.   \"Clostridium cluster III\"     #> Collinsella                        \"Actinobacteria\"              #> Coprobacillus catenaformis et rel. \"Clostridium cluster XVIII\"   #> Coprococcus eutactus et rel.       \"Clostridium cluster XIVa\"    #> Corynebacterium                    \"Actinobacteria\"              #>                                    Genus                                #> Actinomycetaceae                   \"Actinomycetaceae\"                   #> Aerococcus                         \"Aerococcus\"                         #> Aeromonas                          \"Aeromonas\"                          #> Akkermansia                        \"Akkermansia\"                        #> Alcaligenes faecalis et rel.       \"Alcaligenes faecalis et rel.\"       #> Allistipes et rel.                 \"Allistipes et rel.\"                 #> Anaerobiospirillum                 \"Proteobacteria Family\"              #> Anaerofustis                       \"Anaerofustis\"                       #> Anaerostipes caccae et rel.        \"Clostridium cluster XIVa Family\"    #> Anaerotruncus colihominis et rel.  \"Anaerotruncus colihominis et rel.\"  #> Anaerovorax odorimutans et rel.    \"Anaerovorax odorimutans et rel.\"    #> Aneurinibacillus                   \"Aneurinibacillus\"                   #> Aquabacterium                      \"Proteobacteria Family\"              #> Asteroleplasma et rel.             \"Asteroleplasma Family\"              #> Atopobium                          \"Atopobium\"                          #> Bacillus                           \"Bacillus\"                           #> Bacteroides fragilis et rel.       \"Bacteroides fragilis et rel.\"       #> Bacteroides intestinalis et rel.   \"Bacteroides intestinalis et rel.\"   #> Bacteroides ovatus et rel.         \"Bacteroides ovatus et rel.\"         #> Bacteroides plebeius et rel.       \"Bacteroides plebeius et rel.\"       #> Bacteroides splachnicus et rel.    \"Bacteroides splachnicus et rel.\"    #> Bacteroides stercoris et rel.      \"Bacteroides stercoris et rel.\"      #> Bacteroides uniformis et rel.      \"Bacteroides uniformis et rel.\"      #> Bacteroides vulgatus et rel.       \"Bacteroides vulgatus et rel.\"       #> Bifidobacterium                    \"Bifidobacterium\"                    #> Bilophila et rel.                  \"Proteobacteria Phylum\"              #> Brachyspira                        \"Brachyspira\"                        #> Bryantella formatexigens et rel.   \"Bryantella formatexigens et rel.\"   #> Bulleidia moorei et rel.           \"Bulleidia moorei et rel.\"           #> Burkholderia                       \"Burkholderia\"                       #> Butyrivibrio crossotus et rel.     \"Butyrivibrio crossotus et rel.\"     #> Campylobacter                      \"Campylobacter\"                      #> Catenibacterium mitsuokai et rel.  \"Catenibacterium mitsuokai et rel.\"  #> Clostridium (sensu stricto)        \"Clostridium cluster I Family\"       #> Clostridium cellulosi et rel.      \"Clostridium cellulosi et rel.\"      #> Clostridium colinum et rel.        \"Clostridium colinum et rel.\"        #> Clostridium difficile et rel.      \"Clostridium difficile et rel.\"      #> Clostridium felsineum et rel.      \"Clostridium felsineum et rel.\"      #> Clostridium leptum et rel.         \"Clostridium leptum et rel.\"         #> Clostridium nexile et rel.         \"Clostridium nexile et rel.\"         #> Clostridium orbiscindens et rel.   \"Clostridium orbiscindens et rel.\"   #> Clostridium ramosum et rel.        \"Firmicutes Phylum\"                  #> Clostridium sphenoides et rel.     \"Clostridium cluster XIVa Family\"    #> Clostridium stercorarium et rel.   \"Clostridium stercorarium et rel.\"   #> Clostridium symbiosum et rel.      \"Clostridium symbiosum et rel.\"      #> Clostridium thermocellum et rel.   \"Clostridium thermocellum et rel.\"   #> Collinsella                        \"Collinsella\"                        #> Coprobacillus catenaformis et rel. \"Coprobacillus catenaformis et rel.\" #> Coprococcus eutactus et rel.       \"Coprococcus eutactus et rel.\"       #> Corynebacterium                    \"Actinobacteria Family\"               # This will only replace short entries, and so won't replace literal \"unknown\" values ps %>%   tax_fix(unknowns = NULL) %>%   tax_table() %>%   head(50) #> Row named: Actinomycetaceae #> contains no non-unknown values, returning: #> 'Actinomycetaceae' for all replaced levels. #> Consider editing this tax_table entry manually. #> Row named: Bifidobacterium #> contains no non-unknown values, returning: #> 'Bifidobacterium' for all replaced levels. #> Consider editing this tax_table entry manually. #> Row named: Clostridium colinum et rel. #> contains no non-unknown values, returning: #> 'Clostridium colinum et rel.' for all replaced levels. #> Consider editing this tax_table entry manually. #> Row named: Escherichia coli et rel. #> contains no non-unknown values, returning: #> 'Escherichia coli et rel.' for all replaced levels. #> Consider editing this tax_table entry manually. #> Taxonomy Table:     [50 taxa by 3 taxonomic ranks]: #>                                    Phylum                        #> Actinomycetaceae                   \"Actinomycetaceae\"            #> Aerococcus                         \"Firmicutes\"                  #> Aeromonas                          \"Proteobacteria\"              #> Akkermansia                        \"Verrucomicrobia\"             #> Alcaligenes faecalis et rel.       \"Proteobacteria\"              #> Allistipes et rel.                 \"Bacteroidetes\"               #> Anaerobiospirillum                 \"Proteobacteria\"              #> Anaerofustis                       \"Firmicutes\"                  #> Anaerostipes caccae et rel.        \"Firmicutes\"                  #> Anaerotruncus colihominis et rel.  \"Firmicutes\"                  #> Anaerovorax odorimutans et rel.    \"Firmicutes\"                  #> Aneurinibacillus                   \"Firmicutes\"                  #> Aquabacterium                      \"Proteobacteria\"              #> Asteroleplasma et rel.             \"Firmicutes\"                  #> Atopobium                          \"Actinobacteria\"              #> Bacillus                           \"Firmicutes\"                  #> Bacteroides fragilis et rel.       \"Bacteroidetes\"               #> Bacteroides intestinalis et rel.   \"Bacteroidetes\"               #> Bacteroides ovatus et rel.         \"Bacteroidetes\"               #> Bacteroides plebeius et rel.       \"Bacteroidetes\"               #> Bacteroides splachnicus et rel.    \"Bacteroidetes\"               #> Bacteroides stercoris et rel.      \"Bacteroidetes\"               #> Bacteroides uniformis et rel.      \"Bacteroidetes\"               #> Bacteroides vulgatus et rel.       \"Bacteroidetes\"               #> Bifidobacterium                    \"Bifidobacterium\"             #> Bilophila et rel.                  \"Proteobacteria\"              #> Brachyspira                        \"Spirochaetes\"                #> Bryantella formatexigens et rel.   \"Firmicutes\"                  #> Bulleidia moorei et rel.           \"Firmicutes\"                  #> Burkholderia                       \"Proteobacteria\"              #> Butyrivibrio crossotus et rel.     \"Firmicutes\"                  #> Campylobacter                      \"Proteobacteria\"              #> Catenibacterium mitsuokai et rel.  \"Firmicutes\"                  #> Clostridium (sensu stricto)        \"Firmicutes\"                  #> Clostridium cellulosi et rel.      \"Firmicutes\"                  #> Clostridium colinum et rel.        \"Clostridium colinum et rel.\" #> Clostridium difficile et rel.      \"Firmicutes\"                  #> Clostridium felsineum et rel.      \"Firmicutes\"                  #> Clostridium leptum et rel.         \"Firmicutes\"                  #> Clostridium nexile et rel.         \"Firmicutes\"                  #> Clostridium orbiscindens et rel.   \"Firmicutes\"                  #> Clostridium ramosum et rel.        \"Firmicutes\"                  #> Clostridium sphenoides et rel.     \"Firmicutes\"                  #> Clostridium stercorarium et rel.   \"Firmicutes\"                  #> Clostridium symbiosum et rel.      \"Firmicutes\"                  #> Clostridium thermocellum et rel.   \"Firmicutes\"                  #> Collinsella                        \"Actinobacteria\"              #> Coprobacillus catenaformis et rel. \"Firmicutes\"                  #> Coprococcus eutactus et rel.       \"Firmicutes\"                  #> Corynebacterium                    \"Actinobacteria\"              #>                                    Family                        #> Actinomycetaceae                   \"Actinomycetaceae\"            #> Aerococcus                         \"Bacilli\"                     #> Aeromonas                          \"Proteobacteria\"              #> Akkermansia                        \"Verrucomicrobia\"             #> Alcaligenes faecalis et rel.       \"Proteobacteria\"              #> Allistipes et rel.                 \"Bacteroidetes\"               #> Anaerobiospirillum                 \"Proteobacteria\"              #> Anaerofustis                       \"Clostridium cluster XV\"      #> Anaerostipes caccae et rel.        \"Clostridium cluster XIVa\"    #> Anaerotruncus colihominis et rel.  \"Clostridium cluster IV\"      #> Anaerovorax odorimutans et rel.    \"Clostridium cluster XI\"      #> Aneurinibacillus                   \"Bacilli\"                     #> Aquabacterium                      \"Proteobacteria\"              #> Asteroleplasma et rel.             \"Asteroleplasma\"              #> Atopobium                          \"Actinobacteria\"              #> Bacillus                           \"Bacilli\"                     #> Bacteroides fragilis et rel.       \"Bacteroidetes\"               #> Bacteroides intestinalis et rel.   \"Bacteroidetes\"               #> Bacteroides ovatus et rel.         \"Bacteroidetes\"               #> Bacteroides plebeius et rel.       \"Bacteroidetes\"               #> Bacteroides splachnicus et rel.    \"Bacteroidetes\"               #> Bacteroides stercoris et rel.      \"Bacteroidetes\"               #> Bacteroides uniformis et rel.      \"Bacteroidetes\"               #> Bacteroides vulgatus et rel.       \"Bacteroidetes\"               #> Bifidobacterium                    \"Bifidobacterium\"             #> Bilophila et rel.                  \"Proteobacteria Phylum\"       #> Brachyspira                        \"Spirochaetes\"                #> Bryantella formatexigens et rel.   \"Clostridium cluster XIVa\"    #> Bulleidia moorei et rel.           \"Clostridium cluster XVI\"     #> Burkholderia                       \"Proteobacteria\"              #> Butyrivibrio crossotus et rel.     \"Clostridium cluster XIVa\"    #> Campylobacter                      \"Proteobacteria\"              #> Catenibacterium mitsuokai et rel.  \"Clostridium cluster XVII\"    #> Clostridium (sensu stricto)        \"Clostridium cluster I\"       #> Clostridium cellulosi et rel.      \"Clostridium cluster IV\"      #> Clostridium colinum et rel.        \"Clostridium colinum et rel.\" #> Clostridium difficile et rel.      \"Clostridium cluster XI\"      #> Clostridium felsineum et rel.      \"Clostridium cluster XI\"      #> Clostridium leptum et rel.         \"Clostridium cluster IV\"      #> Clostridium nexile et rel.         \"Clostridium cluster XIVa\"    #> Clostridium orbiscindens et rel.   \"Clostridium cluster IV\"      #> Clostridium ramosum et rel.        \"Firmicutes Phylum\"           #> Clostridium sphenoides et rel.     \"Clostridium cluster XIVa\"    #> Clostridium stercorarium et rel.   \"Clostridium cluster III\"     #> Clostridium symbiosum et rel.      \"Clostridium cluster XIVa\"    #> Clostridium thermocellum et rel.   \"Clostridium cluster III\"     #> Collinsella                        \"Actinobacteria\"              #> Coprobacillus catenaformis et rel. \"Clostridium cluster XVIII\"   #> Coprococcus eutactus et rel.       \"Clostridium cluster XIVa\"    #> Corynebacterium                    \"Actinobacteria\"              #>                                    Genus                                #> Actinomycetaceae                   \"Actinomycetaceae\"                   #> Aerococcus                         \"Aerococcus\"                         #> Aeromonas                          \"Aeromonas\"                          #> Akkermansia                        \"Akkermansia\"                        #> Alcaligenes faecalis et rel.       \"Alcaligenes faecalis et rel.\"       #> Allistipes et rel.                 \"Allistipes et rel.\"                 #> Anaerobiospirillum                 \"Proteobacteria Family\"              #> Anaerofustis                       \"Anaerofustis\"                       #> Anaerostipes caccae et rel.        \"Clostridium cluster XIVa Family\"    #> Anaerotruncus colihominis et rel.  \"Anaerotruncus colihominis et rel.\"  #> Anaerovorax odorimutans et rel.    \"Anaerovorax odorimutans et rel.\"    #> Aneurinibacillus                   \"Aneurinibacillus\"                   #> Aquabacterium                      \"unknown\"                            #> Asteroleplasma et rel.             \"Asteroleplasma Family\"              #> Atopobium                          \"Atopobium\"                          #> Bacillus                           \"Bacillus\"                           #> Bacteroides fragilis et rel.       \"Bacteroides fragilis et rel.\"       #> Bacteroides intestinalis et rel.   \"Bacteroides intestinalis et rel.\"   #> Bacteroides ovatus et rel.         \"Bacteroides ovatus et rel.\"         #> Bacteroides plebeius et rel.       \"Bacteroides plebeius et rel.\"       #> Bacteroides splachnicus et rel.    \"Bacteroides splachnicus et rel.\"    #> Bacteroides stercoris et rel.      \"Bacteroides stercoris et rel.\"      #> Bacteroides uniformis et rel.      \"Bacteroides uniformis et rel.\"      #> Bacteroides vulgatus et rel.       \"Bacteroides vulgatus et rel.\"       #> Bifidobacterium                    \"Bifidobacterium\"                    #> Bilophila et rel.                  \"Proteobacteria Phylum\"              #> Brachyspira                        \"Brachyspira\"                        #> Bryantella formatexigens et rel.   \"Bryantella formatexigens et rel.\"   #> Bulleidia moorei et rel.           \"Bulleidia moorei et rel.\"           #> Burkholderia                       \"Burkholderia\"                       #> Butyrivibrio crossotus et rel.     \"Butyrivibrio crossotus et rel.\"     #> Campylobacter                      \"Campylobacter\"                      #> Catenibacterium mitsuokai et rel.  \"Catenibacterium mitsuokai et rel.\"  #> Clostridium (sensu stricto)        \"unknown\"                            #> Clostridium cellulosi et rel.      \"Clostridium cellulosi et rel.\"      #> Clostridium colinum et rel.        \"Clostridium colinum et rel.\"        #> Clostridium difficile et rel.      \"Clostridium difficile et rel.\"      #> Clostridium felsineum et rel.      \"Clostridium felsineum et rel.\"      #> Clostridium leptum et rel.         \"Clostridium leptum et rel.\"         #> Clostridium nexile et rel.         \"Clostridium nexile et rel.\"         #> Clostridium orbiscindens et rel.   \"Clostridium orbiscindens et rel.\"   #> Clostridium ramosum et rel.        \"Firmicutes Phylum\"                  #> Clostridium sphenoides et rel.     \"Clostridium cluster XIVa Family\"    #> Clostridium stercorarium et rel.   \"Clostridium stercorarium et rel.\"   #> Clostridium symbiosum et rel.      \"Clostridium symbiosum et rel.\"      #> Clostridium thermocellum et rel.   \"Clostridium thermocellum et rel.\"   #> Collinsella                        \"Collinsella\"                        #> Coprobacillus catenaformis et rel. \"Coprobacillus catenaformis et rel.\" #> Coprococcus eutactus et rel.       \"Coprococcus eutactus et rel.\"       #> Corynebacterium                    \"Actinobacteria Family\"               # Change rank suffix and separator settings tax_fix(ps, suffix_rank = \"current\", sep = \" - \") %>%   tax_table() %>%   head(50) #> Row named: Actinomycetaceae #> contains no non-unknown values, returning: #> 'Actinomycetaceae' for all replaced levels. #> Consider editing this tax_table entry manually. #> Row named: Bifidobacterium #> contains no non-unknown values, returning: #> 'Bifidobacterium' for all replaced levels. #> Consider editing this tax_table entry manually. #> Row named: Clostridium colinum et rel. #> contains no non-unknown values, returning: #> 'Clostridium colinum et rel.' for all replaced levels. #> Consider editing this tax_table entry manually. #> Row named: Escherichia coli et rel. #> contains no non-unknown values, returning: #> 'Escherichia coli et rel.' for all replaced levels. #> Consider editing this tax_table entry manually. #> Taxonomy Table:     [50 taxa by 3 taxonomic ranks]: #>                                    Phylum                        #> Actinomycetaceae                   \"Actinomycetaceae\"            #> Aerococcus                         \"Firmicutes\"                  #> Aeromonas                          \"Proteobacteria\"              #> Akkermansia                        \"Verrucomicrobia\"             #> Alcaligenes faecalis et rel.       \"Proteobacteria\"              #> Allistipes et rel.                 \"Bacteroidetes\"               #> Anaerobiospirillum                 \"Proteobacteria\"              #> Anaerofustis                       \"Firmicutes\"                  #> Anaerostipes caccae et rel.        \"Firmicutes\"                  #> Anaerotruncus colihominis et rel.  \"Firmicutes\"                  #> Anaerovorax odorimutans et rel.    \"Firmicutes\"                  #> Aneurinibacillus                   \"Firmicutes\"                  #> Aquabacterium                      \"Proteobacteria\"              #> Asteroleplasma et rel.             \"Firmicutes\"                  #> Atopobium                          \"Actinobacteria\"              #> Bacillus                           \"Firmicutes\"                  #> Bacteroides fragilis et rel.       \"Bacteroidetes\"               #> Bacteroides intestinalis et rel.   \"Bacteroidetes\"               #> Bacteroides ovatus et rel.         \"Bacteroidetes\"               #> Bacteroides plebeius et rel.       \"Bacteroidetes\"               #> Bacteroides splachnicus et rel.    \"Bacteroidetes\"               #> Bacteroides stercoris et rel.      \"Bacteroidetes\"               #> Bacteroides uniformis et rel.      \"Bacteroidetes\"               #> Bacteroides vulgatus et rel.       \"Bacteroidetes\"               #> Bifidobacterium                    \"Bifidobacterium\"             #> Bilophila et rel.                  \"Proteobacteria\"              #> Brachyspira                        \"Spirochaetes\"                #> Bryantella formatexigens et rel.   \"Firmicutes\"                  #> Bulleidia moorei et rel.           \"Firmicutes\"                  #> Burkholderia                       \"Proteobacteria\"              #> Butyrivibrio crossotus et rel.     \"Firmicutes\"                  #> Campylobacter                      \"Proteobacteria\"              #> Catenibacterium mitsuokai et rel.  \"Firmicutes\"                  #> Clostridium (sensu stricto)        \"Firmicutes\"                  #> Clostridium cellulosi et rel.      \"Firmicutes\"                  #> Clostridium colinum et rel.        \"Clostridium colinum et rel.\" #> Clostridium difficile et rel.      \"Firmicutes\"                  #> Clostridium felsineum et rel.      \"Firmicutes\"                  #> Clostridium leptum et rel.         \"Firmicutes\"                  #> Clostridium nexile et rel.         \"Firmicutes\"                  #> Clostridium orbiscindens et rel.   \"Firmicutes\"                  #> Clostridium ramosum et rel.        \"Firmicutes\"                  #> Clostridium sphenoides et rel.     \"Firmicutes\"                  #> Clostridium stercorarium et rel.   \"Firmicutes\"                  #> Clostridium symbiosum et rel.      \"Firmicutes\"                  #> Clostridium thermocellum et rel.   \"Firmicutes\"                  #> Collinsella                        \"Actinobacteria\"              #> Coprobacillus catenaformis et rel. \"Firmicutes\"                  #> Coprococcus eutactus et rel.       \"Firmicutes\"                  #> Corynebacterium                    \"Actinobacteria\"              #>                                    Family                        #> Actinomycetaceae                   \"Actinomycetaceae\"            #> Aerococcus                         \"Bacilli\"                     #> Aeromonas                          \"Proteobacteria\"              #> Akkermansia                        \"Verrucomicrobia\"             #> Alcaligenes faecalis et rel.       \"Proteobacteria\"              #> Allistipes et rel.                 \"Bacteroidetes\"               #> Anaerobiospirillum                 \"Proteobacteria\"              #> Anaerofustis                       \"Clostridium cluster XV\"      #> Anaerostipes caccae et rel.        \"Clostridium cluster XIVa\"    #> Anaerotruncus colihominis et rel.  \"Clostridium cluster IV\"      #> Anaerovorax odorimutans et rel.    \"Clostridium cluster XI\"      #> Aneurinibacillus                   \"Bacilli\"                     #> Aquabacterium                      \"Proteobacteria\"              #> Asteroleplasma et rel.             \"Asteroleplasma\"              #> Atopobium                          \"Actinobacteria\"              #> Bacillus                           \"Bacilli\"                     #> Bacteroides fragilis et rel.       \"Bacteroidetes\"               #> Bacteroides intestinalis et rel.   \"Bacteroidetes\"               #> Bacteroides ovatus et rel.         \"Bacteroidetes\"               #> Bacteroides plebeius et rel.       \"Bacteroidetes\"               #> Bacteroides splachnicus et rel.    \"Bacteroidetes\"               #> Bacteroides stercoris et rel.      \"Bacteroidetes\"               #> Bacteroides uniformis et rel.      \"Bacteroidetes\"               #> Bacteroides vulgatus et rel.       \"Bacteroidetes\"               #> Bifidobacterium                    \"Bifidobacterium\"             #> Bilophila et rel.                  \"Proteobacteria - Family\"     #> Brachyspira                        \"Spirochaetes\"                #> Bryantella formatexigens et rel.   \"Clostridium cluster XIVa\"    #> Bulleidia moorei et rel.           \"Clostridium cluster XVI\"     #> Burkholderia                       \"Proteobacteria\"              #> Butyrivibrio crossotus et rel.     \"Clostridium cluster XIVa\"    #> Campylobacter                      \"Proteobacteria\"              #> Catenibacterium mitsuokai et rel.  \"Clostridium cluster XVII\"    #> Clostridium (sensu stricto)        \"Clostridium cluster I\"       #> Clostridium cellulosi et rel.      \"Clostridium cluster IV\"      #> Clostridium colinum et rel.        \"Clostridium colinum et rel.\" #> Clostridium difficile et rel.      \"Clostridium cluster XI\"      #> Clostridium felsineum et rel.      \"Clostridium cluster XI\"      #> Clostridium leptum et rel.         \"Clostridium cluster IV\"      #> Clostridium nexile et rel.         \"Clostridium cluster XIVa\"    #> Clostridium orbiscindens et rel.   \"Clostridium cluster IV\"      #> Clostridium ramosum et rel.        \"Firmicutes - Family\"         #> Clostridium sphenoides et rel.     \"Clostridium cluster XIVa\"    #> Clostridium stercorarium et rel.   \"Clostridium cluster III\"     #> Clostridium symbiosum et rel.      \"Clostridium cluster XIVa\"    #> Clostridium thermocellum et rel.   \"Clostridium cluster III\"     #> Collinsella                        \"Actinobacteria\"              #> Coprobacillus catenaformis et rel. \"Clostridium cluster XVIII\"   #> Coprococcus eutactus et rel.       \"Clostridium cluster XIVa\"    #> Corynebacterium                    \"Actinobacteria\"              #>                                    Genus                                #> Actinomycetaceae                   \"Actinomycetaceae\"                   #> Aerococcus                         \"Aerococcus\"                         #> Aeromonas                          \"Aeromonas\"                          #> Akkermansia                        \"Akkermansia\"                        #> Alcaligenes faecalis et rel.       \"Alcaligenes faecalis et rel.\"       #> Allistipes et rel.                 \"Allistipes et rel.\"                 #> Anaerobiospirillum                 \"Proteobacteria - Genus\"             #> Anaerofustis                       \"Anaerofustis\"                       #> Anaerostipes caccae et rel.        \"Clostridium cluster XIVa - Genus\"   #> Anaerotruncus colihominis et rel.  \"Anaerotruncus colihominis et rel.\"  #> Anaerovorax odorimutans et rel.    \"Anaerovorax odorimutans et rel.\"    #> Aneurinibacillus                   \"Aneurinibacillus\"                   #> Aquabacterium                      \"Proteobacteria - Genus\"             #> Asteroleplasma et rel.             \"Asteroleplasma - Genus\"             #> Atopobium                          \"Atopobium\"                          #> Bacillus                           \"Bacillus\"                           #> Bacteroides fragilis et rel.       \"Bacteroides fragilis et rel.\"       #> Bacteroides intestinalis et rel.   \"Bacteroides intestinalis et rel.\"   #> Bacteroides ovatus et rel.         \"Bacteroides ovatus et rel.\"         #> Bacteroides plebeius et rel.       \"Bacteroides plebeius et rel.\"       #> Bacteroides splachnicus et rel.    \"Bacteroides splachnicus et rel.\"    #> Bacteroides stercoris et rel.      \"Bacteroides stercoris et rel.\"      #> Bacteroides uniformis et rel.      \"Bacteroides uniformis et rel.\"      #> Bacteroides vulgatus et rel.       \"Bacteroides vulgatus et rel.\"       #> Bifidobacterium                    \"Bifidobacterium\"                    #> Bilophila et rel.                  \"Proteobacteria - Genus\"             #> Brachyspira                        \"Brachyspira\"                        #> Bryantella formatexigens et rel.   \"Bryantella formatexigens et rel.\"   #> Bulleidia moorei et rel.           \"Bulleidia moorei et rel.\"           #> Burkholderia                       \"Burkholderia\"                       #> Butyrivibrio crossotus et rel.     \"Butyrivibrio crossotus et rel.\"     #> Campylobacter                      \"Campylobacter\"                      #> Catenibacterium mitsuokai et rel.  \"Catenibacterium mitsuokai et rel.\"  #> Clostridium (sensu stricto)        \"Clostridium cluster I - Genus\"      #> Clostridium cellulosi et rel.      \"Clostridium cellulosi et rel.\"      #> Clostridium colinum et rel.        \"Clostridium colinum et rel.\"        #> Clostridium difficile et rel.      \"Clostridium difficile et rel.\"      #> Clostridium felsineum et rel.      \"Clostridium felsineum et rel.\"      #> Clostridium leptum et rel.         \"Clostridium leptum et rel.\"         #> Clostridium nexile et rel.         \"Clostridium nexile et rel.\"         #> Clostridium orbiscindens et rel.   \"Clostridium orbiscindens et rel.\"   #> Clostridium ramosum et rel.        \"Firmicutes - Genus\"                 #> Clostridium sphenoides et rel.     \"Clostridium cluster XIVa - Genus\"   #> Clostridium stercorarium et rel.   \"Clostridium stercorarium et rel.\"   #> Clostridium symbiosum et rel.      \"Clostridium symbiosum et rel.\"      #> Clostridium thermocellum et rel.   \"Clostridium thermocellum et rel.\"   #> Collinsella                        \"Collinsella\"                        #> Coprobacillus catenaformis et rel. \"Coprobacillus catenaformis et rel.\" #> Coprococcus eutactus et rel.       \"Coprococcus eutactus et rel.\"       #> Corynebacterium                    \"Actinobacteria - Genus\"              # by default, completely unclassified (anonymous) taxa are named by their # taxa_names / rownames at all ranks. # This makes anonymous taxa distinct from each other, # and so they won't be merged on aggregation with tax_agg. # If you think your anonymous taxa should merge on tax_agg, # or you just want them to be named the all same for another reason, # set anon_unique = FALSE (compare the warning messages) tax_fix(ps, anon_unique = FALSE) #> Row named: Actinomycetaceae #> contains no non-unknown values, returning: #> 'unclassified Phylum' for all replaced levels. #> Consider editing this tax_table entry manually. #> Row named: Bifidobacterium #> contains no non-unknown values, returning: #> 'unclassified Phylum' for all replaced levels. #> Consider editing this tax_table entry manually. #> Row named: Clostridium colinum et rel. #> contains no non-unknown values, returning: #> 'unclassified Phylum' for all replaced levels. #> Consider editing this tax_table entry manually. #> Row named: Escherichia coli et rel. #> contains no non-unknown values, returning: #> 'unclassified Phylum' for all replaced levels. #> Consider editing this tax_table entry manually. #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 130 taxa and 222 samples ] #> sample_data() Sample Data:       [ 222 samples by 8 sample variables ] #> tax_table()   Taxonomy Table:    [ 130 taxa by 3 taxonomic ranks ] tax_fix(ps, anon_unique = TRUE) #> Row named: Actinomycetaceae #> contains no non-unknown values, returning: #> 'Actinomycetaceae' for all replaced levels. #> Consider editing this tax_table entry manually. #> Row named: Bifidobacterium #> contains no non-unknown values, returning: #> 'Bifidobacterium' for all replaced levels. #> Consider editing this tax_table entry manually. #> Row named: Clostridium colinum et rel. #> contains no non-unknown values, returning: #> 'Clostridium colinum et rel.' for all replaced levels. #> Consider editing this tax_table entry manually. #> Row named: Escherichia coli et rel. #> contains no non-unknown values, returning: #> 'Escherichia coli et rel.' for all replaced levels. #> Consider editing this tax_table entry manually. #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 130 taxa and 222 samples ] #> sample_data() Sample Data:       [ 222 samples by 8 sample variables ] #> tax_table()   Taxonomy Table:    [ 130 taxa by 3 taxonomic ranks ]  # here's a larger example tax_table shows its still fast with 1000s rows, # from microbiomeutilities package # library(microbiomeutilities) # data(\"hmp2\") # system.time(tax_fix(hmp2, min_length = 1))"},{"path":"https://david-barnett.github.io/microViz/reference/tax_fix_interactive.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny app to help you use tax_fix — tax_fix_interactive","title":"Shiny app to help you use tax_fix — tax_fix_interactive","text":"Try app get errors tax_fix() tricky work past, suggestions use tax_fix() understand. app shows tax_table data (searchable) unknown values highlighted. allows interactively modify minimum allowed length select values defined unknown. show correct tax_fix() code copy paste script reproduce interactive filtering.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_fix_interactive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny app to help you use tax_fix — tax_fix_interactive","text":"","code":"tax_fix_interactive(data, app_options = list(launch.browser = TRUE))"},{"path":"https://david-barnett.github.io/microViz/reference/tax_fix_interactive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny app to help you use tax_fix — tax_fix_interactive","text":"data phyloseq object app_options options list passed shinyApp()","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_fix_interactive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shiny app to help you use tax_fix — tax_fix_interactive","text":"nothing","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/tax_fix_interactive.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shiny app to help you use tax_fix — tax_fix_interactive","text":"","code":"library(dplyr) library(phyloseq)  # create some problem-filled example tax_table data data(dietswap, package = \"microbiome\") ps <- dietswap # create unknowns to test filling tt <- tax_table(ps) ntax <- ntaxa(ps) set.seed(123) g <- sample(1:ntax, 30) f <- sample(g, 10) p <- sample(f, 3) tt[g, 3] <- \"g__\" tt[f, 2] <- \"f__\" tt[p, 1] <- \"p__\" tt[sample(1:ntax, 10), 3] <- \"unknown\" # create a row with only NAs tt[1, ] <- NA tax_table(ps) <- tax_table(tt)  # function takes a phyloseq and shows code for how to fix the tax_table # tax_fix_interactive(data = ps)"},{"path":"https://david-barnett.github.io/microViz/reference/tax_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Statistical modelling for individual taxa in a phyloseq — tax_model","title":"Statistical modelling for individual taxa in a phyloseq — tax_model","text":"tax_model provides simple framework statistically model abundance individual taxa data. can choose type statistical model want fit, can choose rank (optionally) specific taxa fit statistical models . tax_model takes phyloseq returns list statistical models, one model taxon. independent variables used models, specified variables formula argument (latter takes precedence). taxatree_models runs tax_model every taxon multiple taxonomic ranks (choose ranks plural ranks argument), returns results named nested list designed use taxatree_plots. One list per rank, one model per taxon rank. type = \"bbdml\" run beta binomial regression model(s) using corncob package. bbdml formula/variables /used modelling abundance dispersion parameters.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Statistical modelling for individual taxa in a phyloseq — tax_model","text":"","code":"tax_model(   ps,   rank,   type = \"lm\",   variables = NULL,   formula = NULL,   taxa = NULL,   use_future = FALSE,   return_psx = TRUE,   checkVars = TRUE,   checkNA = \"warning\",   verbose = TRUE,   trans = \"identity\",   trans_args = list(),   ... )"},{"path":"https://david-barnett.github.io/microViz/reference/tax_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Statistical modelling for individual taxa in a phyloseq — tax_model","text":"ps phyloseq object rank name taxonomic rank aggregate model taxa type name modelling function use, function variables vector variable names, used model formula right hand side. variables list, vector, model fit entry list. formula Right hand side formula, formula object character string. list . (alternative variables argument, provide ) taxa taxa model (named, numbered, logical selection, defaulting NULL) use_future TRUE parallel processing future possible, see details. return_psx TRUE, list results returned attached psExtra object checkVars predictor variables checked zero variance? checkNA One \"stop\", \"warning\", \"message\", \"allow\", indicates whether check predictor variables NAs, report NAs present? verbose message progress taxa name modifications trans name tax_transform transformation apply aggregated taxa fitting statistical models trans_args named list additional arguments tax_transform e.g. list(zero_replace = \"halfmin\") ... extra args passed directly modelling function","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Statistical modelling for individual taxa in a phyloseq — tax_model","text":"psExtra named list model objects attached. list lists models (multiple models per taxon). just list (lists), return_psx FALSE.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Statistical modelling for individual taxa in a phyloseq — tax_model","text":"tax_model taxatree_models can use parallel processing future package. can speed analysis many taxa model. Set use_future = TRUE run line like modelling: future::plan(future::multisession, workers = 3) (requires future future.apply packages installed.)","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/tax_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Statistical modelling for individual taxa in a phyloseq — tax_model","text":"","code":"library(corncob) library(dplyr)  data(dietswap, package = \"microbiome\") ps <- dietswap  # create some binary variables for easy visualization ps <- ps %>% ps_mutate(   female = if_else(sex == \"female\", 1, 0, NaN),   overweight = if_else(bmi_group == \"overweight\", 1, 0, NaN),   obese = if_else(bmi_group == \"obese\", 1, 0, NaN) )  # This example HITChip dataset has some taxa with the same name for phylum and family... # We can fix problems like this with the tax_prepend_ranks function ps <- tax_prepend_ranks(ps)  # filter out rare taxa (it is often difficult to fit multivariable models to rare taxa) ps <- ps %>% tax_filter(min_prevalence = 0.1, min_total_abundance = 10000) #> Proportional min_prevalence given: 0.1 --> min 23/222 samples.  # specify variables used for modelling VARS <- c(\"female\", \"overweight\", \"obese\")  # Model first 3 genera using all VARS as predictors (just for a quick test) models <- tax_model(ps, type = \"bbdml\", rank = \"Genus\", taxa = 1:3, variables = VARS) #> Modelling: G: Akkermansia #> Modelling: G: Allistipes et rel. #> Modelling: G: Anaerostipes caccae et rel.  # Alternative method using formula arg instead of variables to produce identical results models2 <- tax_model(   ps = ps, rank = \"Genus\", type = \"bbdml\",   taxa = 1:3, formula = ~ female + overweight + obese, return_psx = FALSE ) #> Modelling: G: Akkermansia #> Modelling: G: Allistipes et rel. #> Modelling: G: Anaerostipes caccae et rel. all.equal(models, models2) # should be TRUE #> [1] \"Modes: S4, list\"                                                   #> [2] \"Lengths: 1, 3\"                                                     #> [3] \"names for current but not for target\"                              #> [4] \"Attributes: < names for target but not for current >\"              #> [5] \"Attributes: < Length mismatch: comparison on first 0 components >\"  # Model only one genus, NOTE the modified name, # which was returned by tax_prepend_ranks defaults models3 <- ps %>%   tax_model(     rank = \"Genus\", type = \"bbdml\",     taxa = \"G: Bacteroides fragilis et rel.\", variables = VARS   ) #> Modelling: G: Bacteroides fragilis et rel.  # Model all taxa at multiple taxonomic ranks (ranks 1 and 2) # using only female variable as predictor models4 <- taxatree_models(   ps = ps, type = \"bbdml\", ranks = 1:2, formula = ~female, verbose = FALSE )  # modelling proportions with simple linear regression is also possible via type = lm # and transforming the taxa to compositional first models_lm <- ps %>%   tax_transform(\"compositional\") %>%   tax_model(rank = \"Genus\", taxa = 1:3, variables = VARS, type = \"lm\") #> Modelling: G: Akkermansia #> Modelling: G: Allistipes et rel. #> Modelling: G: Anaerostipes caccae et rel."},{"path":"https://david-barnett.github.io/microViz/reference/tax_mutate.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify or compute new taxonomic ranks in phyloseq — tax_mutate","title":"Modify or compute new taxonomic ranks in phyloseq — tax_mutate","text":"Add overwrite tax_table ranks. Use dplyr::mutate() syntax.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_mutate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify or compute new taxonomic ranks in phyloseq — tax_mutate","text":"","code":"tax_mutate(ps, ...)"},{"path":"https://david-barnett.github.io/microViz/reference/tax_mutate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify or compute new taxonomic ranks in phyloseq — tax_mutate","text":"ps phyloseq object tax_table, just tax_table ... passed straight dplyr::mutate (see examples dplyr::mutate help)","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_mutate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify or compute new taxonomic ranks in phyloseq — tax_mutate","text":"phyloseq object modified tax_table","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/tax_mutate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify or compute new taxonomic ranks in phyloseq — tax_mutate","text":"","code":"library(phyloseq) library(dplyr) data(\"dietswap\", package = \"microbiome\")  # compute new rank tax_mutate(dietswap, loud_genus = toupper(Genus)) %>%   tt_get() %>%   head() #> Taxonomy Table:     [6 taxa by 4 taxonomic ranks]: #>                              Phylum            Family            #> Actinomycetaceae             \"Actinobacteria\"  \"Actinobacteria\"  #> Aerococcus                   \"Firmicutes\"      \"Bacilli\"         #> Aeromonas                    \"Proteobacteria\"  \"Proteobacteria\"  #> Akkermansia                  \"Verrucomicrobia\" \"Verrucomicrobia\" #> Alcaligenes faecalis et rel. \"Proteobacteria\"  \"Proteobacteria\"  #> Allistipes et rel.           \"Bacteroidetes\"   \"Bacteroidetes\"   #>                              Genus                          #> Actinomycetaceae             \"Actinomycetaceae\"             #> Aerococcus                   \"Aerococcus\"                   #> Aeromonas                    \"Aeromonas\"                    #> Akkermansia                  \"Akkermansia\"                  #> Alcaligenes faecalis et rel. \"Alcaligenes faecalis et rel.\" #> Allistipes et rel.           \"Allistipes et rel.\"           #>                              loud_genus                     #> Actinomycetaceae             \"ACTINOMYCETACEAE\"             #> Aerococcus                   \"AEROCOCCUS\"                   #> Aeromonas                    \"AEROMONAS\"                    #> Akkermansia                  \"AKKERMANSIA\"                  #> Alcaligenes faecalis et rel. \"ALCALIGENES FAECALIS ET REL.\" #> Allistipes et rel.           \"ALLISTIPES ET REL.\"            # overwrite a current rank tax_mutate(dietswap, Genus = toupper(Genus)) %>%   tt_get() %>%   head() #> Taxonomy Table:     [6 taxa by 3 taxonomic ranks]: #>                              Phylum            Family            #> Actinomycetaceae             \"Actinobacteria\"  \"Actinobacteria\"  #> Aerococcus                   \"Firmicutes\"      \"Bacilli\"         #> Aeromonas                    \"Proteobacteria\"  \"Proteobacteria\"  #> Akkermansia                  \"Verrucomicrobia\" \"Verrucomicrobia\" #> Alcaligenes faecalis et rel. \"Proteobacteria\"  \"Proteobacteria\"  #> Allistipes et rel.           \"Bacteroidetes\"   \"Bacteroidetes\"   #>                              Genus                          #> Actinomycetaceae             \"ACTINOMYCETACEAE\"             #> Aerococcus                   \"AEROCOCCUS\"                   #> Aeromonas                    \"AEROMONAS\"                    #> Akkermansia                  \"AKKERMANSIA\"                  #> Alcaligenes faecalis et rel. \"ALCALIGENES FAECALIS ET REL.\" #> Allistipes et rel.           \"ALLISTIPES ET REL.\"            # overwrite all ranks tax_mutate(dietswap, across(everything(), .fns = toupper)) %>%   tt_get() %>%   head() #> Taxonomy Table:     [6 taxa by 3 taxonomic ranks]: #>                              Phylum            Family            #> Actinomycetaceae             \"ACTINOBACTERIA\"  \"ACTINOBACTERIA\"  #> Aerococcus                   \"FIRMICUTES\"      \"BACILLI\"         #> Aeromonas                    \"PROTEOBACTERIA\"  \"PROTEOBACTERIA\"  #> Akkermansia                  \"VERRUCOMICROBIA\" \"VERRUCOMICROBIA\" #> Alcaligenes faecalis et rel. \"PROTEOBACTERIA\"  \"PROTEOBACTERIA\"  #> Allistipes et rel.           \"BACTEROIDETES\"   \"BACTEROIDETES\"   #>                              Genus                          #> Actinomycetaceae             \"ACTINOMYCETACEAE\"             #> Aerococcus                   \"AEROCOCCUS\"                   #> Aeromonas                    \"AEROMONAS\"                    #> Akkermansia                  \"AKKERMANSIA\"                  #> Alcaligenes faecalis et rel. \"ALCALIGENES FAECALIS ET REL.\" #> Allistipes et rel.           \"ALLISTIPES ET REL.\"            # add a new rank at the beginning tax_mutate(dietswap, Root = \"Bacteria\", .before = 1) %>%   tt_get() %>%   head() #> Taxonomy Table:     [6 taxa by 4 taxonomic ranks]: #>                              Root       Phylum            Family            #> Actinomycetaceae             \"Bacteria\" \"Actinobacteria\"  \"Actinobacteria\"  #> Aerococcus                   \"Bacteria\" \"Firmicutes\"      \"Bacilli\"         #> Aeromonas                    \"Bacteria\" \"Proteobacteria\"  \"Proteobacteria\"  #> Akkermansia                  \"Bacteria\" \"Verrucomicrobia\" \"Verrucomicrobia\" #> Alcaligenes faecalis et rel. \"Bacteria\" \"Proteobacteria\"  \"Proteobacteria\"  #> Allistipes et rel.           \"Bacteria\" \"Bacteroidetes\"   \"Bacteroidetes\"   #>                              Genus                          #> Actinomycetaceae             \"Actinomycetaceae\"             #> Aerococcus                   \"Aerococcus\"                   #> Aeromonas                    \"Aeromonas\"                    #> Akkermansia                  \"Akkermansia\"                  #> Alcaligenes faecalis et rel. \"Alcaligenes faecalis et rel.\" #> Allistipes et rel.           \"Allistipes et rel.\"            # this is an error as ranks can't be any other class than character # tax_mutate(dietswap, Genus = 1:ntaxa(dietswap))"},{"path":"https://david-barnett.github.io/microViz/reference/tax_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple way to set unique taxa_names for phyloseq object — tax_name","title":"Simple way to set unique taxa_names for phyloseq object — tax_name","text":"current taxa_names want (e.g. long DNA sequences), function help set sensible unique names. combines: prefix like tax, asv, otu (pick appropriate prefix set ) unique (sequential) number classification information chosen taxonomic rank (optional)","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple way to set unique taxa_names for phyloseq object — tax_name","text":"","code":"tax_name(   ps,   prefix = c(\"tax\", \"asv\", \"otu\")[1],   rank = NA,   pad_number = TRUE,   sep = \"_\" )"},{"path":"https://david-barnett.github.io/microViz/reference/tax_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple way to set unique taxa_names for phyloseq object — tax_name","text":"ps phyloseq object prefix e.g. 'tax', 'asv', 'otu' (set ) rank name taxonomic rank use classifications new names pad_number unique numbers zeros added front (e.g. 001, 002) made number characters? sep character separate unique number taxonomic classification info (relevant rank given)","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple way to set unique taxa_names for phyloseq object — tax_name","text":"phyloseq object","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simple way to set unique taxa_names for phyloseq object — tax_name","text":"confuse phyloseq function taxa_names() newer microViz function tax_rename().","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/tax_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple way to set unique taxa_names for phyloseq object — tax_name","text":"","code":"library(phyloseq) # get example data data(\"enterotype\") ps <- enterotype head(taxa_names(ps)) # these are mostly fine (except the -1), but imagine you wanted new names #> [1] \"-1\"               \"Bacteria\"         \"Prosthecochloris\" \"Chloroflexus\"     #> [5] \"Dehalococcoides\"  \"Thermus\"           # consider storing the original names for reference (e.g. if they are DNA sequences) old_taxa_names <- taxa_names(ps)  ps <- tax_name(ps) taxa_names(ps) %>% head() #> [1] \"tax001\" \"tax002\" \"tax003\" \"tax004\" \"tax005\" \"tax006\"  # probably better to include the genus info to make these names more informative ps <- tax_name(ps, rank = \"Genus\") taxa_names(ps) %>% head() #> [1] \"tax001_NA\"               \"tax002_NA\"               #> [3] \"tax003_Prosthecochloris\" \"tax004_Chloroflexus\"     #> [5] \"tax005_Dehalococcoides\"  \"tax006_Thermus\"           # store new names with old names in dataframe for reference names_df <- tibble::tibble(old = old_taxa_names, new = taxa_names(ps))  # alternative settings tax_name(ps, pad_number = FALSE) %>%   taxa_names() %>%   head() #> [1] \"tax1\" \"tax2\" \"tax3\" \"tax4\" \"tax5\" \"tax6\" tax_name(ps, prefix = \"whateveryoulike\") %>%   taxa_names() %>%   head() #> [1] \"whateveryoulike001\" \"whateveryoulike002\" \"whateveryoulike003\" #> [4] \"whateveryoulike004\" \"whateveryoulike005\" \"whateveryoulike006\" tax_name(ps, rank = \"Genus\", sep = \"-\") %>%   taxa_names() %>%   head() #> [1] \"tax001-NA\"               \"tax002-NA\"               #> [3] \"tax003-Prosthecochloris\" \"tax004-Chloroflexus\"     #> [5] \"tax005-Dehalococcoides\"  \"tax006-Thermus\""},{"path":"https://david-barnett.github.io/microViz/reference/tax_names2rank.html","id":null,"dir":"Reference","previous_headings":"","what":"Add taxa_names as last column in phyloseq tax_table — tax_names2rank","title":"Add taxa_names as last column in phyloseq tax_table — tax_names2rank","text":"taxa names phyloseq may specify unique classification taxa, e.g. ASVs, otherwise represented tax_table . function fixes , allows include level taxatree_plots example.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_names2rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add taxa_names as last column in phyloseq tax_table — tax_names2rank","text":"","code":"tax_names2rank(data, colname = \"unique\")"},{"path":"https://david-barnett.github.io/microViz/reference/tax_names2rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add taxa_names as last column in phyloseq tax_table — tax_names2rank","text":"data phyloseq object, psExtra tax_table (taxonomyTable) colname name new rank add right side tax_table","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_names2rank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add taxa_names as last column in phyloseq tax_table — tax_names2rank","text":"class object passed data","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a fixed taxa colour palette e.g. for comp_barplot — tax_palette","title":"Make a fixed taxa colour palette e.g. for comp_barplot — tax_palette","text":"Makes named palette vector phyloseq dataset considering overall abundance assign colours (sorting)","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a fixed taxa colour palette e.g. for comp_barplot — tax_palette","text":"","code":"tax_palette(   data,   rank,   n,   by = sum,   pal = \"brewerPlus\",   add = c(other = \"lightgrey\"),   ... )"},{"path":"https://david-barnett.github.io/microViz/reference/tax_palette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a fixed taxa colour palette e.g. for comp_barplot — tax_palette","text":"data phyloseq psExtra rank taxonomic rank name \"unique\" n number colours / taxa (including \"\") tax sorting method tax_sort e.g. sum pal palette name distinct_palette function add name = value pairs appended end output, NA none ... args passed tax_sort","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a fixed taxa colour palette e.g. for comp_barplot — tax_palette","text":"named character vector","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_palette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a fixed taxa colour palette e.g. for comp_barplot — tax_palette","text":"","code":"library(ggplot2) data(dietswap, package = \"microbiome\")  myPal <- tax_palette(dietswap, rank = \"Genus\", pal = \"brewerPlus\", n = 40) myPal %>% tax_palette_plot() # just to check the palette   # plot one subset of data dietswap %>%   ps_filter(nationality == \"AFR\", timepoint == 1, sex == \"male\") %>%   comp_barplot(     tax_level = \"Genus\", n_taxa = 15,     bar_outline_colour = NA, bar_width = 0.7,     palette = myPal, label = NULL   )   # plot a different subset of data (top taxa differ but colours are the same) dietswap %>%   ps_filter(nationality != \"AFR\", timepoint == 1, sex == \"male\") %>%   comp_barplot(     tax_level = \"Genus\", n_taxa = 15,     bar_outline_colour = NA, bar_width = 0.7,     palette = myPal, label = NULL   )"},{"path":"https://david-barnett.github.io/microViz/reference/tax_palette_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"tax_palette plotting helper function — tax_palette_plot","title":"tax_palette plotting helper function — tax_palette_plot","text":"Check named palette colour vector created tax_palette()","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_palette_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tax_palette plotting helper function — tax_palette_plot","text":"","code":"tax_palette_plot(named_pal_vec, max_n = NA)"},{"path":"https://david-barnett.github.io/microViz/reference/tax_palette_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tax_palette plotting helper function — tax_palette_plot","text":"named_pal_vec vector colours named taxa (e.g. tax_palette output) max_n NA display colours, limit ","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_palette_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tax_palette plotting helper function — tax_palette_plot","text":"ggplot","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_palette_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"tax_palette plotting helper function — tax_palette_plot","text":"","code":"library(ggplot2) data(dietswap, package = \"microbiome\")  myPal <- tax_palette(dietswap, rank = \"Genus\", pal = \"brewerPlus\", n = 40) myPal %>% tax_palette_plot() # just to check the palette"},{"path":"https://david-barnett.github.io/microViz/reference/tax_prepend_ranks.html","id":null,"dir":"Reference","previous_headings":"","what":"Add rank prefixes to phyloseq tax_table values — tax_prepend_ranks","title":"Add rank prefixes to phyloseq tax_table values — tax_prepend_ranks","text":"Prepend start rank names taxon rank (useful particularly case duplicated taxa names across ranks, e.g. dietswap dataset)","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_prepend_ranks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add rank prefixes to phyloseq tax_table values — tax_prepend_ranks","text":"","code":"tax_prepend_ranks(ps, sep = \": \", nchar = 1)"},{"path":"https://david-barnett.github.io/microViz/reference/tax_prepend_ranks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add rank prefixes to phyloseq tax_table values — tax_prepend_ranks","text":"ps phyloseq object sep characters paste rank initial taxon name nchar number characters use start rank_names","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_prepend_ranks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add rank prefixes to phyloseq tax_table values — tax_prepend_ranks","text":"phyloseq","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/tax_prepend_ranks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add rank prefixes to phyloseq tax_table values — tax_prepend_ranks","text":"","code":"data(\"dietswap\", package = \"microbiome\") phyloseq::tax_table(dietswap) %>% head() #> Taxonomy Table:     [6 taxa by 3 taxonomic ranks]: #>                              Phylum            Family            #> Actinomycetaceae             \"Actinobacteria\"  \"Actinobacteria\"  #> Aerococcus                   \"Firmicutes\"      \"Bacilli\"         #> Aeromonas                    \"Proteobacteria\"  \"Proteobacteria\"  #> Akkermansia                  \"Verrucomicrobia\" \"Verrucomicrobia\" #> Alcaligenes faecalis et rel. \"Proteobacteria\"  \"Proteobacteria\"  #> Allistipes et rel.           \"Bacteroidetes\"   \"Bacteroidetes\"   #>                              Genus                          #> Actinomycetaceae             \"Actinomycetaceae\"             #> Aerococcus                   \"Aerococcus\"                   #> Aeromonas                    \"Aeromonas\"                    #> Akkermansia                  \"Akkermansia\"                  #> Alcaligenes faecalis et rel. \"Alcaligenes faecalis et rel.\" #> Allistipes et rel.           \"Allistipes et rel.\"           dietswap %>%   tax_prepend_ranks() %>%   phyloseq::tax_table() %>%   head() #> Taxonomy Table:     [6 taxa by 3 taxonomic ranks]: #>                              Phylum               Family               #> Actinomycetaceae             \"P: Actinobacteria\"  \"F: Actinobacteria\"  #> Aerococcus                   \"P: Firmicutes\"      \"F: Bacilli\"         #> Aeromonas                    \"P: Proteobacteria\"  \"F: Proteobacteria\"  #> Akkermansia                  \"P: Verrucomicrobia\" \"F: Verrucomicrobia\" #> Alcaligenes faecalis et rel. \"P: Proteobacteria\"  \"F: Proteobacteria\"  #> Allistipes et rel.           \"P: Bacteroidetes\"   \"F: Bacteroidetes\"   #>                              Genus                             #> Actinomycetaceae             \"G: Actinomycetaceae\"             #> Aerococcus                   \"G: Aerococcus\"                   #> Aeromonas                    \"G: Aeromonas\"                    #> Akkermansia                  \"G: Akkermansia\"                  #> Alcaligenes faecalis et rel. \"G: Alcaligenes faecalis et rel.\" #> Allistipes et rel.           \"G: Allistipes et rel.\""},{"path":"https://david-barnett.github.io/microViz/reference/tax_rename.html","id":null,"dir":"Reference","previous_headings":"","what":"Make new phyloseq taxa names from classification and taxon abundance info — tax_rename","title":"Make new phyloseq taxa names from classification and taxon abundance info — tax_rename","text":"Pairs classification given rank numeric ranking suffix (based abundance prevalence data) automatically create informative taxa names.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make new phyloseq taxa names from classification and taxon abundance info — tax_rename","text":"","code":"tax_rename(   ps,   rank,   sort_by = sum,   transform_for_sort = \"identity\",   pad_digits = \"auto\",   sep = \" \",   ... )"},{"path":"https://david-barnett.github.io/microViz/reference/tax_rename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make new phyloseq taxa names from classification and taxon abundance info — tax_rename","text":"ps phyloseq object rank name rank use new taxa names sort_by sort taxa numbering within rank-based groups (tax_sort option) transform_for_sort named transformation apply taxa sorting pad_digits long numeric suffixes ? see details sep character separate rank prefixes numeric suffixes ... additional arguments passed tax_sort","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_rename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make new phyloseq taxa names from classification and taxon abundance info — tax_rename","text":"phyloseq object","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_rename.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make new phyloseq taxa names from classification and taxon abundance info — tax_rename","text":"e.g. \"Bacteroides 003\" third abundant Bacteroides OTU ASV. Taxa returned original order, otu_table returned un-transformed. pad_digits options: \"auto\" –> minimum digits equal length numbers within groups \"max\" –> minimum digits equal length numbers across groups number: e.g. 3 –> 001, 002, ..., 042, ..., 180, ... 1 –> 1, 2, ..., 42, ..., 180, ...","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/tax_rename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make new phyloseq taxa names from classification and taxon abundance info — tax_rename","text":"","code":"library(phyloseq) data(\"ibd\", package = \"microViz\")  ps <- ibd %>%   tax_filter(min_prevalence = 3) %>%   tax_fix()  # show a few of the current, uninformative names taxa_names(ps) %>% head(15) #>  [1] \"OTU.49\"  \"OTU.50\"  \"OTU.52\"  \"OTU.54\"  \"OTU.56\"  \"OTU.57\"  \"OTU.59\"  #>  [8] \"OTU.76\"  \"OTU.90\"  \"OTU.92\"  \"OTU.108\" \"OTU.142\" \"OTU.185\" \"OTU.197\" #> [15] \"OTU.200\" taxa_names(ps) %>% tail(15) #>  [1] \"OTU.36191\" \"OTU.36241\" \"OTU.36243\" \"OTU.36244\" \"OTU.36245\" \"OTU.36247\" #>  [7] \"OTU.36248\" \"OTU.36290\" \"OTU.36292\" \"OTU.36293\" \"OTU.36294\" \"OTU.36295\" #> [13] \"OTU.36297\" \"OTU.36300\" \"OTU.36301\"  # change names to genus classification plus number psNewNames <- ps %>% tax_rename(rank = \"Genus\")  taxa_names(psNewNames) %>% head(15) #>  [1] \"Faecalibacterium 203\"             \"Escherichia/Shigella 081\"         #>  [3] \"Clostridium_XlVa 045\"             \"Lachnospiraceae Family 20\"        #>  [5] \"Bacteroides 0825\"                 \"Flavonifractor 25\"                #>  [7] \"Ruminococcaceae Family 05\"        \"Clostridium_XlVa 028\"             #>  [9] \"Faecalibacterium 204\"             \"Escherichia/Shigella 088\"         #> [11] \"Escherichia/Shigella 130\"         \"Clostridium_XlVa 110\"             #> [13] \"Lachnospiraceae Family 58\"        \"Lachnospiracea_incertae_sedis 34\" #> [15] \"Bacteroides 0967\"                 taxa_names(psNewNames) %>% tail(15) #>  [1] \"Oscillibacter 22\"                 \"Dialister 067\"                    #>  [3] \"Bifidobacterium 36\"               \"Roseburia 123\"                    #>  [5] \"Oscillibacter 19\"                 \"Lachnospiracea_incertae_sedis 45\" #>  [7] \"Enterococcus 15\"                  \"Bacteroides 0205\"                 #>  [9] \"Bacteroides 0187\"                 \"Bacteroides 0165\"                 #> [11] \"Dialister 015\"                    \"Bacteroides 0142\"                 #> [13] \"Bacteroides 0338\"                 \"Dorea 04\"                         #> [15] \"Bacteroides 0226\"                  # demonstrate some alternative argument settings psNewNames2 <- ps %>% tax_rename(   rank = \"Family\", sort_by = prev, pad_digits = \"max\", sep = \"-\" )  taxa_names(psNewNames2) %>% head(15) #>  [1] \"Ruminococcaceae-0216\"    \"Enterobacteriaceae-0101\" #>  [3] \"Lachnospiraceae-0191\"    \"Lachnospiraceae-0192\"    #>  [5] \"Bacteroidaceae-0755\"     \"Ruminococcaceae-0217\"    #>  [7] \"Ruminococcaceae-0218\"    \"Lachnospiraceae-0082\"    #>  [9] \"Ruminococcaceae-0361\"    \"Enterobacteriaceae-0140\" #> [11] \"Enterobacteriaceae-0141\" \"Lachnospiraceae-0404\"    #> [13] \"Lachnospiraceae-0405\"    \"Lachnospiraceae-0317\"    #> [15] \"Bacteroidaceae-0756\"     taxa_names(psNewNames2) %>% tail(15) #>  [1] \"Ruminococcaceae-0522\"    \"Veillonellaceae-0223\"    #>  [3] \"Bifidobacteriaceae-0036\" \"Lachnospiraceae-0623\"    #>  [5] \"Ruminococcaceae-0523\"    \"Lachnospiraceae-0403\"    #>  [7] \"Enterococcaceae-0018\"    \"Bacteroidaceae-0207\"     #>  [9] \"Bacteroidaceae-0280\"     \"Bacteroidaceae-0754\"     #> [11] \"Veillonellaceae-0130\"    \"Bacteroidaceae-0143\"     #> [13] \"Bacteroidaceae-0426\"     \"Lachnospiraceae-0036\"    #> [15] \"Bacteroidaceae-0208\"      ps %>%   tax_rename(rank = \"Genus\", pad_digits = 2) %>%   taxa_names() %>%   head(15) #>  [1] \"Faecalibacterium 203\"             \"Escherichia/Shigella 81\"          #>  [3] \"Clostridium_XlVa 45\"              \"Lachnospiraceae Family 20\"        #>  [5] \"Bacteroides 825\"                  \"Flavonifractor 25\"                #>  [7] \"Ruminococcaceae Family 05\"        \"Clostridium_XlVa 28\"              #>  [9] \"Faecalibacterium 204\"             \"Escherichia/Shigella 88\"          #> [11] \"Escherichia/Shigella 130\"         \"Clostridium_XlVa 110\"             #> [13] \"Lachnospiraceae Family 58\"        \"Lachnospiracea_incertae_sedis 34\" #> [15] \"Bacteroides 967\"                   # naming improvement on plots example library(ggplot2) library(patchwork)  # Overly aggressive OTU filtering to simplify and speed up example psExample <- ps %>% tax_filter(min_prevalence = 0.4) #> Proportional min_prevalence given: 0.4 --> min 37/91 samples.  # before OTU renaming before <- psExample %>%   ps_filter(activity == \"inactive\") %>%   tax_names2rank(\"Taxon\") %>%   comp_barplot(     tax_level = \"Taxon\", n_taxa = 12, other_name = \"Other\",     merge_other = FALSE, bar_outline_colour = \"grey60\"   ) +   coord_flip() +   ggtitle(\"Original taxon names :(\")  # after OTU renaming after <- psExample %>%   ps_filter(activity == \"inactive\") %>%   tax_rename(rank = \"Genus\", pad_digits = \"max\") %>%   tax_names2rank(\"Taxon\") %>%   comp_barplot(     tax_level = \"Taxon\", n_taxa = 12, other_name = \"Other\",     merge_other = FALSE, bar_outline_colour = \"grey60\"   ) +   coord_flip() +   ggtitle(\"New taxon names :)\", \"tax_rename(rank = 'Genus', sort_by = sum)\")  before + after & theme(legend.text = element_text(size = 8))   # ordination example psExample %>%   tax_rename(rank = \"Genus\", sort_by = sum) %>%   tax_names2rank(\"otu\") %>%   tax_transform(\"clr\", rank = \"otu\") %>%   ord_calc() %>%   ord_plot(     size = 2, colour = \"ibd\", shape = \"circle\", alpha = 0.5,     plot_taxa = 1:10,     tax_vec_length = 0.5,     tax_lab_style = tax_lab_style(       type = \"text\", max_angle = 90, check_overlap = TRUE,       size = 2.5, fontface = \"bold\"     ),     tax_vec_style_all = vec_tax_all(alpha = 0.1)   ) +   coord_fixed(clip = \"off\") +   stat_chull(aes(colour = ibd)) +   scale_colour_brewer(palette = \"Dark2\") +   theme(panel.grid = element_line(size = 0.1)) #> Warning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0. #> ℹ Please use the `linewidth` argument instead."},{"path":"https://david-barnett.github.io/microViz/reference/tax_reorder.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder taxa in phyloseq object using vector of names — tax_reorder","title":"Reorder taxa in phyloseq object using vector of names — tax_reorder","text":"Reorder taxa phyloseq object using vector names","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_reorder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder taxa in phyloseq object using vector of names — tax_reorder","text":"","code":"tax_reorder(   ps,   tax_order,   tree_warn = TRUE,   unmatched_warn = TRUE,   ignore = c(\"other\", \"Other\") )"},{"path":"https://david-barnett.github.io/microViz/reference/tax_reorder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorder taxa in phyloseq object using vector of names — tax_reorder","text":"ps phyloseq object tax_order Names taxa desired order; least must match. (Numerical indices also possible) tree_warn phylogenetic tree present phyloseq phy_tree slot, taxa reordered. Default behaviour tax_sort remove phylogenetic tree warn . tree_warn = FALSE suppress warning message, still remove tree! unmatched_warn Warn names (indices) given tax_order found within (range ) taxa_names(ps) - ignored ignore Values want used reordering taxa (useful comp_barplot custom palette names used set tax_order)","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_reorder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reorder taxa in phyloseq object using vector of names — tax_reorder","text":"phyloseq object (always without phy_tree)","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_reorder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reorder taxa in phyloseq object using vector of names — tax_reorder","text":"","code":"data(\"dietswap\", package = \"microbiome\") new_order <- c(   \"Fusobacteria\", \"Cyanobacteria\", \"Verrucomicrobia\", \"Spirochaetes\",   \"Actinobacteria\", \"Firmicutes\", \"Proteobacteria\", \"Bacteroidetes\" ) tax_agg(dietswap, rank = \"Phylum\") %>%   ps_get() %>%   phyloseq::taxa_names() #> [1] \"Actinobacteria\"  \"Firmicutes\"      \"Proteobacteria\"  \"Verrucomicrobia\" #> [5] \"Bacteroidetes\"   \"Spirochaetes\"    \"Fusobacteria\"    \"Cyanobacteria\"    tax_agg(dietswap, rank = \"Phylum\") %>%   ps_get() %>%   tax_reorder(tax_order = new_order) %>%   phyloseq::taxa_names() #> [1] \"Fusobacteria\"    \"Cyanobacteria\"   \"Verrucomicrobia\" \"Spirochaetes\"    #> [5] \"Actinobacteria\"  \"Firmicutes\"      \"Proteobacteria\"  \"Bacteroidetes\"    # partial reordering (of the frontmost positions only) is possible tax_agg(dietswap, rank = \"Phylum\") %>%   ps_get() %>%   tax_reorder(tax_order = c(\"Cyanobacteria\", \"Bacteroidetes\")) %>%   phyloseq::taxa_names() #> [1] \"Cyanobacteria\"   \"Bacteroidetes\"   \"Actinobacteria\"  \"Firmicutes\"      #> [5] \"Proteobacteria\"  \"Verrucomicrobia\" \"Spirochaetes\"    \"Fusobacteria\""},{"path":"https://david-barnett.github.io/microViz/reference/tax_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean-center and SD-scale taxa in phyloseq — tax_scale","title":"Mean-center and SD-scale taxa in phyloseq — tax_scale","text":"Wrapper applying base scale function phyloseq otu_table","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean-center and SD-scale taxa in phyloseq — tax_scale","text":"","code":"tax_scale(data, center = TRUE, scale = TRUE, do = NA, keep_counts = TRUE)"},{"path":"https://david-barnett.github.io/microViz/reference/tax_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean-center and SD-scale taxa in phyloseq — tax_scale","text":"data phyloseq psExtra otu_table center TRUE: center taxon subtracting mean scale TRUE, divide centred taxon standard deviation (divide RMS centred!) alternative argument overrides center scale options! takes \"\", \"scale\", \"center\" \"neither\" keep_counts TRUE, retain original count data psExtra counts slot","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_scale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mean-center and SD-scale taxa in phyloseq — tax_scale","text":"","code":"data(\"dietswap\", package = \"microbiome\") ps <- dietswap ps %>%   otu_get() %>%   .[1:6, 1:6] #> OTU Table:          [6 taxa and 6 samples] #>                      taxa are columns #>          Actinomycetaceae Aerococcus Aeromonas Akkermansia #> Sample-1                0          0         0          18 #> Sample-2                1          0         0          97 #> Sample-3                0          0         0          67 #> Sample-4                1          0         0         256 #> Sample-5                0          0         0          21 #> Sample-6                0          0         0          16 #>          Alcaligenes faecalis et rel. Allistipes et rel. #> Sample-1                            1                336 #> Sample-2                            2                 63 #> Sample-3                            3                 36 #> Sample-4                            2                 96 #> Sample-5                            2                 49 #> Sample-6                            2                 17  # standard use (mean center and SD scale) tax_scale(ps) %>%   otu_get() %>%   .[1:6, 1:6] # Aerococcus is NaN as standard deviation = 0 (0 prevalence) #> OTU Table:          [6 taxa and 6 samples] #>                      taxa are columns #>          Actinomycetaceae Aerococcus Aeromonas Akkermansia #> Sample-1                0          0         0          18 #> Sample-2                1          0         0          97 #> Sample-3                0          0         0          67 #> Sample-4                1          0         0         256 #> Sample-5                0          0         0          21 #> Sample-6                0          0         0          16 #>          Alcaligenes faecalis et rel. Allistipes et rel. #> Sample-1                            1                336 #> Sample-2                            2                 63 #> Sample-3                            3                 36 #> Sample-4                            2                 96 #> Sample-5                            2                 49 #> Sample-6                            2                 17  # RMS scale only (directly on otu_table) otu_get(ps) %>%   tax_scale(center = FALSE) %>%   .[1:6, 1:6] # Aerococcus is NaN as standard deviation = 0 (0 prevalence) #> OTU Table:          [6 taxa and 6 samples] #>                      taxa are columns #>          Actinomycetaceae Aerococcus Aeromonas Akkermansia #> Sample-1         0.000000        NaN         0  0.05741261 #> Sample-2         3.716517        NaN         0  0.30939020 #> Sample-3         0.000000        NaN         0  0.21370251 #> Sample-4         3.716517        NaN         0  0.81653496 #> Sample-5         0.000000        NaN         0  0.06698138 #> Sample-6         0.000000        NaN         0  0.05103343 #>          Alcaligenes faecalis et rel. Allistipes et rel. #> Sample-1                   0.05065049         0.83097699 #> Sample-2                   0.10130097         0.15580819 #> Sample-3                   0.15195146         0.08903325 #> Sample-4                   0.10130097         0.23742200 #> Sample-5                   0.10130097         0.12118414 #> Sample-6                   0.10130097         0.04204348  # example using alternative `do` argument (to center only, no scaling) tax_scale(ps, do = \"center\") %>%   otu_get() %>%   .[1:6, 1:6] #> OTU Table:          [6 taxa and 6 samples] #>                      taxa are columns #>          Actinomycetaceae Aerococcus Aeromonas Akkermansia #> Sample-1                0          0         0          18 #> Sample-2                1          0         0          97 #> Sample-3                0          0         0          67 #> Sample-4                1          0         0         256 #> Sample-5                0          0         0          21 #> Sample-6                0          0         0          16 #>          Alcaligenes faecalis et rel. Allistipes et rel. #> Sample-1                            1                336 #> Sample-2                            2                 63 #> Sample-3                            3                 36 #> Sample-4                            2                 96 #> Sample-5                            2                 49 #> Sample-6                            2                 17  # preserves existing info tax_transform(ps, \"compositional\", rank = \"Genus\") %>% tax_scale() #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 130 taxa and 222 samples ] #> sample_data() Sample Data:       [ 222 samples by 8 sample variables ] #> tax_table()   Taxonomy Table:    [ 130 taxa by 3 taxonomic ranks ] #>  #> otu_get(counts = TRUE)\t\t [ 130 taxa and 222 samples ] #>  #> psExtra info: #> tax_agg = \"Genus\" tax_trans = \"compositional\" tax_scale = \"centered&scaled\"   # drops other psExtra objects previously calculated with unscaled data psxDist <- tax_agg(ps, \"Genus\") %>% dist_calc() psxDist #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 130 taxa and 222 samples ] #> sample_data() Sample Data:       [ 222 samples by 8 sample variables ] #> tax_table()   Taxonomy Table:    [ 130 taxa by 3 taxonomic ranks ] #>  #> psExtra info: #> tax_agg = \"Genus\"  #>  #> bray distance matrix of size 222  #> 0.7639533 0.7851213 0.6680796 0.7699252 0.80507 ... psxDist %>% tax_scale() #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 130 taxa and 222 samples ] #> sample_data() Sample Data:       [ 222 samples by 8 sample variables ] #> tax_table()   Taxonomy Table:    [ 130 taxa by 3 taxonomic ranks ] #>  #> otu_get(counts = TRUE)\t\t [ 130 taxa and 222 samples ] #>  #> psExtra info: #> tax_agg = \"Genus\" tax_scale = \"centered&scaled\"  #>  #>  distance matrix of size 222  #> 0.7639533 0.7851213 0.6680796 0.7699252 0.80507 ... tax_scale(psxDist) %>% info_get() #> psExtra info: #> tax_agg = \"Genus\" tax_scale = \"centered&scaled\""},{"path":"https://david-barnett.github.io/microViz/reference/tax_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset phyloseq object by (partial) taxa names — tax_select","title":"Subset phyloseq object by (partial) taxa names — tax_select","text":"Convenient name-based taxa selection/filtering phyloseq object, including approximate name matching. Takes phyloseq tax table (partial) taxonomic name, list/vector taxonomic names (full partial matches).","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset phyloseq object by (partial) taxa names — tax_select","text":"","code":"tax_select(   ps,   tax_list,   ranks_searched = \"all\",   strict_matches = FALSE,   n_typos = 1,   deselect = FALSE )"},{"path":"https://david-barnett.github.io/microViz/reference/tax_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset phyloseq object by (partial) taxa names — tax_select","text":"ps phyloseq object tax_list e.g. c('g__Bifidobacterium', 'g__Akkermansia', 'g__Bacteroides', 'g__Streptococcus') ranks_searched '' list taxonomic ranks searched names tax_list? strict_matches perfect full name matches allowed TRUE n_typos many typos allow name? uses agrep approximate matching > 0 deselect TRUE, matching taxa REMOVED instead!","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset phyloseq object by (partial) taxa names — tax_select","text":"phyloseq object fewer taxa","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_select.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subset phyloseq object by (partial) taxa names — tax_select","text":"tax_select also search otu names/rownames, perfect matches.","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/tax_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset phyloseq object by (partial) taxa names — tax_select","text":"","code":"# Get example phyloseq object data data(\"dietswap\", package = \"microbiome\") pSeq <- dietswap  # SELECTION EXAMPLES # a <- pSeq %>% tax_select(tax_list = \"Bif\", n_typos = 0, ranks_searched = \"Genus\") b <- pSeq %>% tax_select(tax_list = \"Bifidobacterium\", n_typos = 0) c <- pSeq %>% tax_select(tax_list = \"Bif\", n_typos = 1) identical(a, b) # TRUE #> [1] TRUE identical(a, c) # FALSE #> [1] FALSE  pSeq %>% tax_select(tax_list = \"Bifidobactrium\") # default 1 typo allowed #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 1 taxa and 222 samples ] #> sample_data() Sample Data:       [ 222 samples by 8 sample variables ] #> tax_table()   Taxonomy Table:    [ 1 taxa by 3 taxonomic ranks ] one <- pSeq %>% tax_select(tax_list = \"Akkarmensia\", n_typos = 2) two <- pSeq %>% tax_select(tax_list = \"Akkermansia\", n_typos = 0) identical(one, two) # TRUE #> [1] TRUE  # DESELECTION EXAMPLE # # pSeq %>% tax_select(tax_list = \"Bif\", strict_matches = FALSE, deselect = TRUE) #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 125 taxa and 222 samples ] #> sample_data() Sample Data:       [ 222 samples by 8 sample variables ] #> tax_table()   Taxonomy Table:    [ 125 taxa by 3 taxonomic ranks ] # Incorrect example # pSeq %>% tax_select(tax_list = \"Bif\", strict_matches = TRUE) # fails"},{"path":"https://david-barnett.github.io/microViz/reference/tax_sort.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort taxa in phyloseq otu_table and tax_table — tax_sort","title":"Sort taxa in phyloseq otu_table and tax_table — tax_sort","text":"Multiple ways sorting taxa possible determined argument. argument must one : 'rev' reverse current order 'name' (sort alphabetically ) 'asis' keep current order sample name (descending abundance sorting within sample) summary stat. function e.g. sum mean argument must \"names\" sorting unique taxa, rank name, sorting rank. ignored \"rev\".","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_sort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort taxa in phyloseq otu_table and tax_table — tax_sort","text":"","code":"tax_sort(   data,   by = \"name\",   at = \"names\",   ...,   tree_warn = TRUE,   verbose = TRUE,   trans = \"identity\",   use_counts = TRUE,   counts_warn = TRUE )"},{"path":"https://david-barnett.github.io/microViz/reference/tax_sort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort taxa in phyloseq otu_table and tax_table — tax_sort","text":"data psExtra phyloseq sort, see description \"names\" taxonomic rank apply sorting method , specified . ... used summary function given, pass undetected arg tax_transform(\"binary\") = \"prev\" \"prevalence\" tree_warn phylogenetic tree present phyloseq phy_tree slot, taxa reordered. Default behaviour tax_sort remove phylogenetic tree warn . tree_warn = FALSE suppress warning message, still remove tree! verbose passed phyloseq_validate verbose (TRUE: message suspicious values tax_table, fix) trans name transformation apply taxa sorting (taxa returned un-transformed) use_counts use count data available, instead transformed data counts_warn warn count data available?","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_sort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort taxa in phyloseq otu_table and tax_table — tax_sort","text":"sorted phyloseq psExtra","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_sort.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sort taxa in phyloseq otu_table and tax_table — tax_sort","text":"forget pass na.rm = TRUE ... using summary stat function ","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_sort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sort taxa in phyloseq otu_table and tax_table — tax_sort","text":"","code":"library(phyloseq) data(\"dietswap\", package = \"microbiome\") dietswap #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 130 taxa and 222 samples ] #> sample_data() Sample Data:       [ 222 samples by 8 sample variables ] #> tax_table()   Taxonomy Table:    [ 130 taxa by 3 taxonomic ranks ]  # reverse current order dietswap %>%   tax_sort(\"rev\") %>%   tax_table() %>%   head(30) #> Taxonomy Table:     [30 taxa by 3 taxonomic ranks]: #>                                   Phylum           Family                     #> Yersinia et rel.                  \"Proteobacteria\" \"Proteobacteria\"           #> Xanthomonadaceae                  \"Proteobacteria\" \"Proteobacteria\"           #> Wissella et rel.                  \"Firmicutes\"     \"Bacilli\"                  #> Weissella et rel.                 \"Firmicutes\"     \"Bacilli\"                  #> Vibrio                            \"Proteobacteria\" \"Proteobacteria\"           #> Veillonella                       \"Firmicutes\"     \"Clostridium cluster IX\"   #> Uncultured Selenomonadaceae       \"Firmicutes\"     \"Clostridium cluster IX\"   #> Uncultured Mollicutes             \"Firmicutes\"     \"Uncultured Mollicutes\"    #> Uncultured Clostridiales II       \"Firmicutes\"     \"Uncultured Clostridiales\" #> Uncultured Clostridiales I        \"Firmicutes\"     \"Uncultured Clostridiales\" #> Uncultured Chroococcales          \"Cyanobacteria\"  \"Cyanobacteria\"            #> Uncultured Bacteroidetes          \"Bacteroidetes\"  \"Bacteroidetes\"            #> Tannerella et rel.                \"Bacteroidetes\"  \"Bacteroidetes\"            #> Sutterella wadsworthia et rel.    \"Proteobacteria\" \"Proteobacteria\"           #> Subdoligranulum variable at rel.  \"Firmicutes\"     \"Clostridium cluster IV\"   #> Streptococcus mitis et rel.       \"Firmicutes\"     \"Bacilli\"                  #> Streptococcus intermedius et rel. \"Firmicutes\"     \"Bacilli\"                  #> Streptococcus bovis et rel.       \"Firmicutes\"     \"Bacilli\"                  #> Staphylococcus                    \"Firmicutes\"     \"Bacilli\"                  #> Sporobacter termitidis et rel.    \"Firmicutes\"     \"Clostridium cluster IV\"   #> Serratia                          \"Proteobacteria\" \"Proteobacteria\"           #> Ruminococcus obeum et rel.        \"Firmicutes\"     \"Clostridium cluster XIVa\" #> Ruminococcus lactaris et rel.     \"Firmicutes\"     \"Clostridium cluster XIVa\" #> Ruminococcus gnavus et rel.       \"Firmicutes\"     \"Clostridium cluster XIVa\" #> Ruminococcus callidus et rel.     \"Firmicutes\"     \"Clostridium cluster IV\"   #> Ruminococcus bromii et rel.       \"Firmicutes\"     \"Clostridium cluster IV\"   #> Roseburia intestinalis et rel.    \"Firmicutes\"     \"Clostridium cluster XIVa\" #> Pseudomonas                       \"Proteobacteria\" \"Proteobacteria\"           #> Proteus et rel.                   \"Proteobacteria\" \"Proteobacteria\"           #> Propionibacterium                 \"Actinobacteria\" \"Actinobacteria\"           #>                                   Genus                               #> Yersinia et rel.                  \"Yersinia et rel.\"                  #> Xanthomonadaceae                  \"Xanthomonadaceae\"                  #> Wissella et rel.                  \"Wissella et rel.\"                  #> Weissella et rel.                 \"Weissella et rel.\"                 #> Vibrio                            \"Vibrio\"                            #> Veillonella                       \"Veillonella\"                       #> Uncultured Selenomonadaceae       \"Uncultured Selenomonadaceae\"       #> Uncultured Mollicutes             \"Uncultured Mollicutes\"             #> Uncultured Clostridiales II       \"Uncultured Clostridiales II\"       #> Uncultured Clostridiales I        \"Uncultured Clostridiales I\"        #> Uncultured Chroococcales          \"Uncultured Chroococcales\"          #> Uncultured Bacteroidetes          \"Uncultured Bacteroidetes\"          #> Tannerella et rel.                \"Tannerella et rel.\"                #> Sutterella wadsworthia et rel.    \"Sutterella wadsworthia et rel.\"    #> Subdoligranulum variable at rel.  \"Subdoligranulum variable at rel.\"  #> Streptococcus mitis et rel.       \"Streptococcus mitis et rel.\"       #> Streptococcus intermedius et rel. \"Streptococcus intermedius et rel.\" #> Streptococcus bovis et rel.       \"Streptococcus bovis et rel.\"       #> Staphylococcus                    \"Staphylococcus\"                    #> Sporobacter termitidis et rel.    \"Sporobacter termitidis et rel.\"    #> Serratia                          \"Serratia\"                          #> Ruminococcus obeum et rel.        \"Ruminococcus obeum et rel.\"        #> Ruminococcus lactaris et rel.     \"Ruminococcus lactaris et rel.\"     #> Ruminococcus gnavus et rel.       \"Ruminococcus gnavus et rel.\"       #> Ruminococcus callidus et rel.     \"Ruminococcus callidus et rel.\"     #> Ruminococcus bromii et rel.       \"Ruminococcus bromii et rel.\"       #> Roseburia intestinalis et rel.    \"Roseburia intestinalis et rel.\"    #> Pseudomonas                       \"Pseudomonas\"                       #> Proteus et rel.                   \"Proteus et rel.\"                   #> Propionibacterium                 \"Propionibacterium\"                  # sort alphabetically by a taxonomic rank (or \"names\" for taxa_names) dietswap %>%   tax_sort(by = \"name\", at = \"Phylum\") %>%   tax_table() %>%   head(30) #> Taxonomy Table:     [30 taxa by 3 taxonomic ranks]: #>                                    Phylum           Family                     #> Actinomycetaceae                   \"Actinobacteria\" \"Actinobacteria\"           #> Atopobium                          \"Actinobacteria\" \"Actinobacteria\"           #> Bifidobacterium                    \"Actinobacteria\" \"Actinobacteria\"           #> Collinsella                        \"Actinobacteria\" \"Actinobacteria\"           #> Corynebacterium                    \"Actinobacteria\" \"Actinobacteria\"           #> Eggerthella lenta et rel.          \"Actinobacteria\" \"Actinobacteria\"           #> Micrococcaceae                     \"Actinobacteria\" \"Actinobacteria\"           #> Propionibacterium                  \"Actinobacteria\" \"Actinobacteria\"           #> Allistipes et rel.                 \"Bacteroidetes\"  \"Bacteroidetes\"            #> Bacteroides fragilis et rel.       \"Bacteroidetes\"  \"Bacteroidetes\"            #> Bacteroides intestinalis et rel.   \"Bacteroidetes\"  \"Bacteroidetes\"            #> Bacteroides ovatus et rel.         \"Bacteroidetes\"  \"Bacteroidetes\"            #> Bacteroides plebeius et rel.       \"Bacteroidetes\"  \"Bacteroidetes\"            #> Bacteroides splachnicus et rel.    \"Bacteroidetes\"  \"Bacteroidetes\"            #> Bacteroides stercoris et rel.      \"Bacteroidetes\"  \"Bacteroidetes\"            #> Bacteroides uniformis et rel.      \"Bacteroidetes\"  \"Bacteroidetes\"            #> Bacteroides vulgatus et rel.       \"Bacteroidetes\"  \"Bacteroidetes\"            #> Parabacteroides distasonis et rel. \"Bacteroidetes\"  \"Bacteroidetes\"            #> Prevotella melaninogenica et rel.  \"Bacteroidetes\"  \"Bacteroidetes\"            #> Prevotella oralis et rel.          \"Bacteroidetes\"  \"Bacteroidetes\"            #> Prevotella ruminicola et rel.      \"Bacteroidetes\"  \"Bacteroidetes\"            #> Prevotella tannerae et rel.        \"Bacteroidetes\"  \"Bacteroidetes\"            #> Tannerella et rel.                 \"Bacteroidetes\"  \"Bacteroidetes\"            #> Uncultured Bacteroidetes           \"Bacteroidetes\"  \"Bacteroidetes\"            #> Uncultured Chroococcales           \"Cyanobacteria\"  \"Cyanobacteria\"            #> Aerococcus                         \"Firmicutes\"     \"Bacilli\"                  #> Anaerofustis                       \"Firmicutes\"     \"Clostridium cluster XV\"   #> Anaerostipes caccae et rel.        \"Firmicutes\"     \"Clostridium cluster XIVa\" #> Anaerotruncus colihominis et rel.  \"Firmicutes\"     \"Clostridium cluster IV\"   #> Anaerovorax odorimutans et rel.    \"Firmicutes\"     \"Clostridium cluster XI\"   #>                                    Genus                                #> Actinomycetaceae                   \"Actinomycetaceae\"                   #> Atopobium                          \"Atopobium\"                          #> Bifidobacterium                    \"Bifidobacterium\"                    #> Collinsella                        \"Collinsella\"                        #> Corynebacterium                    \"Corynebacterium\"                    #> Eggerthella lenta et rel.          \"Eggerthella lenta et rel.\"          #> Micrococcaceae                     \"Micrococcaceae\"                     #> Propionibacterium                  \"Propionibacterium\"                  #> Allistipes et rel.                 \"Allistipes et rel.\"                 #> Bacteroides fragilis et rel.       \"Bacteroides fragilis et rel.\"       #> Bacteroides intestinalis et rel.   \"Bacteroides intestinalis et rel.\"   #> Bacteroides ovatus et rel.         \"Bacteroides ovatus et rel.\"         #> Bacteroides plebeius et rel.       \"Bacteroides plebeius et rel.\"       #> Bacteroides splachnicus et rel.    \"Bacteroides splachnicus et rel.\"    #> Bacteroides stercoris et rel.      \"Bacteroides stercoris et rel.\"      #> Bacteroides uniformis et rel.      \"Bacteroides uniformis et rel.\"      #> Bacteroides vulgatus et rel.       \"Bacteroides vulgatus et rel.\"       #> Parabacteroides distasonis et rel. \"Parabacteroides distasonis et rel.\" #> Prevotella melaninogenica et rel.  \"Prevotella melaninogenica et rel.\"  #> Prevotella oralis et rel.          \"Prevotella oralis et rel.\"          #> Prevotella ruminicola et rel.      \"Prevotella ruminicola et rel.\"      #> Prevotella tannerae et rel.        \"Prevotella tannerae et rel.\"        #> Tannerella et rel.                 \"Tannerella et rel.\"                 #> Uncultured Bacteroidetes           \"Uncultured Bacteroidetes\"           #> Uncultured Chroococcales           \"Uncultured Chroococcales\"           #> Aerococcus                         \"Aerococcus\"                         #> Anaerofustis                       \"Anaerofustis\"                       #> Anaerostipes caccae et rel.        \"Anaerostipes caccae et rel.\"        #> Anaerotruncus colihominis et rel.  \"Anaerotruncus colihominis et rel.\"  #> Anaerovorax odorimutans et rel.    \"Anaerovorax odorimutans et rel.\"     # sequentially sorting by higher ranks # sets tax_table in nested alphabetical order dietswap %>%   tax_sort(at = \"names\") %>%   tax_sort(at = \"Genus\") %>%   tax_sort(at = \"Family\") %>%   tax_sort(at = \"Phylum\") %>%   tax_table() %>%   head(30) #> Taxonomy Table:     [30 taxa by 3 taxonomic ranks]: #>                                    Phylum           Family           #> Actinomycetaceae                   \"Actinobacteria\" \"Actinobacteria\" #> Atopobium                          \"Actinobacteria\" \"Actinobacteria\" #> Bifidobacterium                    \"Actinobacteria\" \"Actinobacteria\" #> Collinsella                        \"Actinobacteria\" \"Actinobacteria\" #> Corynebacterium                    \"Actinobacteria\" \"Actinobacteria\" #> Eggerthella lenta et rel.          \"Actinobacteria\" \"Actinobacteria\" #> Micrococcaceae                     \"Actinobacteria\" \"Actinobacteria\" #> Propionibacterium                  \"Actinobacteria\" \"Actinobacteria\" #> Allistipes et rel.                 \"Bacteroidetes\"  \"Bacteroidetes\"  #> Bacteroides fragilis et rel.       \"Bacteroidetes\"  \"Bacteroidetes\"  #> Bacteroides intestinalis et rel.   \"Bacteroidetes\"  \"Bacteroidetes\"  #> Bacteroides ovatus et rel.         \"Bacteroidetes\"  \"Bacteroidetes\"  #> Bacteroides plebeius et rel.       \"Bacteroidetes\"  \"Bacteroidetes\"  #> Bacteroides splachnicus et rel.    \"Bacteroidetes\"  \"Bacteroidetes\"  #> Bacteroides stercoris et rel.      \"Bacteroidetes\"  \"Bacteroidetes\"  #> Bacteroides uniformis et rel.      \"Bacteroidetes\"  \"Bacteroidetes\"  #> Bacteroides vulgatus et rel.       \"Bacteroidetes\"  \"Bacteroidetes\"  #> Parabacteroides distasonis et rel. \"Bacteroidetes\"  \"Bacteroidetes\"  #> Prevotella melaninogenica et rel.  \"Bacteroidetes\"  \"Bacteroidetes\"  #> Prevotella oralis et rel.          \"Bacteroidetes\"  \"Bacteroidetes\"  #> Prevotella ruminicola et rel.      \"Bacteroidetes\"  \"Bacteroidetes\"  #> Prevotella tannerae et rel.        \"Bacteroidetes\"  \"Bacteroidetes\"  #> Tannerella et rel.                 \"Bacteroidetes\"  \"Bacteroidetes\"  #> Uncultured Bacteroidetes           \"Bacteroidetes\"  \"Bacteroidetes\"  #> Uncultured Chroococcales           \"Cyanobacteria\"  \"Cyanobacteria\"  #> Asteroleplasma et rel.             \"Firmicutes\"     \"Asteroleplasma\" #> Aerococcus                         \"Firmicutes\"     \"Bacilli\"        #> Aneurinibacillus                   \"Firmicutes\"     \"Bacilli\"        #> Bacillus                           \"Firmicutes\"     \"Bacilli\"        #> Enterococcus                       \"Firmicutes\"     \"Bacilli\"        #>                                    Genus                                #> Actinomycetaceae                   \"Actinomycetaceae\"                   #> Atopobium                          \"Atopobium\"                          #> Bifidobacterium                    \"Bifidobacterium\"                    #> Collinsella                        \"Collinsella\"                        #> Corynebacterium                    \"Corynebacterium\"                    #> Eggerthella lenta et rel.          \"Eggerthella lenta et rel.\"          #> Micrococcaceae                     \"Micrococcaceae\"                     #> Propionibacterium                  \"Propionibacterium\"                  #> Allistipes et rel.                 \"Allistipes et rel.\"                 #> Bacteroides fragilis et rel.       \"Bacteroides fragilis et rel.\"       #> Bacteroides intestinalis et rel.   \"Bacteroides intestinalis et rel.\"   #> Bacteroides ovatus et rel.         \"Bacteroides ovatus et rel.\"         #> Bacteroides plebeius et rel.       \"Bacteroides plebeius et rel.\"       #> Bacteroides splachnicus et rel.    \"Bacteroides splachnicus et rel.\"    #> Bacteroides stercoris et rel.      \"Bacteroides stercoris et rel.\"      #> Bacteroides uniformis et rel.      \"Bacteroides uniformis et rel.\"      #> Bacteroides vulgatus et rel.       \"Bacteroides vulgatus et rel.\"       #> Parabacteroides distasonis et rel. \"Parabacteroides distasonis et rel.\" #> Prevotella melaninogenica et rel.  \"Prevotella melaninogenica et rel.\"  #> Prevotella oralis et rel.          \"Prevotella oralis et rel.\"          #> Prevotella ruminicola et rel.      \"Prevotella ruminicola et rel.\"      #> Prevotella tannerae et rel.        \"Prevotella tannerae et rel.\"        #> Tannerella et rel.                 \"Tannerella et rel.\"                 #> Uncultured Bacteroidetes           \"Uncultured Bacteroidetes\"           #> Uncultured Chroococcales           \"Uncultured Chroococcales\"           #> Asteroleplasma et rel.             \"Asteroleplasma et rel.\"             #> Aerococcus                         \"Aerococcus\"                         #> Aneurinibacillus                   \"Aneurinibacillus\"                   #> Bacillus                           \"Bacillus\"                           #> Enterococcus                       \"Enterococcus\"                        # sort by function e.g. total sum or median abundance dietswap %>%   tax_sort(by = sum) %>%   taxa_names() %>%   head(20) #>  [1] \"Prevotella melaninogenica et rel.\"    #>  [2] \"Oscillospira guillermondii et rel.\"   #>  [3] \"Bacteroides vulgatus et rel.\"         #>  [4] \"Clostridium cellulosi et rel.\"        #>  [5] \"Prevotella oralis et rel.\"            #>  [6] \"Faecalibacterium prausnitzii et rel.\" #>  [7] \"Sporobacter termitidis et rel.\"       #>  [8] \"Clostridium symbiosum et rel.\"        #>  [9] \"Allistipes et rel.\"                   #> [10] \"Clostridium orbiscindens et rel.\"     #> [11] \"Subdoligranulum variable at rel.\"     #> [12] \"Ruminococcus obeum et rel.\"           #> [13] \"Butyrivibrio crossotus et rel.\"       #> [14] \"Bacteroides fragilis et rel.\"         #> [15] \"Akkermansia\"                          #> [16] \"Bacteroides ovatus et rel.\"           #> [17] \"Parabacteroides distasonis et rel.\"   #> [18] \"Dorea formicigenerans et rel.\"        #> [19] \"Bacteroides uniformis et rel.\"        #> [20] \"Dialister\"                             # transform to compositional data (proportions) before sorting # note that abundances are returned untransformed dietswap %>%   tax_sort(by = sum, trans = \"compositional\") %>%   taxa_names() %>%   head(20) #>  [1] \"Prevotella melaninogenica et rel.\"    #>  [2] \"Oscillospira guillermondii et rel.\"   #>  [3] \"Bacteroides vulgatus et rel.\"         #>  [4] \"Clostridium cellulosi et rel.\"        #>  [5] \"Prevotella oralis et rel.\"            #>  [6] \"Faecalibacterium prausnitzii et rel.\" #>  [7] \"Sporobacter termitidis et rel.\"       #>  [8] \"Allistipes et rel.\"                   #>  [9] \"Clostridium symbiosum et rel.\"        #> [10] \"Clostridium orbiscindens et rel.\"     #> [11] \"Ruminococcus obeum et rel.\"           #> [12] \"Subdoligranulum variable at rel.\"     #> [13] \"Bacteroides fragilis et rel.\"         #> [14] \"Butyrivibrio crossotus et rel.\"       #> [15] \"Akkermansia\"                          #> [16] \"Parabacteroides distasonis et rel.\"   #> [17] \"Bacteroides ovatus et rel.\"           #> [18] \"Bacteroides uniformis et rel.\"        #> [19] \"Dialister\"                            #> [20] \"Dorea formicigenerans et rel.\"         # order by descending abundance in a single named sample dietswap %>%   tax_sort(by = \"Sample-1\") %>%   otu_table() %>%   .[1:8, 1:4] #> OTU Table:          [4 taxa and 8 samples] #>                      taxa are columns #>          Bacteroides vulgatus et rel. Oscillospira guillermondii et rel. #> Sample-1                         2774                                861 #> Sample-2                           48                               4697 #> Sample-3                          455                               2915 #> Sample-4                          469                               4279 #> Sample-5                          167                                392 #> Sample-6                           75                                200 #> Sample-7                           33                               2201 #> Sample-8                           85                               1123 #>          Bacteroides fragilis et rel. Bacteroides ovatus et rel. #> Sample-1                          443                        427 #> Sample-2                           21                         15 #> Sample-3                           73                         31 #> Sample-4                           29                         46 #> Sample-5                           33                         29 #> Sample-6                           14                         13 #> Sample-7                           22                         15 #> Sample-8                          560                         19   # sum order should always equal mean order if non-negative abundances # don't forget to add na.rm = TRUE if you expect NAs in otu_table somehow dietswap %>%   tax_sort(by = sum, na.rm = TRUE) %>%   taxa_names() %>%   head(20) #>  [1] \"Prevotella melaninogenica et rel.\"    #>  [2] \"Oscillospira guillermondii et rel.\"   #>  [3] \"Bacteroides vulgatus et rel.\"         #>  [4] \"Clostridium cellulosi et rel.\"        #>  [5] \"Prevotella oralis et rel.\"            #>  [6] \"Faecalibacterium prausnitzii et rel.\" #>  [7] \"Sporobacter termitidis et rel.\"       #>  [8] \"Clostridium symbiosum et rel.\"        #>  [9] \"Allistipes et rel.\"                   #> [10] \"Clostridium orbiscindens et rel.\"     #> [11] \"Subdoligranulum variable at rel.\"     #> [12] \"Ruminococcus obeum et rel.\"           #> [13] \"Butyrivibrio crossotus et rel.\"       #> [14] \"Bacteroides fragilis et rel.\"         #> [15] \"Akkermansia\"                          #> [16] \"Bacteroides ovatus et rel.\"           #> [17] \"Parabacteroides distasonis et rel.\"   #> [18] \"Dorea formicigenerans et rel.\"        #> [19] \"Bacteroides uniformis et rel.\"        #> [20] \"Dialister\"                             # if your phyloseq object has a phylogenetic tree, # tax_sort will remove the tree, and warn you about this # unless you disable that warning with tree_warn = FALSE  # You can sort by abundance at higher taxonomic ranks, # without losing lower rank info # e.g. sort (descending) by phyla abundances dietswap %>%   tax_sort(by = sum, at = \"Phylum\") %>%   tax_table() %>%   head() #> Taxonomy Table:     [6 taxa by 3 taxonomic ranks]: #>                                  Phylum          Family          #> Allistipes et rel.               \"Bacteroidetes\" \"Bacteroidetes\" #> Bacteroides fragilis et rel.     \"Bacteroidetes\" \"Bacteroidetes\" #> Bacteroides intestinalis et rel. \"Bacteroidetes\" \"Bacteroidetes\" #> Bacteroides ovatus et rel.       \"Bacteroidetes\" \"Bacteroidetes\" #> Bacteroides plebeius et rel.     \"Bacteroidetes\" \"Bacteroidetes\" #> Bacteroides splachnicus et rel.  \"Bacteroidetes\" \"Bacteroidetes\" #>                                  Genus                              #> Allistipes et rel.               \"Allistipes et rel.\"               #> Bacteroides fragilis et rel.     \"Bacteroides fragilis et rel.\"     #> Bacteroides intestinalis et rel. \"Bacteroides intestinalis et rel.\" #> Bacteroides ovatus et rel.       \"Bacteroides ovatus et rel.\"       #> Bacteroides plebeius et rel.     \"Bacteroides plebeius et rel.\"     #> Bacteroides splachnicus et rel.  \"Bacteroides splachnicus et rel.\"   # You can sort by ascending abundance (or prevalence etc) by reversing after dietswap %>%   tax_sort(by = \"prev\", at = \"Phylum\") %>%   tax_sort(by = \"rev\") %>%   tax_table() %>%   head() #> Taxonomy Table:     [6 taxa by 3 taxonomic ranks]: #>                             Phylum          Family          #> Uncultured Chroococcales    \"Cyanobacteria\" \"Cyanobacteria\" #> Brachyspira                 \"Spirochaetes\"  \"Spirochaetes\"  #> Fusobacteria                \"Fusobacteria\"  \"Fusobacteria\"  #> Uncultured Bacteroidetes    \"Bacteroidetes\" \"Bacteroidetes\" #> Tannerella et rel.          \"Bacteroidetes\" \"Bacteroidetes\" #> Prevotella tannerae et rel. \"Bacteroidetes\" \"Bacteroidetes\" #>                             Genus                         #> Uncultured Chroococcales    \"Uncultured Chroococcales\"    #> Brachyspira                 \"Brachyspira\"                 #> Fusobacteria                \"Fusobacteria\"                #> Uncultured Bacteroidetes    \"Uncultured Bacteroidetes\"    #> Tannerella et rel.          \"Tannerella et rel.\"          #> Prevotella tannerae et rel. \"Prevotella tannerae et rel.\""},{"path":"https://david-barnett.github.io/microViz/reference/tax_top.html","id":null,"dir":"Reference","previous_headings":"","what":"Get names of ","title":"Get names of ","text":"Simple wrapper around tax_sort : optionally aggregates taxa rank sorts aggregated taxa according returns top n number taxa names","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_top.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get names of ","text":"","code":"tax_top(data, n = 10, by = sum, rank = \"unique\", use_counts = FALSE, ...)"},{"path":"https://david-barnett.github.io/microViz/reference/tax_top.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get names of ","text":"data phyloseq object psExtra n many taxa names return, NA (can return fewer n values, fewer return) sort taxa (see ?tax_sort()), defaults sum sorts total abundance across samples rank taxonomic rank aggregate calculating (\"unique\" = aggregation) use_counts use count data available, instead transformed data ... Arguments passed tax_sort verbose passed phyloseq_validate verbose (TRUE: message suspicious values tax_table, fix) trans name transformation apply taxa sorting (taxa returned un-transformed)","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_top.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get names of ","text":"vector taxa names chosen rank","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/tax_top.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get names of ","text":"","code":"data(\"dietswap\", package = \"microbiome\") tax_top(dietswap) #>  [1] \"Prevotella melaninogenica et rel.\"    #>  [2] \"Oscillospira guillermondii et rel.\"   #>  [3] \"Bacteroides vulgatus et rel.\"         #>  [4] \"Clostridium cellulosi et rel.\"        #>  [5] \"Prevotella oralis et rel.\"            #>  [6] \"Faecalibacterium prausnitzii et rel.\" #>  [7] \"Sporobacter termitidis et rel.\"       #>  [8] \"Clostridium symbiosum et rel.\"        #>  [9] \"Allistipes et rel.\"                   #> [10] \"Clostridium orbiscindens et rel.\"     tax_top(dietswap, n = 4, by = \"prev\", rank = \"Phylum\", undetected = 30) #> [1] \"Firmicutes\"     \"Proteobacteria\" \"Bacteroidetes\"  \"Actinobacteria\""},{"path":"https://david-barnett.github.io/microViz/reference/tax_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform taxa in phyloseq object and record transformation — tax_transform","title":"Transform taxa in phyloseq object and record transformation — tax_transform","text":"Transform taxa features, optionally aggregate specified taxonomic rank beforehand. can pipe results tax_agg tax_transform, equivalently set rank argument tax_transform.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform taxa in phyloseq object and record transformation — tax_transform","text":"","code":"tax_transform(   data,   trans,   rank = NA,   keep_counts = TRUE,   chain = FALSE,   zero_replace = 0,   add = 0,   transformation = NULL,   ... )"},{"path":"https://david-barnett.github.io/microViz/reference/tax_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform taxa in phyloseq object and record transformation — tax_transform","text":"data phyloseq object psExtra output tax_agg trans valid taxa transformation (e.g. microbiome::transform) rank data phyloseq: data aggregated rank transforming. NA, runs tax_agg(data, rank = NA). rank NA data already psExtra, preceding aggregation left . keep_counts TRUE, store pre-transformation count data psExtra counts slot chain TRUE, transforming possible data already transformed .e. multiple transformations can chained multiple tax_transform calls zero_replace Replace zeros value transforming. Either numeric, \"halfmin\" replaces zeros half smallest value across entire dataset. Beware: choice zero replacement tracked psExtra output. add Add value otu_table transforming. add != 0, zero_replace nothing. Either numeric, \"halfmin\". Beware: choice tracked psExtra output. transformation deprecated, use trans instead! ... extra arguments passed microbiome::transform pass undetected = number using trans = \"binary\"","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform taxa in phyloseq object and record transformation — tax_transform","text":"psExtra object including phyloseq extra info","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_transform.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform taxa in phyloseq object and record transformation — tax_transform","text":"function often uses microbiome::transform internally can perform transformations, including many vegan::decostand (default MARGIN = 2). See notes available transformations. tax_transform returns psExtra containing transformed phyloseq object extra info (used annotating ord_plot ordinations): tax_transform (string recording transformation), tax_agg (string recording taxonomic aggregation rank specified earlier tax_agg). commonly used transformations: \"clr\", \"rclr\", perform centered log ratio transformation, robust clr, using microbiome::transform \"compositional\" converts data proportions, 0 1. \"identity\" transform data, records choice ord_plot \"binary\" can used transform tax abundances presence/abundance data. \"log2\" performs log base 2 transformation (forget set zero_replace zeros data)","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_transform.html","id":"-r-clr-transformation-note","dir":"Reference","previous_headings":"","what":"(r)clr transformation note","title":"Transform taxa in phyloseq object and record transformation — tax_transform","text":"values zero, clr transform routine first adds small pseudocount min(relative abundance)/2 values. avoid , can replace zeros advance setting zero_replace number > 0. rclr transform replace zeros. Instead, non-zero features transformed, using geometric mean non-zero features denominator.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/tax_transform.html","id":"binary-transformation-notes","dir":"Reference","previous_headings":"","what":"Binary transformation notes","title":"Transform taxa in phyloseq object and record transformation — tax_transform","text":"default, otu_table values 0 kept 0, positive values converted 1 (like decostand(method = \"pa\")). can set different threshold, passing e.g. undetected = 10, example, case abundances 10 converted 0. abundances 10 converted 1s. Beware choice detection threshold tracked psExtra.","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/tax_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform taxa in phyloseq object and record transformation — tax_transform","text":"","code":"data(\"dietswap\", package = \"microbiome\")  # aggregate taxa at Phylum level and center log ratio transform the phyla counts tax_transform(dietswap, trans = \"clr\", rank = \"Phylum\") #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 8 taxa and 222 samples ] #> sample_data() Sample Data:       [ 222 samples by 8 sample variables ] #> tax_table()   Taxonomy Table:    [ 8 taxa by 1 taxonomic ranks ] #>  #> otu_get(counts = TRUE)\t\t [ 8 taxa and 222 samples ] #>  #> psExtra info: #> tax_agg = \"Phylum\" tax_trans = \"clr\"   # this is equivalent to the two-step method (agg then transform) tax_agg(dietswap, rank = \"Phylum\") %>% tax_transform(\"clr\") #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 8 taxa and 222 samples ] #> sample_data() Sample Data:       [ 222 samples by 8 sample variables ] #> tax_table()   Taxonomy Table:    [ 8 taxa by 1 taxonomic ranks ] #>  #> otu_get(counts = TRUE)\t\t [ 8 taxa and 222 samples ] #>  #> psExtra info: #> tax_agg = \"Phylum\" tax_trans = \"clr\"   # does nothing except record tax_agg as \"unique\" and tax_transform as \"identity\" in psExtra info dietswap %>% tax_transform(\"identity\", rank = NA) #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 130 taxa and 222 samples ] #> sample_data() Sample Data:       [ 222 samples by 8 sample variables ] #> tax_table()   Taxonomy Table:    [ 130 taxa by 4 taxonomic ranks ] #>  #> psExtra info: #> tax_agg = \"unique\" tax_trans = \"identity\"   # binary transformation (convert abundances to presence/absence or detected/undetected) tax_transform(dietswap, trans = \"binary\", rank = \"Genus\") #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 130 taxa and 222 samples ] #> sample_data() Sample Data:       [ 222 samples by 8 sample variables ] #> tax_table()   Taxonomy Table:    [ 130 taxa by 3 taxonomic ranks ] #>  #> otu_get(counts = TRUE)\t\t [ 130 taxa and 222 samples ] #>  #> psExtra info: #> tax_agg = \"Genus\" tax_trans = \"binary\"  # change detection threshold by setting undetected argument (default is 0) tax_transform(dietswap, trans = \"binary\", rank = \"Genus\", undetected = 50) %>%   otu_get() %>%   .[1:6, 1:4] #> OTU Table:          [4 taxa and 6 samples] #>                      taxa are columns #>          Actinomycetaceae Aerococcus Aeromonas Akkermansia #> Sample-1                0          0         0           0 #> Sample-2                0          0         0           1 #> Sample-3                0          0         0           1 #> Sample-4                0          0         0           1 #> Sample-5                0          0         0           0 #> Sample-6                0          0         0           0  # log2 transformation after replacing all zeros with a pseudocount of 1 tax_transform(dietswap, trans = \"log2\", rank = \"Family\", zero_replace = 1) #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 22 taxa and 222 samples ] #> sample_data() Sample Data:       [ 222 samples by 8 sample variables ] #> tax_table()   Taxonomy Table:    [ 22 taxa by 2 taxonomic ranks ] #>  #> otu_get(counts = TRUE)\t\t [ 22 taxa and 222 samples ] #>  #> psExtra info: #> tax_agg = \"Family\" tax_trans = \"log2\"   # log2 transformation after replacing all zeros with a pseudocount of half # the minimum non-zero count value in the aggregated dataset tax_transform(dietswap, trans = \"log2\", rank = \"Family\", zero_replace = \"halfmin\") #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 22 taxa and 222 samples ] #> sample_data() Sample Data:       [ 222 samples by 8 sample variables ] #> tax_table()   Taxonomy Table:    [ 22 taxa by 2 taxonomic ranks ] #>  #> otu_get(counts = TRUE)\t\t [ 22 taxa and 222 samples ] #>  #> psExtra info: #> tax_agg = \"Family\" tax_trans = \"log2\""},{"path":"https://david-barnett.github.io/microViz/reference/taxatreePruneLabelArgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper, removes unwanted arguments from geom_* call args list — taxatreePruneLabelArgs","title":"Helper, removes unwanted arguments from geom_* call args list — taxatreePruneLabelArgs","text":"Helper, removes unwanted arguments geom_* call args list","code":""},{"path":"https://david-barnett.github.io/microViz/reference/taxatreePruneLabelArgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper, removes unwanted arguments from geom_* call args list — taxatreePruneLabelArgs","text":"","code":"taxatreePruneLabelArgs(fun, args)"},{"path":"https://david-barnett.github.io/microViz/reference/taxatreePruneLabelArgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper, removes unwanted arguments from geom_* call args list — taxatreePruneLabelArgs","text":"fun function name function e.g. geom_label_repel args named list args","code":""},{"path":"https://david-barnett.github.io/microViz/reference/taxatreePruneLabelArgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper, removes unwanted arguments from geom_* call args list — taxatreePruneLabelArgs","text":"args list possibly elements removed","code":""},{"path":"https://david-barnett.github.io/microViz/reference/taxatreePruneLabelArgs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper, removes unwanted arguments from geom_* call args list — taxatreePruneLabelArgs","text":"","code":"microViz:::taxatreePruneLabelArgs(fun = \"geom_label\", args = list(size = 2, seed = 2)) #> $size #> [1] 2 #>  microViz:::taxatreePruneLabelArgs(fun = library, args = list(size = 2, seed = 2)) #> $size #> [1] 2 #>  #> $seed #> [1] 2 #>"},{"path":"https://david-barnett.github.io/microViz/reference/taxatree_funs.html","id":null,"dir":"Reference","previous_headings":"","what":"Create node and edge dataframes for taxatree_plots — taxatree_funs","title":"Create node and edge dataframes for taxatree_plots — taxatree_funs","text":"Mostly use functions directly: instead call taxatree_plots output taxatree_stats taxatree_nodes creates taxon nodes calculates summary statistic taxon (given fun). Takes psExtra phyloseq object. taxatree_edges uses output taxatree_nodes create dataframe edges.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/taxatree_funs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create node and edge dataframes for taxatree_plots — taxatree_funs","text":"","code":"taxatree_nodes(   ps,   fun = list(sum = sum),   ranks = \"all\",   .sort = NULL,   .use_counts = TRUE )  taxatree_edges(nodes_df)"},{"path":"https://david-barnett.github.io/microViz/reference/taxatree_funs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create node and edge dataframes for taxatree_plots — taxatree_funs","text":"ps phyloseq object psExtra fun function calculate taxon/node ranks selection taxonomic ranks make nodes (\"\", names) .sort sort nodes \"increasing\" \"decreasing\" values fun function result .use_counts use count data available (instead transformed data) nodes_df dataframe output taxatree_nodes","code":""},{"path":"https://david-barnett.github.io/microViz/reference/taxatree_funs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create node and edge dataframes for taxatree_plots — taxatree_funs","text":"taxatree_nodes makes nodes taxa ranks list consecutive ranks (plus root rank tree rooted).","code":""},{"path":"https://david-barnett.github.io/microViz/reference/taxatree_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Add logical label column to taxatree_stats dataframe — taxatree_label","title":"Add logical label column to taxatree_stats dataframe — taxatree_label","text":"taxatree_label used internally taxatree_plotkey, can also used prior taxatree_plots label plots directly ... arguments passed dplyr::filter(), filter syntax can used.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/taxatree_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add logical label column to taxatree_stats dataframe — taxatree_label","text":"","code":"taxatree_label(   data,   ...,   .label_var = \"label\",   .node_fun = list(prevalence = prev) )"},{"path":"https://david-barnett.github.io/microViz/reference/taxatree_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add logical label column to taxatree_stats dataframe — taxatree_label","text":"data psExtra (phyloseq) ... REQUIRED logical conditions labelling e.g. rank == \"Phylum\", p.value < 0.1 | taxon %% listOfTaxa .label_var name label indicator variable created. change , beware taxatree_plotkey work, need called taxatree_plot_label .node_fun named list length 1 providing taxatree_nodes fun arg. (name list iterm available use ...)","code":""},{"path":"https://david-barnett.github.io/microViz/reference/taxatree_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add logical label column to taxatree_stats dataframe — taxatree_label","text":"psExtra (modified) taxatree_stats dataframe","code":""},{"path":"https://david-barnett.github.io/microViz/reference/taxatree_label.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add logical label column to taxatree_stats dataframe — taxatree_label","text":"taxatree_stats missing (data phyloseq) create plain taxatree_stats dataframe using taxatree_nodes node_fun can also precalculated dataframe (output taxatree_nodes) probably use option. used internally efficiency inside taxatree_plotkey()","code":""},{"path":"https://david-barnett.github.io/microViz/reference/taxatree_label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add logical label column to taxatree_stats dataframe — taxatree_label","text":"","code":"# simple example with plain phyloseq input data(\"dietswap\", package = \"microbiome\") labelled <- dietswap %>%   tax_prepend_ranks() %>%   taxatree_label(rank == \"Phylum\", prevalence > 0.1)  # Note that \"prevalence\" column was available in data # because it is created by `taxatree_nodes()` using the named function # provided to the `node_fun` argument  # psExtra is returned labelled #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 130 taxa and 222 samples ] #> sample_data() Sample Data:       [ 222 samples by 8 sample variables ] #> tax_table()   Taxonomy Table:    [ 130 taxa by 3 taxonomic ranks ] #>  #>  #> taxatree_stats dataframe: #> 161 taxa at 4 ranks: root, Phylum, Family, Genus  #> 0 terms:   # notice how both conditions must be met for label column to be TRUE labelled %>% taxatree_stats_get() #> # A tibble: 161 × 5 #>    taxon              parent            rank   prevalence label #>    <chr>              <chr>             <chr>       <dbl> <lgl> #>  1 root               root              root       1      FALSE #>  2 P: Actinobacteria  root              Phylum     1      TRUE  #>  3 P: Firmicutes      root              Phylum     1      TRUE  #>  4 P: Proteobacteria  root              Phylum     1      TRUE  #>  5 P: Verrucomicrobia root              Phylum     1      TRUE  #>  6 P: Bacteroidetes   root              Phylum     1      TRUE  #>  7 P: Spirochaetes    root              Phylum     0.0811 FALSE #>  8 P: Fusobacteria    root              Phylum     1      TRUE  #>  9 P: Cyanobacteria   root              Phylum     0.0180 FALSE #> 10 F: Actinobacteria  P: Actinobacteria Family     1      FALSE #> # ℹ 151 more rows"},{"path":"https://david-barnett.github.io/microViz/reference/taxatree_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Statistical modelling for individual taxa across multiple ranks — taxatree_models","title":"Statistical modelling for individual taxa across multiple ranks — taxatree_models","text":"taxatree_models runs tax_model every taxon multiple taxonomic ranks (choose ranks plural ranks argument). returns results named nested list models attached psExtra object. One list per rank, one model per taxon rank. result can used taxatree_models2stats extract dataframe statistics use taxatree_plots.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/taxatree_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Statistical modelling for individual taxa across multiple ranks — taxatree_models","text":"","code":"taxatree_models(   ps,   ranks = NULL,   type = \"lm\",   variables = NULL,   formula = NULL,   use_future = FALSE,   checkVars = TRUE,   checkNA = \"warning\",   verbose = \"rank\",   trans = \"identity\",   trans_args = list(),   ... )"},{"path":"https://david-barnett.github.io/microViz/reference/taxatree_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Statistical modelling for individual taxa across multiple ranks — taxatree_models","text":"ps phyloseq object psExtra ranks vector rank names aggregate taxa modelling type name regression modelling function, function variables vector variable names, used model formula right hand side. variables list, vector, model fit entry list. formula Right hand side formula, formula object character string. list . (alternative variables argument, provide ) use_future TRUE parallel processing future possible, see details ?tax_model. checkVars check variance variables? checkNA check variables NAs? verbose message progress: \"rank\" notifies rank processed; TRUE notifies taxon processed; FALSE messages. trans name tax_transform transformation apply aggregated taxa fitting statistical models trans_args named list additional arguments tax_transform e.g. list(zero_replace = \"halfmin\") ... extra arguments passed directly modelling function","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/taxatree_plot_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Add labels to taxatree plots/key — taxatree_plot_labels","title":"Add labels to taxatree plots/key — taxatree_plot_labels","text":"Finer control label drawing taxatree_plotkey (.draw_label = FALSE), label drawing taxatree_plots output .","code":""},{"path":"https://david-barnett.github.io/microViz/reference/taxatree_plot_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add labels to taxatree plots/key — taxatree_plot_labels","text":"","code":"taxatree_plot_labels(   p,   circular = TRUE,   taxon_renamer = identity,   fun = ggrepel::geom_text_repel,   label_var = \"label\",   x_nudge = 0.1,   y_nudge = 0.025,   rotate = 0,   fontface = \"bold\",   size = 2.5,   colour = \"grey15\",   max.overlaps = Inf,   min.segment.length = 0,   segment.size = 0.15,   segment.color = \"grey15\",   point.padding = 0.05,   box.padding = 0.1,   seed = NA,   ... )"},{"path":"https://david-barnett.github.io/microViz/reference/taxatree_plot_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add labels to taxatree plots/key — taxatree_plot_labels","text":"p taxatree_plotkey taxatree_plots output plot circular plot layout circular? labels drawn differently circular trees taxon_renamer function takes taxon names returns modified names labels fun ggrepel labelling function: geom_text_repel geom_label_repel label_var name variable taxatree_stats indicates taxa label x_nudge absolute amount initial position taxon labels nudged (relevant circular layouts, use nudge_x layouts) y_nudge absolute amount initial position taxon labels nudged (relevant circular layouts, use nudge_y layouts) rotate angle rotate labels' outer edges away horizontal (relevant circular layouts, use angle layouts) fontface fontface label text size size labels colour colour label outlines text max.overlaps max number overlapping labels tolerated min.segment.length min length label line segment bother drawing segment.size thickness line segment segment.color colour line segment point.padding padding around node points (label positioning) box.padding padding around labels/text (label positioning) seed set reproducible label positions ... Arguments passed ggrepel::geom_text_repel arrow specification arrow heads, created arrow force Force repulsion overlapping text labels. Defaults 1. force_pull Force attraction text label corresponding data point. Defaults 1. max.time Maximum number seconds try resolve overlaps. Defaults 0.5. max.iter Maximum number iterations try resolve overlaps. Defaults 10000. xlim,ylim Limits x y axes. Text labels constrained limits. default, text labels constrained entire plot area. direction \"\", \"x\", \"y\" – direction adjust position labels verbose TRUE, diagnostics repel algorithm printed","code":""},{"path":"https://david-barnett.github.io/microViz/reference/taxatree_plotkey.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw labelled key to accompany taxatree_plots — taxatree_plotkey","title":"Draw labelled key to accompany taxatree_plots — taxatree_plotkey","text":"Draw labelled key accompany taxatree_plots","code":""},{"path":"https://david-barnett.github.io/microViz/reference/taxatree_plotkey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw labelled key to accompany taxatree_plots — taxatree_plotkey","text":"","code":"taxatree_plotkey(   data,   ...,   size_stat = list(prevalence = prev),   node_size_range = c(1.5, 5),   edge_width_range = node_size_range * 0.8,   size_guide = \"none\",   size_trans = \"identity\",   colour = \"lightgrey\",   edge_alpha = 0.7,   title = \"Key\",   title_size = 14,   taxon_renamer = identity,   .combine_label = any,   .draw_label = TRUE,   .calc_label = TRUE,   layout = \"tree\",   layout_seed = NA,   circular = identical(layout, \"tree\"),   node_sort = NULL,   add_circles = isTRUE(circular),   drop_ranks = TRUE )"},{"path":"https://david-barnett.github.io/microViz/reference/taxatree_plotkey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw labelled key to accompany taxatree_plots — taxatree_plotkey","text":"data psExtra (phyloseq) ... logical conditions labelling e.g. rank == \"Phylum\", p.value < 0.1 | taxon %% listOfTaxa size_stat named list length 1, giving function calculated taxon, determine size nodes (edges). Name used size legend title. node_size_range min max node sizes, decrease avoid node overlap edge_width_range min max edge widths size_guide guide node sizes, try \"none\", \"legend\" ggplot2::guide_legend() size_trans transformation size scale can use (name ) transformer scales package, \"identity\", \"log1p\", \"sqrt\" colour fixed colour fill nodes edges edge_alpha fixed alpha value edges title title plot (NULL none) title_size font size title taxon_renamer function takes taxon names returns modified names labels .combine_label : function combine multiple logical \"label\" values taxon (relevant taxatree_stats already present data) .draw_label labels drawn, just bare tree, set FALSE want draw customised labels taxatree_plot_labels afterwards .calc_label already set labels taxatree_label: set FALSE use / avoid overwriting data (ignores ... FALSE) layout ggraph layout, default \"tree\" layout_seed numeric, required stochastic igraph layout named circular layout circular? node_sort sort nodes \"increasing\" \"decreasing\" size? NULL sorting. Use tax_sort() taxatree_plots() finer control. add_circles add faint concentric circles plot, behind rank? drop_ranks drop ranks tree included stats dataframe","code":""},{"path":"https://david-barnett.github.io/microViz/reference/taxatree_plotkey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw labelled key to accompany taxatree_plots — taxatree_plotkey","text":"ggplot","code":""},{"path":"https://david-barnett.github.io/microViz/reference/taxatree_plotkey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw labelled key to accompany taxatree_plots — taxatree_plotkey","text":"","code":"library(ggplot2) # Normally you make a key to accompany taxatree_plots showing stats results # So see ?taxatree_plots examples too! # # You can also use the taxatree key visualization just to help understand your # tax_table contents and hierarchical structure shao19 %>%   ps_filter(family_id %in% 1:5) %>%   tax_filter(min_prevalence = 7) %>%   tax_fix() %>%   tax_agg(\"genus\") %>%   tax_prepend_ranks() %>%   taxatree_plotkey(rank %in% c(\"phylum\", \"genus\"))    # # Let's look at some of the most prevalent Actinobacteria actinoOnlyPhylo <- shao19 %>%   tax_select(\"Actinobacteria\", ranks_searched = \"phylum\") %>%   tax_filter(min_prevalence = 100)  actinoOnlyPhylo %>%   tax_mutate(order = NULL) %>%   tax_sort(by = \"prev\", at = \"species\", tree_warn = FALSE) %>%   taxatree_plotkey(     circular = FALSE, rank != \"genus\",     .draw_label = FALSE, # suppress drawing now so we can make custom labels after     size_guide = \"legend\", colour = \"skyblue\", edge_alpha = 0.2   ) %>%   taxatree_plot_labels(     circular = FALSE, # be sure you match the plotkey layout     fun = geom_text, fontface = \"bold.italic\", size = 2.5, hjust = 0,     nudge_y = 0.1 # nudge y if you want to nudge x (due to coord_flip!)   ) +   coord_flip(clip = \"off\") +   scale_y_reverse(expand = expansion(add = c(0.2, 2))) +   theme(legend.position = c(0.15, 0.25), legend.background = element_rect())    # You can even choose other tree layouts from igraph (e.g. kk) # and configure multiple styles of custom labels on one plot set.seed(1) # set seed for reproducibility of ggrepel label positions actinoOnlyPhylo %>%   tax_mutate(order = NULL) %>%   taxatree_label(rank == \"family\", .label_var = \"family_lab\") %>%   taxatree_label(rank == \"species\", .label_var = \"species_lab\") %>%   taxatree_plotkey(     circular = FALSE, rank != \"genus\", layout = \"kk\",     .draw_label = FALSE, # important not to draw the default labels     colour = \"skyblue\", edge_alpha = 0.2   ) %>%   taxatree_plot_labels(     circular = FALSE, label_var = \"family_lab\", fun = geom_label,     fontface = \"bold.italic\", colour = \"orange\", fill = \"black\", size = 3   ) %>%   taxatree_plot_labels(     circular = FALSE, label_var = \"species_lab\", fun = ggrepel::geom_text_repel,     fontface = \"bold.italic\", size = 2, force = 20, max.time = 0.1   )"},{"path":"https://david-barnett.github.io/microViz/reference/taxatree_plots.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot statistical model results for all taxa on a taxonomic tree — taxatree_plots","title":"Plot statistical model results for all taxa on a taxonomic tree — taxatree_plots","text":"Uses psExtra object make tree graph structure taxonomic table. adds statistical results stored \"taxatree_stats\" psExtra data must use taxatree_models() first generate statistical model results. can adjust p-values taxatree_stats_p_adjust()","code":""},{"path":"https://david-barnett.github.io/microViz/reference/taxatree_plots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot statistical model results for all taxa on a taxonomic tree — taxatree_plots","text":"","code":"taxatree_plots(   data,   colour_stat = \"estimate\",   palette = \"Green-Brown\",   reverse_palette = FALSE,   colour_lims = NULL,   colour_oob = scales::oob_squish,   colour_trans = \"abs_sqrt\",   size_stat = list(prevalence = prev),   node_size_range = c(1, 4),   edge_width_range = node_size_range * 0.8,   size_guide = \"legend\",   size_trans = \"identity\",   sig_stat = \"p.value\",   sig_threshold = 0.05,   sig_shape = \"circle filled\",   sig_size = 0.75,   sig_stroke = 0.75,   sig_colour = \"white\",   edge_alpha = 0.7,   vars = \"term\",   var_renamer = identity,   title_size = 10,   layout = \"tree\",   layout_seed = NA,   circular = identical(layout, \"tree\"),   node_sort = NULL,   add_circles = isTRUE(circular),   drop_ranks = TRUE,   l1 = if (palette == \"Green-Brown\") 10 else NULL,   l2 = if (palette == \"Green-Brown\") 85 else NULL,   colour_na = \"grey35\" )"},{"path":"https://david-barnett.github.io/microViz/reference/taxatree_plots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot statistical model results for all taxa on a taxonomic tree — taxatree_plots","text":"data psExtra taxatree_stats, e.g. output taxatree_models2stats() colour_stat name variable scale colour/fill nodes edges palette diverging hcl colour palette name colorspace::hcl_palettes(\"diverging\") reverse_palette reverse direction colour palette? colour_lims limits colour fill scale, NULL infer lims range data colour_oob scales function handle colour_stat values outside colour_lims (default simply squishes \"bounds\" values given range) colour_trans name transformation colour scale: default \"abs_sqrt\", square-root absolute values, can use name transformer scales package, \"identity\" \"exp\" size_stat named list length 1, giving function calculated taxon, determine size nodes (edges). Name used size legend title. node_size_range min max node sizes, decrease avoid node overlap edge_width_range min max edge widths size_guide guide node sizes, try \"none\", \"legend\" ggplot2::guide_legend() size_trans transformation size scale can use (name ) transformer scales package, \"identity\", \"log1p\", \"sqrt\" sig_stat name variable indicating statistical significance sig_threshold value sig_stat variable indicating statistical significance () sig_shape fixed shape significance marker sig_size fixed size significance marker sig_stroke fixed stroke width significance marker sig_colour fixed colour significance marker (used fill filled shapes) edge_alpha fixed alpha value edges vars name column indicating terms models (one plot made per term) var_renamer function rename variables plot titles title_size font size title layout ggraph layout, default \"tree\" layout_seed numeric, required stochastic igraph layout named circular layout circular? node_sort sort nodes \"increasing\" \"decreasing\" size? NULL sorting. Use tax_sort() taxatree_plots() finer control. add_circles add faint concentric circles plot, behind rank? drop_ranks drop ranks tree included stats dataframe l1 Luminance value scale endpoints, NULL palette's default l2 Luminance value scale midpoint, NULL palette's default colour_na colour NA values tree. (unused ranks dropped, NA values colour_stat)","code":""},{"path":"https://david-barnett.github.io/microViz/reference/taxatree_plots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot statistical model results for all taxa on a taxonomic tree — taxatree_plots","text":"list ggraph ggplots","code":""},{"path":"https://david-barnett.github.io/microViz/reference/taxatree_plots.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot statistical model results for all taxa on a taxonomic tree — taxatree_plots","text":"taxatree_plotkey plots layout taxatree_plots, fixed colour See website article examples use: https://david-barnett.github.io/microViz/articles/web-/modelling-taxa.html Uses ggraph, see help main underlying graphing function ?ggraph::ggraph possible provide multiple significance markers multiple thresholds, passing vectors sig_shape, sig_threshold, etc. arguments. critically important thresholds provided decreasing order severity, e.g. sig_threshold = c(0.001, 0.01, 0.1) must provide shape value .","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/taxatree_plots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot statistical model results for all taxa on a taxonomic tree — taxatree_plots","text":"","code":"# Limited examples, see website article for more  library(dplyr) library(ggplot2)  data(dietswap, package = \"microbiome\") ps <- dietswap  # create some binary variables for easy visualisation ps <- ps %>% ps_mutate(   female = if_else(sex == \"female\", 1, 0, NaN),   african = if_else(nationality == \"AFR\", 1, 0, NaN) )  # This example dataset has some taxa with the same name for phylum and family... # We can fix problems like this with the tax_prepend_ranks function # (This will always happen with Actinobacteria!) ps <- tax_prepend_ranks(ps)  # filter out rare taxa ps <- ps %>% tax_filter(   min_prevalence = 0.5, prev_detection_threshold = 100 ) #> Proportional min_prevalence given: 0.5 --> min 111/222 samples.  # delete the Family rank as we will not use it for this small example # this is necessary as taxatree_plots can only plot consecutive ranks ps <- ps %>% tax_mutate(Family = NULL)  # specify variables used for modelling models <- taxatree_models(   ps = ps, type = corncob::bbdml, ranks = c(\"Phylum\", \"Genus\"),   formula = ~ female + african, verbose = TRUE ) #> 2025-04-14 11:44:19.48083 - modelling at rank: Phylum #> Modelling: P: Bacteroidetes #> Modelling: P: Firmicutes #> 2025-04-14 11:44:19.627546 - modelling at rank: Genus #> Modelling: G: Allistipes et rel. #> Modelling: G: Bacteroides vulgatus et rel. #> Modelling: G: Butyrivibrio crossotus et rel. #> Modelling: G: Clostridium cellulosi et rel. #> Modelling: G: Clostridium orbiscindens et rel. #> Modelling: G: Clostridium symbiosum et rel. #> Modelling: G: Faecalibacterium prausnitzii et rel. #> Modelling: G: Oscillospira guillermondii et rel. #> Modelling: G: Prevotella melaninogenica et rel. #> Modelling: G: Prevotella oralis et rel. #> Modelling: G: Ruminococcus obeum et rel. #> Modelling: G: Sporobacter termitidis et rel. #> Modelling: G: Subdoligranulum variable at rel. # models list stored as attachment in psExtra models #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 13 taxa and 222 samples ] #> sample_data() Sample Data:       [ 222 samples by 10 sample variables ] #> tax_table()   Taxonomy Table:    [ 13 taxa by 2 taxonomic ranks ] #>  #>  #> taxatree_models list: #> Ranks: Phylum/Genus  # get stats from models stats <- taxatree_models2stats(models, param = \"mu\") stats #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 13 taxa and 222 samples ] #> sample_data() Sample Data:       [ 222 samples by 10 sample variables ] #> tax_table()   Taxonomy Table:    [ 13 taxa by 2 taxonomic ranks ] #>  #>  #> taxatree_stats dataframe: #> 15 taxa at 2 ranks: Phylum, Genus  #> 2 terms: female, african  plots <- taxatree_plots(   data = stats, colour_trans = \"identity\",   size_stat = list(mean = mean),   size_guide = \"legend\", node_size_range = c(1, 6) )  # if you change the size_stat for the plots, do the same for the key!! key <- taxatree_plotkey(   data = stats,   rank == \"Phylum\" | p.value < 0.05, # labelling criteria   .combine_label = all, # label only taxa where criteria met for both plots   size_stat = list(mean = mean),   node_size_range = c(2, 7), size_guide = \"none\",   taxon_renamer = function(x) {     stringr::str_remove_all(x, \"[PG]: | [ae]t rel.\")   } )  # cowplot is powerful for arranging trees and key and colourbar legend legend <- cowplot::get_legend(plots[[1]]) #> Warning: Multiple components found; returning the first one. To return all, use `return_all = TRUE`. plot_col <- cowplot::plot_grid(   plots[[1]] + theme(legend.position = \"none\"),   plots[[2]] + theme(legend.position = \"none\"),   ncol = 1 ) cowplot::plot_grid(key, plot_col, legend, nrow = 1, rel_widths = c(4, 2, 1))"},{"path":"https://david-barnett.github.io/microViz/reference/taxatree_stats_p_adjust.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust p values in taxatree_stats dataframe — taxatree_stats_p_adjust","title":"Adjust p values in taxatree_stats dataframe — taxatree_stats_p_adjust","text":"Apply p value adjustment method stats::p.adjust.methods, false-discovery rate adjustment \"BH\", conservative family-wise error rate controlling methods \"holm\" \"bonferroni\".","code":""},{"path":"https://david-barnett.github.io/microViz/reference/taxatree_stats_p_adjust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust p values in taxatree_stats dataframe — taxatree_stats_p_adjust","text":"","code":"taxatree_stats_p_adjust(   data,   method,   grouping = \"rank\",   p = \"p.value\",   new_var = NULL )"},{"path":"https://david-barnett.github.io/microViz/reference/taxatree_stats_p_adjust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust p values in taxatree_stats dataframe — taxatree_stats_p_adjust","text":"data psExtra taxatree_stats dataframe, just dataframe method method stats::p.adjust.methods grouping defines grouping p-values families adjustment, see details. p name variable containing p values adjustment new_var name new variable created adjusted p values (automatically inferred default)","code":""},{"path":"https://david-barnett.github.io/microViz/reference/taxatree_stats_p_adjust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust p values in taxatree_stats dataframe — taxatree_stats_p_adjust","text":"psExtra dataframe statistics, just data.frame","code":""},{"path":"https://david-barnett.github.io/microViz/reference/taxatree_stats_p_adjust.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adjust p values in taxatree_stats dataframe — taxatree_stats_p_adjust","text":"Define group p values adjustment grouping argument. default adjust p values groups taxonomic rank, also adjust per \"taxon\" per \"term\". even group combination rank term c(\"rank\", \"term\"). specify name new variable containing adjusted p values new_var argument. left NULL new variable name created pasting together p.adj, method, grouping variable(s) separated \".\".","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/reference/taxatree_stats_p_adjust.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjust p values in taxatree_stats dataframe — taxatree_stats_p_adjust","text":"","code":"# This example is an abbreviated excerpt from article on taxon modelling on # the microViz documentation website  library(corncob) library(dplyr) data(\"ibd\", package = \"microViz\")  # We'll keep only the Ulcerative Colitis and Healthy Control samples, to # simplify the analyses for this example. We'll also remove the Species # rank information, as most OTUs in this dataset are not assigned to a # species. We'll also use `tax_fix` to fill any gaps where the Genus is # unknown, with the family name or whatever higher rank classification is # known.  phylo <- ibd %>%   ps_filter(DiseaseState %in% c(\"UC\", \"nonIBD\")) %>%   tax_mutate(Species = NULL) %>%   tax_fix()  # Let's make some sample data variables that are easier to use and compare # in the statistical modelling ahead. We will convert dichotomous # categorical variables into similar binary variables (values: 1 for true, # or 0 for false). We will also scale and center the numeric variable for # age.  phylo <- phylo %>%   ps_mutate(     UC = ifelse(DiseaseState == \"UC\", yes = 1, no = 0),     female = ifelse(gender == \"female\", yes = 1, no = 0),     antibiotics = ifelse(abx == \"abx\", yes = 1, no = 0),     steroids = ifelse(steroids == \"steroids\", yes = 1, no = 0),     age_scaled = scale(age, center = TRUE, scale = TRUE)   )  bb_models <- phylo %>%   tax_fix() %>%   tax_prepend_ranks() %>%   tax_filter(min_prevalence = 0.3) %>%   taxatree_models(     type = corncob::bbdml,     ranks = c(\"Phylum\", \"Class\", \"Order\"),     variables = c(\"UC\", \"female\", \"antibiotics\", \"steroids\", \"age_scaled\")   ) #> Proportional min_prevalence given: 0.3 --> min 21/67 samples. #> 2025-04-14 11:44:23.839807 - modelling at rank: Phylum #> 2025-04-14 11:44:23.962372 - modelling at rank: Class #> 2025-04-14 11:44:24.134817 - modelling at rank: Order  bb_stats <- bb_models %>%   taxatree_models2stats(param = \"mu\") %>%   taxatree_stats_p_adjust(method = \"BH\", grouping = \"rank\")  bb_stats #> psExtra object - a phyloseq object with extra slots: #>  #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 105 taxa and 67 samples ] #> sample_data() Sample Data:       [ 67 samples by 19 sample variables ] #> tax_table()   Taxonomy Table:    [ 105 taxa by 6 taxonomic ranks ] #>  #>  #> taxatree_stats dataframe: #> 19 taxa at 3 ranks: Phylum, Class, Order  #> 5 terms: UC, female, antibiotics, steroids, age_scaled  bb_stats %>% taxatree_stats_get() #> # A tibble: 95 × 10 #> # Groups:   rank [3] #>    term     taxon rank  formula parameter estimate std.error t.statistic p.value #>    <fct>    <chr> <fct> <chr>   <chr>        <dbl>     <dbl>       <dbl>   <dbl> #>  1 UC       P: F… Phyl… `P: Fi… mu         -0.375      0.434     -0.864    0.392 #>  2 female   P: F… Phyl… `P: Fi… mu          0.0227     0.309      0.0734   0.942 #>  3 antibio… P: F… Phyl… `P: Fi… mu         -0.781      0.478     -1.63     0.108 #>  4 steroids P: F… Phyl… `P: Fi… mu         -0.162      0.426     -0.380    0.705 #>  5 age_sca… P: F… Phyl… `P: Fi… mu          0.294      0.188      1.56     0.124 #>  6 UC       P: B… Phyl… `P: Ba… mu         -0.814      0.558     -1.46     0.150 #>  7 female   P: B… Phyl… `P: Ba… mu         -0.559      0.349     -1.60     0.115 #>  8 antibio… P: B… Phyl… `P: Ba… mu         -0.116      0.706     -0.164    0.871 #>  9 steroids P: B… Phyl… `P: Ba… mu         -0.130      0.656     -0.197    0.844 #> 10 age_sca… P: B… Phyl… `P: Ba… mu         -0.0967     0.264     -0.366    0.716 #> # ℹ 85 more rows #> # ℹ 1 more variable: p.adj.BH.rank <dbl>  # you can also directly modify the dataframe, # and choose a different variable name bb_stats %>%   taxatree_stats_get() %>%   taxatree_stats_p_adjust(     method = \"holm\", grouping = \"taxon\", new_var = \"p_adj_holm\"   ) #> # A tibble: 95 × 11 #> # Groups:   taxon [19] #>    term     taxon rank  formula parameter estimate std.error t.statistic p.value #>    <fct>    <chr> <fct> <chr>   <chr>        <dbl>     <dbl>       <dbl>   <dbl> #>  1 UC       P: F… Phyl… `P: Fi… mu         -0.375      0.434     -0.864    0.392 #>  2 female   P: F… Phyl… `P: Fi… mu          0.0227     0.309      0.0734   0.942 #>  3 antibio… P: F… Phyl… `P: Fi… mu         -0.781      0.478     -1.63     0.108 #>  4 steroids P: F… Phyl… `P: Fi… mu         -0.162      0.426     -0.380    0.705 #>  5 age_sca… P: F… Phyl… `P: Fi… mu          0.294      0.188      1.56     0.124 #>  6 UC       P: B… Phyl… `P: Ba… mu         -0.814      0.558     -1.46     0.150 #>  7 female   P: B… Phyl… `P: Ba… mu         -0.559      0.349     -1.60     0.115 #>  8 antibio… P: B… Phyl… `P: Ba… mu         -0.116      0.706     -0.164    0.871 #>  9 steroids P: B… Phyl… `P: Ba… mu         -0.130      0.656     -0.197    0.844 #> 10 age_sca… P: B… Phyl… `P: Ba… mu         -0.0967     0.264     -0.366    0.716 #> # ℹ 85 more rows #> # ℹ 2 more variables: p.adj.BH.rank <dbl>, p_adj_holm <dbl>  # see all available adjustment methods stats::p.adjust.methods #> [1] \"holm\"       \"hochberg\"   \"hommel\"     \"bonferroni\" \"BH\"         #> [6] \"BY\"         \"fdr\"        \"none\""},{"path":"https://david-barnett.github.io/microViz/reference/upgrade_ps_extra_to_psExtra.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert old format ","title":"Convert old format ","text":"necessary saved old format \"ps_extra\" objects generated old microViz version (< 0.10.0), want regenerate old format objects original phyloseq object.","code":""},{"path":"https://david-barnett.github.io/microViz/reference/upgrade_ps_extra_to_psExtra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert old format ","text":"","code":"upgrade_ps_extra_to_psExtra(ps_extra)"},{"path":"https://david-barnett.github.io/microViz/reference/upgrade_ps_extra_to_psExtra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert old format ","text":"ps_extra old format \"ps_extra\" object, generated old microViz versions (< 0.10.0)","code":""},{"path":"https://david-barnett.github.io/microViz/reference/upgrade_ps_extra_to_psExtra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert old format ","text":"new format \"psExtra\" S4 object","code":""},{"path":"https://david-barnett.github.io/microViz/reference/upgrade_ps_extra_to_psExtra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert old format ","text":"","code":"# read your old saved 'ps_extra' object that you want to keep using # oldObject <- readRDS(\"old-object-path.rds\") # newObject <- upgrade_ps_extra_to_psExtra(oldObject) # continue with your next analysis or plotting steps..."},{"path":"https://david-barnett.github.io/microViz/reference/varAnnotation.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to specify a HeatmapAnnotation for variables in cor_heatmap — varAnnotation","title":"Helper to specify a HeatmapAnnotation for variables in cor_heatmap — varAnnotation","text":"Helper specify HeatmapAnnotation variables cor_heatmap","code":""},{"path":"https://david-barnett.github.io/microViz/reference/varAnnotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to specify a HeatmapAnnotation for variables in cor_heatmap — varAnnotation","text":"","code":"varAnnotation(   ...,   name,   annotation_legend_param = list(),   show_legend = TRUE,   gp = grid::gpar(col = NA),   border = FALSE,   gap = grid::unit(2, \"mm\"),   show_annotation_name = TRUE,   annotation_label = NULL,   annotation_name_gp = grid::gpar(),   annotation_name_offset = NULL,   annotation_name_rot = NULL,   annotation_name_align = FALSE,   annotation_name_side = \"auto\",   .data = NULL,   .vars = NULL,   .side = NULL )"},{"path":"https://david-barnett.github.io/microViz/reference/varAnnotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to specify a HeatmapAnnotation for variables in cor_heatmap — varAnnotation","text":"... Name-value pairs names correspond annotation names values output variable annotation functions anno_var_box(), manually specified AnnotationFunction objects name Name heatmap annotation, optional. annotation_legend_param list contains parameters annotation legends. See color_mapping_legend,ColorMapping-method possible options. show_legend Whether show annotation legends. value can one single value vector. gp Graphic parameters simple annotations (fill parameter ignored). border border single annotations. gap Gap annotations. can single value vector unit objects. show_annotation_name Whether show annotation names? column annotation, annotation names drawn either left right, row annotations, names draw either top bottom. value can vector. annotation_label Labels annotations. default individual annotation names. annotation_name_gp Graphic parameters annotation names. Graphic parameters can vectors. annotation_name_offset Offset annotation names, unit object. value can vector. annotation_name_rot Rotation annotation names. value can vector. annotation_name_align Whether align annotation names. annotation_name_side Side annotation names. .data OPTIONAL phyloseq psExtra, set override use data heatmap .vars OPTIONAL selection vector variables (names, numbers logical), set providing .data argument override default .side OPTIONAL string, indicating side variable annotations: set override default","code":""},{"path":"https://david-barnett.github.io/microViz/reference/varAnnotation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to specify a HeatmapAnnotation for variables in cor_heatmap — varAnnotation","text":"HeatmapAnnotation object","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"microviz-0127","dir":"Changelog","previous_headings":"","what":"microViz 0.12.7","title":"microViz 0.12.7","text":"Fix: dist_permanova now works R version 4.5.0","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"microviz-0126","dir":"Changelog","previous_headings":"","what":"microViz 0.12.6","title":"microViz 0.12.6","text":"Fix: ord_plot score retrieval now compatible vegan 2.7.0","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"microviz-0125","dir":"Changelog","previous_headings":"","what":"microViz 0.12.5","title":"microViz 0.12.5","text":"Fix: tax_fix longer allows min_length 0, empty strings () always replaced Fix/Feat: comp_barplot, ord_explore, tax_sort checks/warnings unavailable counts can disabled counts_warn = FALSE","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"microviz-0124","dir":"Changelog","previous_headings":"","what":"microViz 0.12.4","title":"microViz 0.12.4","text":"Fix: cowplot legend extraction warnings ord_explore","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"microviz-0123","dir":"Changelog","previous_headings":"","what":"microViz 0.12.3","title":"microViz 0.12.3","text":"Fix: allow hex code colours ord_plot","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"microviz-0122","dir":"Changelog","previous_headings":"","what":"microViz 0.12.2","title":"microViz 0.12.2","text":"Fix: comp_heatmap helper sampleAnnotation now work R 4.4","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"microviz-0121","dir":"Changelog","previous_headings":"","what":"microViz 0.12.1","title":"microViz 0.12.1","text":"corncob (suggested dependency) back CRAN - longer installed GitHub ibd phyloseq dataset added microViz, longer included corncob.","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"microviz-0120","dir":"Changelog","previous_headings":"","what":"microViz 0.12.0","title":"microViz 0.12.0","text":"Breaking change: va-wunifrac distance calculation longer available, available GUniFrac 1.8 Note: needed, corncob can now installed GitHub, currently available CRAN. corncob suggested dependency microViz data borrowed use several examples, needed bbdml models requested tax_model.","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"microviz-0110","dir":"Changelog","previous_headings":"","what":"microViz 0.11.0","title":"microViz 0.11.0","text":"taxatree_models now accepts transformation arguments allow transformation aggregation rank","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"microviz-01011","dir":"Changelog","previous_headings":"","what":"microViz 0.10.11","title":"microViz 0.10.11","text":"Fix: taxatree_stats_p_adjust can accept multiple grouping variables without specifying new_var.","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"microviz-01010","dir":"Changelog","previous_headings":"","what":"microViz 0.10.10","title":"microViz 0.10.10","text":"Fix: comp_barplot taxon ordering now correct tax_level set “Taxon”","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"microviz-0109","dir":"Changelog","previous_headings":"","what":"microViz 0.10.9","title":"microViz 0.10.9","text":"Fix: Small internal fix avoid renderggiraph deprecation warning ord_explore. Fix: Internal fix report NAs OTU table gracefully. (ps_counts issue #109) Fix: tax_select() tax_list argument can now actually take list (Issue #100)","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"microviz-0108","dir":"Changelog","previous_headings":"","what":"microViz 0.10.8","title":"microViz 0.10.8","text":"Fix: small internal fix compatibility next R version (relating loss stringsAsFactors global option)","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"microviz-0107","dir":"Changelog","previous_headings":"","what":"microViz 0.10.7","title":"microViz 0.10.7","text":"Fix dplyr version 1.1.0 warnings e.g. across() wanting explicit .cols use","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"microviz-0106","dir":"Changelog","previous_headings":"","what":"microViz 0.10.6","title":"microViz 0.10.6","text":"Fix shao19 example data: family rank tax table now correctly shows families","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"microviz-0105","dir":"Changelog","previous_headings":"","what":"microViz 0.10.5","title":"microViz 0.10.5","text":"Bug fix: manual direct labelling taxatree_plots taxatree_labels taxatree_plot_labels works properly also phyloseq object lack rooting rank (e.g. kingdom) Bug fix: comp_barplot bars now correct order using tax_level = “unique” New Getting Started article","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"microviz-0104","dir":"Changelog","previous_headings":"","what":"microViz 0.10.4","title":"microViz 0.10.4","text":"Bug fix: manual direct labelling taxatree_plots taxatree_labels taxatree_plot_labels works properly (without losing stats info rank)","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"microviz-0103","dir":"Changelog","previous_headings":"","what":"microViz 0.10.3","title":"microViz 0.10.3","text":"taxatree_plotkey IMPORTANT BUG FIX: layout now matches taxatree_plots Fixed broken ReadMe links","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"features-0-10-2","dir":"Changelog","previous_headings":"","what":"Features","title":"microViz 0.10.2","text":"ps_get can return phyloseq taxon counts counts = TRUE counts available","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"bug-fixes-0-10-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"microViz 0.10.2","text":"taxatree_plots keys robust #43 deprecation warnings #80 tax_transform add argument accepts “halfmin” #77 tax_top can use_counts #78 Compatibility old R versions 3.6.* improved (explicit stringsAsFactors = FALSE)","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"microviz-0101","dir":"Changelog","previous_headings":"","what":"microViz 0.10.1","title":"microViz 0.10.1","text":"Updates compatibility ggplot2 3.4.0 Move DT, ggraph tidygraph suggested dependencies","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"microviz-0100","dir":"Changelog","previous_headings":"","what":"microViz 0.10.0","title":"microViz 0.10.0","text":"Major internal changes S3 ps_extra S4 psExtra objects. See article change version also introduces changes around tax_model taxatree_models functionality.","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"breaking-changes-0-10-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"microViz 0.10.0","text":"Using $ operator access parts old “ps_extra” S3 class longer work must replaced accessor functions, e.g. ps_get “ps_extra” objects generated older versions compatible version 0.10.0 can converted new “psExtra” S4 objects upgrade_ps_extra_to_psExtra tax_model taxatree_model parallel processing future future.apply default, needs enabled argument use_future = TRUE. tax_model attaches results psExtra object default, can restore old behaviour return_psx = FALSE comp_barplot “” taxa category renamed “” default","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"features-0-10-0","dir":"Changelog","previous_headings":"","what":"Features","title":"microViz 0.10.0","text":"tax_model taxatree_model can now run multiple models per taxon, accepting lists formula variables arguments. allows running e.g. three simple regression models per taxon predictors , b, c variables = list(“”, “b”, “c”) cor_test new simple wrapper around stats::cor.test y~x formula interface, allowing use tax_model","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"fixes-0-10-0","dir":"Changelog","previous_headings":"","what":"Fixes","title":"microViz 0.10.0","text":"deprecation warnings taxatree_plot_labels","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"features-0-9-7","dir":"Changelog","previous_headings":"","what":"Features","title":"microViz 0.9.7","text":"comp_barplot gains x argument, change default x aesthetic something SAMPLE, useful (faceted) plotting repeated samples site/individual time different conditions samples missing (see compositions tutorial article) ps_seriate can now aggregate taxa seriation (returns unaggregated still)","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"features-0-9-6","dir":"Changelog","previous_headings":"","what":"Features","title":"microViz 0.9.6","text":"Custom reordering taxa comp_barplot now easier, just name taxa want see first tax_order argument, brought front tax_reorder exported, now accepts subset available taxa names (powering improvement comp_barplot)","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"fixes-0-9-6","dir":"Changelog","previous_headings":"","what":"Fixes","title":"microViz 0.9.6","text":"Bump rlang dependency version 1.0.0 fixing https://github.com/david-barnett/microViz/issues/69","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"fixes-0-9-5","dir":"Changelog","previous_headings":"","what":"Fixes","title":"microViz 0.9.5","text":"tax_rename accepts integerish values pad_digits argument","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"fixes-0-9-4","dir":"Changelog","previous_headings":"","what":"Fixes","title":"microViz 0.9.4","text":"otu_get correctly subsets samples taxa requested heatmaps one row column can plotted without explicitly suppressing seriation","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"features-0-9-3","dir":"Changelog","previous_headings":"","what":"Features","title":"microViz 0.9.3","text":"Robust clr robust aitchison distance now supported following inclusion vegan - tax_transform supports “rclr” (robust centered log ratio) - dist_calc supports “robust.aitchison” distance (rclr & euclidean distance)","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"features-0-9-2","dir":"Changelog","previous_headings":"","what":"Features","title":"microViz 0.9.2","text":"ps_dedupe now allows keeping specified number samples per group, just one, useful e.g. keeping first 2 samples per participant site. shao19 dataset now included microViz use “Learn microbiome analysis microViz” tutorial","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"fixes-0-9-2","dir":"Changelog","previous_headings":"","what":"Fixes","title":"microViz 0.9.2","text":"ps_dedupe now deduplicates samples correctly duplicates specified multiple variables, provides labelling-mode check duplicate identification result removal.","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"features-0-9-1","dir":"Changelog","previous_headings":"","what":"Features","title":"microViz 0.9.1","text":"New function tax_palette allows easy creation fixed colour palette taxa, use e.g. comp_barplot New convenience functions ps_calc_diversity ps_calc_richness calculate diversity richness index (using microbiome package functions) add phyloseq sample data New function tax_rename allows renaming taxa using unique combination classification chosen rank abundance taxon (e.g. ASV145 becomes Bifidobacterium-002, can interpreted second abundant Bifidobacterium ASV) tax_sort can now sort taxa “asis” (.e. nothing), now permits upfront custom sorting taxa use comp_barplot tax_sort can now transform taxa temporarily sorting e.g. sort mean compositional (%) relative abundance","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"heatmaps-major-changes-0-9-0","dir":"Changelog","previous_headings":"","what":"Heatmaps major changes","title":"microViz 0.9.0","text":"comp_heatmap cor_heatmap helpers largely rewritten. guidance, see new website article heatmaps. taxAnnotation varAnnotation annotation helper functions replace deprecated tax_anno var_anno functions sampleAnnotation added coordinating sample annotations comp_heatmap various anno_* helpers annotation coordinating functions ","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"features-0-8-2","dir":"Changelog","previous_headings":"","what":"Features","title":"microViz 0.8.2","text":"taxatree_plots can now show symbols indicating multiple levels statistical significance taxatree_plots: now easier use colour palettes default luminance","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"features-0-8-1","dir":"Changelog","previous_headings":"","what":"Features","title":"microViz 0.8.1","text":"ord_explore can perform “binary” transformations, unlocking interactive use Binary Jaccard etc. tax_transform gains add argument simply add constant value otu_table values transformation (alternative zero_replace) tax_scale gains keep_counts argument consistency tax_transform","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"fixes-0-8-1","dir":"Changelog","previous_headings":"","what":"Fixes","title":"microViz 0.8.1","text":"tax_model now requires corncob installed actually used ord_explore barplot numerical inputs now debounced prevent lag repeated redrawing","code":""},{"path":[]},{"path":[]},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"trees-0-8-0","dir":"Changelog","previous_headings":"Breaking changes","what":"Trees","title":"microViz 0.8.0 - “autumn leaves”","text":"taxatree_* family functions largely rewritten. guidance, see new website article statistical modelling taxa. taxatree_models now attaches resulting list ps_extra taxatree_models2stats must run output taxatree_models using taxatree_plots taxatree_plots different arguments can now directly labelled taxatree_plot_labels taxatree_label run first identify taxa label. taxatree_plotkey different arguments, flexible labelling conditions smarter label positioning approach. tax_model taxatree_models now use “lm” type default, instead “bbdml”, corncob suggested dependency.","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"ordination-0-8-0","dir":"Changelog","previous_headings":"Breaking changes","what":"Ordination","title":"microViz 0.8.0 - “autumn leaves”","text":"ord_plot default labels now alpha = 1 taxa constraints (previously 0.8) ord_plot “auto”matic loading/constraint vector length scalar adjustment improvement: now uses axes","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"barplots-0-8-0","dir":"Changelog","previous_headings":"Breaking changes","what":"Barplots","title":"microViz 0.8.0 - “autumn leaves”","text":"comp_barplot now uses bray-curtis default sample ordering (instead aitchison) generally looks better comp_barplot now expects palette argument colours first--last order, intuitive previous reverse order distinct_palette now adds “lightgrey” end default","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"other-0-8-0","dir":"Changelog","previous_headings":"Breaking changes","what":"Other","title":"microViz 0.8.0 - “autumn leaves”","text":"tax_filter’s is_counts argument replaced use_counts, allowing filter ps_extra objects using stored count data (.e. tax_transform). comp_heatmap can longer transform data internally, accepts data already transformed tax_transform uses stored count data ps_extra taxa annotations tax_anno heatmap annotation default style slightly changed. tax_names2rank replaces deprecated tax_names2tt","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"features-0-8-0","dir":"Changelog","previous_headings":"","what":"Features","title":"microViz 0.8.0 - “autumn leaves”","text":"ord_plot arrow labels can now rotated help tax_lab_style() constraint_lab_style() ps_calc_dominant function added, conveniently identifying dominant taxon phyloseq sample distinct_palette gains “kelly” “greenArmytage” palettes helpfully adds “lightgrey” end default convenient use palette argument comp_barplot tax_transform can now chain multiple transformations together records transformations ps_extra output tax_mutate function added, modifying tax_table rank variables dplyr mutate syntax tax_sort can now sort ps_extra objects heatmap annotation helper tax_anno longer requires ‘column’ ‘row’ specified advance prev, low level helper function calculating taxon prevalence now exported Various phyloseq accessor functions now work ps_extra objects e.g. taxa_names, sample_names","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"fixes-0-8-0","dir":"Changelog","previous_headings":"","what":"Fixes","title":"microViz 0.8.0 - “autumn leaves”","text":"cor_heatmap comp_heatmap now respect column seriation arguments different row seriation comp_barplot now actually orders grouped samples similarity splitting groups, documented","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"microviz-0710","dir":"Changelog","previous_headings":"","what":"microViz 0.7.10","title":"microViz 0.7.10","text":"Updated citation information JOSS publication. changes.","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"microviz-079","dir":"Changelog","previous_headings":"","what":"microViz 0.7.9","title":"microViz 0.7.9","text":"Release accompanying JOSS manuscript acceptance. Includes fix (hopefully temporary) incorrect barplot legend ord_explore caused bug introduced ggplot2 version 3.3.4 noted https://github.com/tidyverse/ggplot2/issues/4511","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"microviz-078","dir":"Changelog","previous_headings":"","what":"microViz 0.7.8","title":"microViz 0.7.8","text":"ord_plot gains vec_* helper functions generating lists styling taxa constraint vectors/arrows (vec_constraint, vec_tax_all vec_tax_sel)","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"microviz-077","dir":"Changelog","previous_headings":"","what":"microViz 0.7.7","title":"microViz 0.7.7","text":"ord_explore shapes selection bug fixed limiting 5 shapes returned new scale_shape_girafe_filled function","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"features-0-7-6","dir":"Changelog","previous_headings":"","what":"Features","title":"microViz 0.7.6","text":"stat_chulls added, drawing convex hulls ord_plot ord_explore ordinations add_paths added, drawing geom_paths connecting subset samples (time) ordination plot","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"fixes-0-7-6","dir":"Changelog","previous_headings":"","what":"Fixes","title":"microViz 0.7.6","text":"phyloseq_validate longer checks “unique” tax_table rank column NAs nchar<4 (avoiding warnings ord_explore caused short taxa_names)","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"microviz-075","dir":"Changelog","previous_headings":"","what":"microViz 0.7.5","title":"microViz 0.7.5","text":"ord_explore can now draw stat_ellipse taxa loading vectors tax_agg error messages now include personalised suggested tax_fix code","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"microviz-074","dir":"Changelog","previous_headings":"","what":"microViz 0.7.4","title":"microViz 0.7.4","text":"ord_explore Shiny app GUI can now also used interactively generate ordination plots, generate ord_plot code ord_plot bug fix - can now plot dimension Removed deprecated tax_fill_unknowns function","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"microviz-073","dir":"Changelog","previous_headings":"","what":"microViz 0.7.3","title":"microViz 0.7.3","text":"phyloseq_validate verbose = FALSE actually silent now.","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"microviz-072","dir":"Changelog","previous_headings":"","what":"microViz 0.7.2","title":"microViz 0.7.2","text":"ord_explore now compatible Shiny version >=1.5.0 tax_fix now sends messages fixing completely anonymous rows, instead warnings","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"microviz-071","dir":"Changelog","previous_headings":"","what":"microViz 0.7.1","title":"microViz 0.7.1","text":"Allows ps_seriate, ps_arrange, ps_reorder, ps_mutate, ps_select work directly ps_extra objects, can helpful quickly exploring / printing aggregated data, new “Working phyloseq objects” tutorial.","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"breaking-changes-0-7-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"microViz 0.7.0 - “fickle fixes”","text":"tax_fix replaces deprecated tax_fill_unknowns, tax_fix arguments except ‘levels’ argument, removed","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"features-0-7-0","dir":"Changelog","previous_headings":"","what":"Features","title":"microViz 0.7.0 - “fickle fixes”","text":"tax_fix_interactive Shiny app help clean taxonomy table tax_fix","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"breaking-changes-0-6-1","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"microViz 0.6.1","text":"ord_plot_iris ord_explore longer take ps argument untransformed counts, (default) tax_transform now keeps untransformed counts otu_table ps_extra object","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"features-0-6-1","dir":"Changelog","previous_headings":"","what":"Features","title":"microViz 0.6.1","text":"ord_explore now allows much better control selection points (using ggiraph functionality) ord_plot now interactive option ggiraph package ord_plot_iris gains ord_plot argument, allowing simple pairing iris plot ordination made easily comp_barplot (extension ord_plot_iris) can now made interactive simple fashion, using ggiraph hover/tooltip interaction taxa","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"microviz-060---open-sesame","dir":"Changelog","previous_headings":"","what":"microViz 0.6.0 - “open sesame”","title":"microViz 0.6.0 - “open sesame”","text":"first public release version microViz. still active development, pay attention following: Minor version changes (e.g. 0.5.* 0.6.0) signal breaking changes made, .e. installing new version may break previously working code. Breaking changes listed document. Patch versions (e.g. 0.5.1 0.5.2) used release new features bug fixes, break existing code. Please let know anyway!","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"breaking-changes-0-6-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"microViz 0.6.0 - “open sesame”","text":"tax_agg argument agg_level renamed rank. tax_agg returns taxa different order (now different order , aggregation , microbiome::aggregate_taxa()). tax_agg now checks taxa uniquely identified specified rank level. (now also twice fast) tax_fill_unknowns x arg renamed ps. Also now stops unknown values detected left known values tax_table, always wrong/need fixing. Also, default now searches larger list probably unknown/uninformative tax_table values e.g. “k__NA”, “p__Unknown” now replaced","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"features-0-6-0","dir":"Changelog","previous_headings":"","what":"Features","title":"microViz 0.6.0 - “open sesame”","text":"comp_barplot gets merge_other argument, , FALSE, shows full diversity samples outlining individual taxa within (grey) “” category! tax_sort sorting taxa tax_table otu_table several name abundance options (deletes phy_tree present!) tax_transform can take rank argument, perform aggregation (internally using tax_agg) transformation one function, record results. now recommended usage! tax_transform new transformation = “binary” can convert presence/absence data (used tax_sort = “prev”) tax_top flexibly returning top n taxa, chosen rank, ordering tax_sort","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"breaking-changes-0-5-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"microViz 0.5.0 - “hot maps”","text":"cor_heatmap comp_heatmap argument changed: ‘taxa_which’ replaced ‘taxa_side’ easier control taxa annotations placed (default behaviour stays )","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"features-0-5-0","dir":"Changelog","previous_headings":"","what":"Features","title":"microViz 0.5.0 - “hot maps”","text":"Optionally annotate cor_heatmap variable distributions using var_anno helpers: anno_var_box anno_var_hist cor_heatmap gets ‘var_fun’ argument transforming variables correlating phyloseq_validate checks zero taxa, can happen filtering samples tax_filter gets undetected arg (greater ), optional alternative prev_detection_threshold (greater equal )","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"bug-fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"microViz 0.5.0 - “hot maps”","text":"heatmaps handle NAs better (viz_heatmap internal function fix) heat_palette can set range arg manually now without errors","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"other-0-5-0","dir":"Changelog","previous_headings":"","what":"Other","title":"microViz 0.5.0 - “hot maps”","text":"minor versions 0.5 now get memorable name, probably referring features added since last minor version","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"features-0-4-3","dir":"Changelog","previous_headings":"","what":"Features","title":"microViz 0.4.3","text":"cor_heatmap microbe-metadata correlation heatmaps comp_heatmap visualising taxonomic composition across samples (ordered/clustered) ord_calc can now guess method user wants default (checking presence distance matrix constraints) ord_plot auto_caption size can now set, also now exposes coord_* args: expand clip ord_plot_iris now handles multiple rings anno_binary annotations, anno_binary position now closer anno_colour set ord_explore shiny app menu styling little cleaner (still needs love) tax_scale applying base::scale() phyloseq otu_table tax_name easily setting informative unique phyloseq taxa_names","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"bug-fixes-0-4-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"microViz 0.4.3","text":"dist_permanova’s obsolete return arg removed tax_filter gets explicit handling compositional input tax_fill_unknowns gets better handling fully unclassified taxa taxatree_nodes now checks cross-rank name duplications, mess taxatree graph structure","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"bug-fixes-0-4-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"microViz 0.4.2","text":"ord_explore now works ps_extra classes tax_fill_unknowns gives informative error data one taxonomic rank tax_filter ps argument default removed","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"bug-fixes-0-4-1","dir":"Changelog","previous_headings":"","what":"Bug fixes:","title":"microViz 0.4.1","text":"ord_calc now correctly returns subsetted phyloseq ps_extra obj constrained ordination taxatree_plots taxatree_plotkey now reactive automatic minimum node edge sizes depend set maxes","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"breaking-changes-0-4-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"microViz 0.4.0","text":"dist_permanova replaces permanova naming consistency guiding user comp_barplot replaces plot_comp_bar anticipation () future heatmap function(s) named comp_heatmap similar","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"features-0-4-0","dir":"Changelog","previous_headings":"","what":"Features","title":"microViz 0.4.0","text":"New “ps_extra” class (S3) conveniently stores phyloseq object alongside calculated distance matrix, ordination permanova models, well records tax_agg tax_transform calls. “ps_extra” class objects pretty compact print method, simple list structure, convenient accessor functions return component: ps_get, info_get, dist_get, ord_get, perm_get, bdisp_get.","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"features-0-3-2","dir":"Changelog","previous_headings":"","what":"Features","title":"microViz 0.3.2","text":"tax_model taxatree_models can handle linear modeling e.g. compositional (TS-Scaled) data taxatree_plots sensible defaults (automatic symmetrical colour limits variable selection based model type)","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"breaking-changes-0-3-1","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"microViz 0.3.1","text":"ord_plot_iris data arg replaced ord conditionally optional ps arg data ord transformed permanova always uses adonis2 now, arg removed, replaced argument set sums squares choice","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"features-0-3-1","dir":"Changelog","previous_headings":"","what":"Features","title":"microViz 0.3.1","text":"ord_plot gets center argument center expand plot limits center around zero (useful pairing ord_plot_iris) ord_explore can now also display ordinations don’t use distances like PCA RDA (well PCoA course) ord_explore gains ps arg (untransformed version) tweaks facilitate using transformed data ord","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"other-fixes-0-3-1","dir":"Changelog","previous_headings":"","what":"Other fixes","title":"microViz 0.3.1","text":"ord_plot_iris annotation args now NULL default. microbiome::aggregate_top_taxa copied directly microViz avoid coming deprecation current warning.","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"features-0-2-0","dir":"Changelog","previous_headings":"","what":"Features","title":"microViz 0.2.0","text":"taxatree_models taxatree_plots bring tree-based visualisations statistical models","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"breaking-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"microViz 0.2.0","text":"tax_model replaces tax_model_corncob function eventually generalised use model types taxatree_plots taxatree_plotkey replaces rudimentary taxatree_plot","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"features-0-1-2","dir":"Changelog","previous_headings":"","what":"Features","title":"microViz 0.1.2","text":"ord_explore allows interactive exploration composition ordinated samples using Shiny","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"features-0-1-1","dir":"Changelog","previous_headings":"","what":"Features","title":"microViz 0.1.1","text":"ord_plot_iris pca-ordered circular compositional barplots pair ord_plot output ps_select easily selecting variables within phyloseq sample data ord_plot exposes scaling argument","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"major-renaming-0-1-0","dir":"Changelog","previous_headings":"","what":"Major renaming","title":"microViz 0.1.0","text":"calc_dist –> dist_calc beta_disper –> dist_bdisp ordin8 –> ord_calc plot_ordin8 –> ord_plot model_tax_corncob –> tax_model_corncob","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"other-breaking-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Other breaking changes","title":"microViz 0.1.0","text":"groups argument renamed group_by consistency new facet_by argument drop_unused_vars replaced keep_all_vars defaults TRUE","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"features-0-1-0","dir":"Changelog","previous_headings":"","what":"Features","title":"microViz 0.1.0","text":"ps_seriate ordering phyloseq samples similarity","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"features-0-0-6","dir":"Changelog","previous_headings":"","what":"Features","title":"microViz 0.0.6","text":"ps_filter allows filtering phyloseq samples values variables sample_data (wrapper around dplyr’s filter function)","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"breaking-changes-0-0-6","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"microViz 0.0.6","text":"ps_mutate longer needs .across argument use dplyr::across()","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"features-0-0-5","dir":"Changelog","previous_headings":"","what":"Features","title":"microViz 0.0.5","text":"ps_dedupe bug fix method = “readcount” now correctly keeps samples “first” “last” methods ","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"features-0-0-4","dir":"Changelog","previous_headings":"","what":"Features","title":"microViz 0.0.4","text":"ps_arrange allows reordering phyloseq samples values variables sample_data otu_table (wrapper around dplyr’s arrange function) ps_otu2samdat add taxon abundance variables phyloseq otu_table sample_data use plotting etc","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"features-0-0-3","dir":"Changelog","previous_headings":"","what":"Features","title":"microViz 0.0.3","text":"ps_mutate allowing easy piped modification phyloseq sample_data (wrapper around dplyr’s mutate function) ps_join allows easy piped addition dataframe data phyloseq sample_data (wrapper around dplyr’s *_join functions)","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"breaking-changes-0-0-2","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"microViz 0.0.2","text":"plot_ordin8 arguments changed allow easier sizing styling vectors labels plot_ordin8 default styling taxon constraint vectors labels changed: background vectors now semi-transparent dashed lines used default (can set)","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"other-0-0-2","dir":"Changelog","previous_headings":"","what":"Other","title":"microViz 0.0.2","text":"ordin8 plot_ordin8 get basic support CCA NMDS methods finally plot_comp_bar gets order_samples_with_all_taxa tax_transform_for_ordering Documentation manual sample ordering across plot_comp_bar groups added Visualising Compositions article website. Documentation experimental polar coordinates PCA_angle sorting added new article called PCA-sorted polar composition plots, website.","code":""},{"path":[]},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"main-changes-0-0-1","dir":"Changelog","previous_headings":"","what":"Main changes","title":"microViz 0.0.1","text":"phyloseq_validate now fixes otu_tables stored integers messages user suspicious NA tax_table entries happens part plot_comp_bar plot_ordin8 plot_comp_bar plot_ordin8 gain taxon_renamer argument allow customise taxon names plots plot_comp_bar can now handle missing values grouping variable converting NAs “NA”s functions renamed naming consistency: prepend_ranks -> tax_prepend_ranks tax_model_corncob -> model_tax_corncob corncob_models_to_var_stats -> modelsmodels2stats_corncob tax_tree_ nodes/edges/plot -> taxatree_ …","code":""},{"path":"https://david-barnett.github.io/microViz/news/index.html","id":"other-0-0-1","dir":"Changelog","previous_headings":"","what":"Other","title":"microViz 0.0.1","text":"Added NEWS.md file track changes package.","code":""}]
